{"meta":{"version":1,"warehouse":"2.2.0"},"models":{"Asset":[{"_id":"source/CNAME","path":"CNAME","modified":1,"renderable":0},{"_id":"themes/hexo-theme-next/source/css/main.styl","path":"css/main.styl","modified":1,"renderable":1},{"_id":"themes/hexo-theme-next/source/images/algolia_logo.svg","path":"images/algolia_logo.svg","modified":1,"renderable":1},{"_id":"themes/hexo-theme-next/source/images/avatar.gif","path":"images/avatar.gif","modified":1,"renderable":1},{"_id":"themes/hexo-theme-next/source/images/cc-by-nc-nd.svg","path":"images/cc-by-nc-nd.svg","modified":1,"renderable":1},{"_id":"themes/hexo-theme-next/source/images/cc-by-nc-sa.svg","path":"images/cc-by-nc-sa.svg","modified":1,"renderable":1},{"_id":"themes/hexo-theme-next/source/images/cc-by-nc.svg","path":"images/cc-by-nc.svg","modified":1,"renderable":1},{"_id":"themes/hexo-theme-next/source/images/cc-by-nd.svg","path":"images/cc-by-nd.svg","modified":1,"renderable":1},{"_id":"themes/hexo-theme-next/source/images/cc-by-sa.svg","path":"images/cc-by-sa.svg","modified":1,"renderable":1},{"_id":"themes/hexo-theme-next/source/images/cc-by.svg","path":"images/cc-by.svg","modified":1,"renderable":1},{"_id":"themes/hexo-theme-next/source/images/cc-zero.svg","path":"images/cc-zero.svg","modified":1,"renderable":1},{"_id":"themes/hexo-theme-next/source/images/favicon-16x16-next.png","path":"images/favicon-16x16-next.png","modified":1,"renderable":1},{"_id":"themes/hexo-theme-next/source/images/favicon-32x32-next.png","path":"images/favicon-32x32-next.png","modified":1,"renderable":1},{"_id":"themes/hexo-theme-next/source/images/favicon.ico","path":"images/favicon.ico","modified":1,"renderable":1},{"_id":"themes/hexo-theme-next/source/images/loading.gif","path":"images/loading.gif","modified":1,"renderable":1},{"_id":"themes/hexo-theme-next/source/images/mypic.jpg","path":"images/mypic.jpg","modified":1,"renderable":1},{"_id":"themes/hexo-theme-next/source/images/logo.svg","path":"images/logo.svg","modified":1,"renderable":1},{"_id":"themes/hexo-theme-next/source/images/placeholder.gif","path":"images/placeholder.gif","modified":1,"renderable":1},{"_id":"themes/hexo-theme-next/source/images/quote-l.svg","path":"images/quote-l.svg","modified":1,"renderable":1},{"_id":"themes/hexo-theme-next/source/images/quote-r.svg","path":"images/quote-r.svg","modified":1,"renderable":1},{"_id":"themes/hexo-theme-next/source/images/searchicon.png","path":"images/searchicon.png","modified":1,"renderable":1},{"_id":"source/pic/map/2.png","path":"pic/map/2.png","modified":1,"renderable":0},{"_id":"source/pic/map/3.png","path":"pic/map/3.png","modified":1,"renderable":0},{"_id":"themes/hexo-theme-next/source/images/apple-touch-icon-next.png","path":"images/apple-touch-icon-next.png","modified":1,"renderable":1},{"_id":"themes/hexo-theme-next/source/lib/algolia-instant-search/instantsearch.min.css","path":"lib/algolia-instant-search/instantsearch.min.css","modified":1,"renderable":1},{"_id":"themes/hexo-theme-next/source/lib/canvas-nest/canvas-nest.min.js","path":"lib/canvas-nest/canvas-nest.min.js","modified":1,"renderable":1},{"_id":"themes/hexo-theme-next/source/lib/canvas-ribbon/canvas-ribbon.js","path":"lib/canvas-ribbon/canvas-ribbon.js","modified":1,"renderable":1},{"_id":"themes/hexo-theme-next/source/lib/fastclick/LICENSE","path":"lib/fastclick/LICENSE","modified":1,"renderable":1},{"_id":"themes/hexo-theme-next/source/lib/fastclick/README.md","path":"lib/fastclick/README.md","modified":1,"renderable":1},{"_id":"themes/hexo-theme-next/source/lib/fastclick/bower.json","path":"lib/fastclick/bower.json","modified":1,"renderable":1},{"_id":"themes/hexo-theme-next/source/lib/font-awesome/HELP-US-OUT.txt","path":"lib/font-awesome/HELP-US-OUT.txt","modified":1,"renderable":1},{"_id":"themes/hexo-theme-next/source/lib/font-awesome/bower.json","path":"lib/font-awesome/bower.json","modified":1,"renderable":1},{"_id":"themes/hexo-theme-next/source/lib/jquery_lazyload/README.md","path":"lib/jquery_lazyload/README.md","modified":1,"renderable":1},{"_id":"themes/hexo-theme-next/source/lib/jquery_lazyload/CONTRIBUTING.md","path":"lib/jquery_lazyload/CONTRIBUTING.md","modified":1,"renderable":1},{"_id":"themes/hexo-theme-next/source/lib/jquery_lazyload/bower.json","path":"lib/jquery_lazyload/bower.json","modified":1,"renderable":1},{"_id":"themes/hexo-theme-next/source/lib/jquery_lazyload/jquery.lazyload.js","path":"lib/jquery_lazyload/jquery.lazyload.js","modified":1,"renderable":1},{"_id":"themes/hexo-theme-next/source/lib/jquery_lazyload/jquery.scrollstop.js","path":"lib/jquery_lazyload/jquery.scrollstop.js","modified":1,"renderable":1},{"_id":"themes/hexo-theme-next/source/lib/needsharebutton/font-embedded.css","path":"lib/needsharebutton/font-embedded.css","modified":1,"renderable":1},{"_id":"themes/hexo-theme-next/source/lib/needsharebutton/needsharebutton.css","path":"lib/needsharebutton/needsharebutton.css","modified":1,"renderable":1},{"_id":"themes/hexo-theme-next/source/lib/needsharebutton/needsharebutton.js","path":"lib/needsharebutton/needsharebutton.js","modified":1,"renderable":1},{"_id":"themes/hexo-theme-next/source/lib/pace/pace-theme-barber-shop.min.css","path":"lib/pace/pace-theme-barber-shop.min.css","modified":1,"renderable":1},{"_id":"themes/hexo-theme-next/source/lib/pace/pace-theme-bounce.min.css","path":"lib/pace/pace-theme-bounce.min.css","modified":1,"renderable":1},{"_id":"themes/hexo-theme-next/source/lib/pace/pace-theme-big-counter.min.css","path":"lib/pace/pace-theme-big-counter.min.css","modified":1,"renderable":1},{"_id":"themes/hexo-theme-next/source/lib/pace/pace-theme-center-circle.min.css","path":"lib/pace/pace-theme-center-circle.min.css","modified":1,"renderable":1},{"_id":"themes/hexo-theme-next/source/lib/pace/pace-theme-center-atom.min.css","path":"lib/pace/pace-theme-center-atom.min.css","modified":1,"renderable":1},{"_id":"themes/hexo-theme-next/source/lib/pace/pace-theme-center-radar.min.css","path":"lib/pace/pace-theme-center-radar.min.css","modified":1,"renderable":1},{"_id":"themes/hexo-theme-next/source/lib/pace/pace-theme-center-simple.min.css","path":"lib/pace/pace-theme-center-simple.min.css","modified":1,"renderable":1},{"_id":"themes/hexo-theme-next/source/lib/pace/pace-theme-corner-indicator.min.css","path":"lib/pace/pace-theme-corner-indicator.min.css","modified":1,"renderable":1},{"_id":"themes/hexo-theme-next/source/lib/pace/pace-theme-fill-left.min.css","path":"lib/pace/pace-theme-fill-left.min.css","modified":1,"renderable":1},{"_id":"themes/hexo-theme-next/source/lib/pace/pace-theme-flash.min.css","path":"lib/pace/pace-theme-flash.min.css","modified":1,"renderable":1},{"_id":"themes/hexo-theme-next/source/lib/pace/pace-theme-loading-bar.min.css","path":"lib/pace/pace-theme-loading-bar.min.css","modified":1,"renderable":1},{"_id":"themes/hexo-theme-next/source/lib/pace/pace-theme-mac-osx.min.css","path":"lib/pace/pace-theme-mac-osx.min.css","modified":1,"renderable":1},{"_id":"themes/hexo-theme-next/source/lib/pace/pace-theme-minimal.min.css","path":"lib/pace/pace-theme-minimal.min.css","modified":1,"renderable":1},{"_id":"themes/hexo-theme-next/source/lib/pace/pace.min.js","path":"lib/pace/pace.min.js","modified":1,"renderable":1},{"_id":"themes/hexo-theme-next/source/lib/three/canvas_lines.min.js","path":"lib/three/canvas_lines.min.js","modified":1,"renderable":1},{"_id":"themes/hexo-theme-next/source/lib/three/canvas_sphere.min.js","path":"lib/three/canvas_sphere.min.js","modified":1,"renderable":1},{"_id":"themes/hexo-theme-next/source/lib/three/three-waves.min.js","path":"lib/three/three-waves.min.js","modified":1,"renderable":1},{"_id":"themes/hexo-theme-next/source/lib/velocity/bower.json","path":"lib/velocity/bower.json","modified":1,"renderable":1},{"_id":"themes/hexo-theme-next/source/lib/velocity/velocity.min.js","path":"lib/velocity/velocity.min.js","modified":1,"renderable":1},{"_id":"themes/hexo-theme-next/source/lib/velocity/velocity.ui.js","path":"lib/velocity/velocity.ui.js","modified":1,"renderable":1},{"_id":"themes/hexo-theme-next/source/lib/velocity/velocity.ui.min.js","path":"lib/velocity/velocity.ui.min.js","modified":1,"renderable":1},{"_id":"themes/hexo-theme-next/source/js/src/affix.js","path":"js/src/affix.js","modified":1,"renderable":1},{"_id":"themes/hexo-theme-next/source/js/src/algolia-search.js","path":"js/src/algolia-search.js","modified":1,"renderable":1},{"_id":"themes/hexo-theme-next/source/js/src/bootstrap.js","path":"js/src/bootstrap.js","modified":1,"renderable":1},{"_id":"themes/hexo-theme-next/source/js/src/exturl.js","path":"js/src/exturl.js","modified":1,"renderable":1},{"_id":"themes/hexo-theme-next/source/js/src/hook-duoshuo.js","path":"js/src/hook-duoshuo.js","modified":1,"renderable":1},{"_id":"themes/hexo-theme-next/source/js/src/js.cookie.js","path":"js/src/js.cookie.js","modified":1,"renderable":1},{"_id":"themes/hexo-theme-next/source/js/src/motion.js","path":"js/src/motion.js","modified":1,"renderable":1},{"_id":"themes/hexo-theme-next/source/js/src/post-details.js","path":"js/src/post-details.js","modified":1,"renderable":1},{"_id":"themes/hexo-theme-next/source/js/src/scroll-cookie.js","path":"js/src/scroll-cookie.js","modified":1,"renderable":1},{"_id":"themes/hexo-theme-next/source/js/src/scrollspy.js","path":"js/src/scrollspy.js","modified":1,"renderable":1},{"_id":"themes/hexo-theme-next/source/js/src/utils.js","path":"js/src/utils.js","modified":1,"renderable":1},{"_id":"themes/hexo-theme-next/source/lib/jquery/index.js","path":"lib/jquery/index.js","modified":1,"renderable":1},{"_id":"themes/hexo-theme-next/source/lib/Han/dist/han.min.css","path":"lib/Han/dist/han.min.css","modified":1,"renderable":1},{"_id":"themes/hexo-theme-next/source/lib/fancybox/source/blank.gif","path":"lib/fancybox/source/blank.gif","modified":1,"renderable":1},{"_id":"themes/hexo-theme-next/source/lib/fancybox/source/fancybox_loading.gif","path":"lib/fancybox/source/fancybox_loading.gif","modified":1,"renderable":1},{"_id":"themes/hexo-theme-next/source/lib/fancybox/source/fancybox_loading@2x.gif","path":"lib/fancybox/source/fancybox_loading@2x.gif","modified":1,"renderable":1},{"_id":"themes/hexo-theme-next/source/lib/fancybox/source/fancybox_overlay.png","path":"lib/fancybox/source/fancybox_overlay.png","modified":1,"renderable":1},{"_id":"themes/hexo-theme-next/source/lib/fancybox/source/fancybox_sprite.png","path":"lib/fancybox/source/fancybox_sprite.png","modified":1,"renderable":1},{"_id":"themes/hexo-theme-next/source/lib/fancybox/source/fancybox_sprite@2x.png","path":"lib/fancybox/source/fancybox_sprite@2x.png","modified":1,"renderable":1},{"_id":"themes/hexo-theme-next/source/lib/fancybox/source/jquery.fancybox.css","path":"lib/fancybox/source/jquery.fancybox.css","modified":1,"renderable":1},{"_id":"themes/hexo-theme-next/source/lib/fancybox/source/jquery.fancybox.pack.js","path":"lib/fancybox/source/jquery.fancybox.pack.js","modified":1,"renderable":1},{"_id":"themes/hexo-theme-next/source/lib/fastclick/lib/fastclick.js","path":"lib/fastclick/lib/fastclick.js","modified":1,"renderable":1},{"_id":"themes/hexo-theme-next/source/lib/fastclick/lib/fastclick.min.js","path":"lib/fastclick/lib/fastclick.min.js","modified":1,"renderable":1},{"_id":"themes/hexo-theme-next/source/lib/font-awesome/css/font-awesome.css","path":"lib/font-awesome/css/font-awesome.css","modified":1,"renderable":1},{"_id":"themes/hexo-theme-next/source/lib/font-awesome/css/font-awesome.css.map","path":"lib/font-awesome/css/font-awesome.css.map","modified":1,"renderable":1},{"_id":"themes/hexo-theme-next/source/lib/font-awesome/css/font-awesome.min.css","path":"lib/font-awesome/css/font-awesome.min.css","modified":1,"renderable":1},{"_id":"themes/hexo-theme-next/source/lib/ua-parser-js/dist/ua-parser.min.js","path":"lib/ua-parser-js/dist/ua-parser.min.js","modified":1,"renderable":1},{"_id":"themes/hexo-theme-next/source/lib/ua-parser-js/dist/ua-parser.pack.js","path":"lib/ua-parser-js/dist/ua-parser.pack.js","modified":1,"renderable":1},{"_id":"themes/hexo-theme-next/source/js/src/schemes/pisces.js","path":"js/src/schemes/pisces.js","modified":1,"renderable":1},{"_id":"themes/hexo-theme-next/source/lib/Han/dist/han.css","path":"lib/Han/dist/han.css","modified":1,"renderable":1},{"_id":"themes/hexo-theme-next/source/lib/Han/dist/han.js","path":"lib/Han/dist/han.js","modified":1,"renderable":1},{"_id":"themes/hexo-theme-next/source/lib/Han/dist/han.min.js","path":"lib/Han/dist/han.min.js","modified":1,"renderable":1},{"_id":"themes/hexo-theme-next/source/lib/fancybox/source/jquery.fancybox.js","path":"lib/fancybox/source/jquery.fancybox.js","modified":1,"renderable":1},{"_id":"themes/hexo-theme-next/source/lib/font-awesome/fonts/fontawesome-webfont.woff","path":"lib/font-awesome/fonts/fontawesome-webfont.woff","modified":1,"renderable":1},{"_id":"themes/hexo-theme-next/source/lib/font-awesome/fonts/fontawesome-webfont.woff2","path":"lib/font-awesome/fonts/fontawesome-webfont.woff2","modified":1,"renderable":1},{"_id":"themes/hexo-theme-next/source/lib/velocity/velocity.js","path":"lib/velocity/velocity.js","modified":1,"renderable":1},{"_id":"source/pic/map/1.png","path":"pic/map/1.png","modified":1,"renderable":0},{"_id":"themes/hexo-theme-next/source/lib/Han/dist/font/han-space.otf","path":"lib/Han/dist/font/han-space.otf","modified":1,"renderable":1},{"_id":"themes/hexo-theme-next/source/lib/Han/dist/font/han-space.woff","path":"lib/Han/dist/font/han-space.woff","modified":1,"renderable":1},{"_id":"themes/hexo-theme-next/source/lib/Han/dist/font/han.otf","path":"lib/Han/dist/font/han.otf","modified":1,"renderable":1},{"_id":"themes/hexo-theme-next/source/lib/Han/dist/font/han.woff","path":"lib/Han/dist/font/han.woff","modified":1,"renderable":1},{"_id":"themes/hexo-theme-next/source/lib/Han/dist/font/han.woff2","path":"lib/Han/dist/font/han.woff2","modified":1,"renderable":1},{"_id":"themes/hexo-theme-next/source/lib/fancybox/source/helpers/fancybox_buttons.png","path":"lib/fancybox/source/helpers/fancybox_buttons.png","modified":1,"renderable":1},{"_id":"themes/hexo-theme-next/source/lib/fancybox/source/helpers/jquery.fancybox-buttons.css","path":"lib/fancybox/source/helpers/jquery.fancybox-buttons.css","modified":1,"renderable":1},{"_id":"themes/hexo-theme-next/source/lib/fancybox/source/helpers/jquery.fancybox-media.js","path":"lib/fancybox/source/helpers/jquery.fancybox-media.js","modified":1,"renderable":1},{"_id":"themes/hexo-theme-next/source/lib/fancybox/source/helpers/jquery.fancybox-buttons.js","path":"lib/fancybox/source/helpers/jquery.fancybox-buttons.js","modified":1,"renderable":1},{"_id":"themes/hexo-theme-next/source/lib/fancybox/source/helpers/jquery.fancybox-thumbs.css","path":"lib/fancybox/source/helpers/jquery.fancybox-thumbs.css","modified":1,"renderable":1},{"_id":"themes/hexo-theme-next/source/lib/fancybox/source/helpers/jquery.fancybox-thumbs.js","path":"lib/fancybox/source/helpers/jquery.fancybox-thumbs.js","modified":1,"renderable":1},{"_id":"themes/hexo-theme-next/source/lib/font-awesome/fonts/FontAwesome.otf","path":"lib/font-awesome/fonts/FontAwesome.otf","modified":1,"renderable":1},{"_id":"themes/hexo-theme-next/source/lib/font-awesome/fonts/fontawesome-webfont.eot","path":"lib/font-awesome/fonts/fontawesome-webfont.eot","modified":1,"renderable":1},{"_id":"themes/hexo-theme-next/source/lib/algolia-instant-search/instantsearch.min.js","path":"lib/algolia-instant-search/instantsearch.min.js","modified":1,"renderable":1},{"_id":"themes/hexo-theme-next/source/lib/font-awesome/fonts/fontawesome-webfont.ttf","path":"lib/font-awesome/fonts/fontawesome-webfont.ttf","modified":1,"renderable":1},{"_id":"source/pic/map/4.png","path":"pic/map/4.png","modified":1,"renderable":0},{"_id":"themes/hexo-theme-next/source/lib/font-awesome/fonts/fontawesome-webfont.svg","path":"lib/font-awesome/fonts/fontawesome-webfont.svg","modified":1,"renderable":1},{"_id":"themes/hexo-theme-next/source/lib/three/three.min.js","path":"lib/three/three.min.js","modified":1,"renderable":1},{"_id":"source/pic/map/5.png","path":"pic/map/5.png","modified":1,"renderable":0}],"Cache":[{"_id":"source/CNAME","hash":"a1db025eecdb749c338d63e0712f58361c7e784d","modified":1551330984061},{"_id":"themes/hexo-theme-next/.bowerrc","hash":"334da94ca6f024d60d012cc26ea655681e724ad8","modified":1538677850000},{"_id":"themes/hexo-theme-next/.editorconfig","hash":"211d2c92bfdddb3e81ea946f4ca7a539f150f4da","modified":1538677850000},{"_id":"themes/hexo-theme-next/.hound.yml","hash":"289dcf5bfe92dbd680d54d6e0668f41c9c9c0c78","modified":1538677850000},{"_id":"themes/hexo-theme-next/.javascript_ignore","hash":"cd250ad74ca22bd2c054476456a73d9687f05f87","modified":1538677850000},{"_id":"themes/hexo-theme-next/.jshintrc","hash":"b7d23f2ce8d99fa073f22f9960605f318acd7710","modified":1538677850000},{"_id":"themes/hexo-theme-next/.stylintrc","hash":"3b7f9785e9ad0dab764e1c535b40df02f4ff5fd6","modified":1538677850000},{"_id":"themes/hexo-theme-next/.travis.yml","hash":"6674fbdfe0d0c03b8a04527ffb8ab66a94253acd","modified":1538677850000},{"_id":"themes/hexo-theme-next/LICENSE","hash":"ec44503d7e617144909e54533754f0147845f0c5","modified":1538677850000},{"_id":"themes/hexo-theme-next/README.md","hash":"50abff86ffe4113051a409c1ed9261195d2aead0","modified":1538677850000},{"_id":"themes/hexo-theme-next/README.cn.md","hash":"23e92a2599725db2f8dbd524fbef2087c6d11c7b","modified":1538677850000},{"_id":"themes/hexo-theme-next/_config.yml","hash":"6bd98e237e89c7070fd4d352a874db9f26a6c4b1","modified":1540270556000},{"_id":"themes/hexo-theme-next/gulpfile.coffee","hash":"412defab3d93d404b7c26aaa0279e2e586e97454","modified":1538677850000},{"_id":"themes/hexo-theme-next/bower.json","hash":"486ebd72068848c97def75f36b71cbec9bb359c5","modified":1538677850000},{"_id":"themes/hexo-theme-next/package.json","hash":"3963ad558a24c78a3fd4ef23cf5f73f421854627","modified":1538677850000},{"_id":"source/404/index.md","hash":"bd718ab2468e7d781f49973568e9d3b999a5670c","modified":1545927675950},{"_id":"source/_posts/domjudge配置流程.md","hash":"1436865f0bcc749779b4562043b38711d64f9292","modified":1546529285468},{"_id":"source/_posts/dp常见思路.md","hash":"b6988f33f768159b8e12032a30e296812d89a0fd","modified":1538848641466},{"_id":"source/_posts/dp常见模板.md","hash":"ebcd895dbeee9650fa881119a3511283496ee0fe","modified":1538848668650},{"_id":"source/_posts/hexo博客如何配置到服务器上.md","hash":"1fb7232b143780f40b6fd94066648be9e67012ae","modified":1552658108114},{"_id":"source/_posts/java学习笔记.md","hash":"e92d48ce10f784ff847ff1331a2e3130b6de99c2","modified":1552745452099},{"_id":"source/_posts/java设计模式.md","hash":"fce8d7bd1165dddde836eef3c5fb33839a13b732","modified":1553696382284},{"_id":"source/_posts/博弈.md","hash":"52416fe16ae902e5f94c3e96df6439c3e703862c","modified":1540270451975},{"_id":"source/_posts/地图.md","hash":"9a2dbcc06f3b5dad89e26aaad75ae455adc563d1","modified":1551330764485},{"_id":"source/_posts/把自己的电脑配成服务器.md","hash":"5801673d79eb5bb7d170281a9b8d3c4ff0415a6f","modified":1546337830410},{"_id":"source/_posts/期望dp.md","hash":"be0c98c8b76b15bd7bda7f9ea8a2fc17a9013967","modified":1539574037588},{"_id":"source/_posts/期望概率常见题.md","hash":"52fc53b39aca8440578eabc6a808cc6b8edd25e2","modified":1543645569836},{"_id":"source/_posts/莫比乌斯思路.md","hash":"2f3de1c80b5990cbcdea608f0a3221871336c8c6","modified":1538812286229},{"_id":"source/_posts/面试常见问题-计算机网络.md","hash":"66ac1183f9c83dd3e6bf74591169078068e7c72d","modified":1553176383032},{"_id":"source/about/index.md","hash":"de2496ba4e3eb57276862e90f326dc233b431c4e","modified":1543645569838},{"_id":"source/links/index.md","hash":"3402de09163a5a62dea1ea85a5c6e936cba5cc98","modified":1543645729120},{"_id":"source/tags/index.md","hash":"56bb7ff1c263a27e968955e61e341447eada2f8a","modified":1538812082171},{"_id":"themes/hexo-theme-next/languages/de.yml","hash":"fd02d9c2035798d5dc7c1a96b4c3e24b05b31a47","modified":1538677850000},{"_id":"themes/hexo-theme-next/languages/default.yml","hash":"b3bcd8934327448a43d9bfada5dd11b1b8c1402e","modified":1538677850000},{"_id":"themes/hexo-theme-next/languages/en.yml","hash":"2f4b4776ca1a08cc266a19afb0d1350a3926f42c","modified":1538677850000},{"_id":"themes/hexo-theme-next/languages/fr-FR.yml","hash":"efeeb55d5c4add54ad59a612fc0630ee1300388c","modified":1538677850000},{"_id":"themes/hexo-theme-next/languages/id.yml","hash":"dccae33e2a5b3c9f11c0e05ec4a7201af1b25745","modified":1538677850000},{"_id":"themes/hexo-theme-next/languages/it.yml","hash":"a215d016146b1bd92cef046042081cbe0c7f976f","modified":1538677850000},{"_id":"themes/hexo-theme-next/languages/ko.yml","hash":"dc8f3e8c64eb7c4bb2385025b3006b8efec8b31d","modified":1538677850000},{"_id":"themes/hexo-theme-next/languages/ja.yml","hash":"37f954e47a3bc669620ca559e3edb3b0072a4be5","modified":1538677850000},{"_id":"themes/hexo-theme-next/languages/nl-NL.yml","hash":"213e7a002b82fb265f69dabafbbc382cfd460030","modified":1538677850000},{"_id":"themes/hexo-theme-next/languages/pt-BR.yml","hash":"568d494a1f37726a5375b11452a45c71c3e2852d","modified":1538677850000},{"_id":"themes/hexo-theme-next/languages/pt.yml","hash":"2efcd240c66ab1a122f061505ca0fb1e8819877b","modified":1538677850000},{"_id":"themes/hexo-theme-next/languages/ru.yml","hash":"e33ee44e80f82e329900fc41eb0bb6823397a4d6","modified":1538677850000},{"_id":"themes/hexo-theme-next/languages/vi.yml","hash":"a9b89ebd3e5933033d1386c7c56b66c44aca299a","modified":1538677850000},{"_id":"source/_posts/面试常见问题-数据结构.md","hash":"4c867d90a3f23db03f807526faf3c80cbdd89d9d","modified":1553696667768},{"_id":"themes/hexo-theme-next/languages/zh-Hans.yml","hash":"66b9b42f143c3cb2f782a94abd4c4cbd5fd7f55f","modified":1538677850000},{"_id":"themes/hexo-theme-next/languages/zh-hk.yml","hash":"fe0d45807d015082049f05b54714988c244888da","modified":1538677850000},{"_id":"themes/hexo-theme-next/languages/zh-tw.yml","hash":"432463b481e105073accda16c3e590e54c8e7b74","modified":1538677850000},{"_id":"themes/hexo-theme-next/layout/_layout.swig","hash":"2164570bb05db11ee4bcfbbb5d183a759afe9d07","modified":1538677850000},{"_id":"themes/hexo-theme-next/layout/archive.swig","hash":"9a2c14874a75c7085d2bada5e39201d3fc4fd2b4","modified":1538677850000},{"_id":"themes/hexo-theme-next/layout/category.swig","hash":"3cbb3f72429647411f9e85f2544bdf0e3ad2e6b2","modified":1538677850000},{"_id":"themes/hexo-theme-next/layout/index.swig","hash":"555a357ecf17128db4e29346c92bb6298e66547a","modified":1538677850000},{"_id":"themes/hexo-theme-next/layout/page.swig","hash":"e8fcaa641d46930237675d2ad4b56964d9e262e9","modified":1538677850000},{"_id":"themes/hexo-theme-next/layout/post.swig","hash":"7a6ce102ca82c3a80f776e555dddae1a9981e1ed","modified":1538677850000},{"_id":"themes/hexo-theme-next/layout/schedule.swig","hash":"87ad6055df01fa2e63e51887d34a2d8f0fbd2f5a","modified":1538677850000},{"_id":"themes/hexo-theme-next/layout/tag.swig","hash":"34e1c016cbdf94a31f9c5d494854ff46b2a182e9","modified":1538677850000},{"_id":"themes/hexo-theme-next/scripts/merge-configs.js","hash":"38d86aab4fc12fb741ae52099be475196b9db972","modified":1538677850000},{"_id":"themes/hexo-theme-next/scripts/merge.js","hash":"39b84b937b2a9608b94e5872349a47200e1800ff","modified":1538677850000},{"_id":"themes/hexo-theme-next/test/.jshintrc","hash":"c9fca43ae0d99718e45a6f5ce736a18ba5fc8fb6","modified":1538677850000},{"_id":"themes/hexo-theme-next/test/helpers.js","hash":"f25e7f3265eb5a6e1ccbb5e5012fa9bebf134105","modified":1538677850000},{"_id":"themes/hexo-theme-next/test/intern.js","hash":"db90b1063356727d72be0d77054fdc32fa882a66","modified":1538677850000},{"_id":"themes/hexo-theme-next/source/fonts/.gitkeep","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1538677850000},{"_id":"themes/hexo-theme-next/layout/_custom/header.swig","hash":"ba8ab5a0280b953aa97435ff8946cbcbb2755a27","modified":1538677850000},{"_id":"themes/hexo-theme-next/layout/_custom/sidebar.swig","hash":"ba8ab5a0280b953aa97435ff8946cbcbb2755a27","modified":1538677850000},{"_id":"themes/hexo-theme-next/layout/_macro/post-collapse.swig","hash":"8c56dd26157cbc580ae41d97ac34b90ab48ced3f","modified":1538677850000},{"_id":"themes/hexo-theme-next/layout/_macro/post-copyright.swig","hash":"f83befdc740beb8dc88805efd7fbb0fef9ed19be","modified":1538677850000},{"_id":"themes/hexo-theme-next/layout/_macro/post.swig","hash":"4ba938822d56c597490f0731893eaa2443942e0f","modified":1538677850000},{"_id":"themes/hexo-theme-next/layout/_macro/reward.swig","hash":"357d86ec9586705bfbb2c40a8c7d247a407db21a","modified":1538677850000},{"_id":"themes/hexo-theme-next/layout/_macro/wechat-subscriber.swig","hash":"e2e4eae391476da994045ed4c7faf5e05aca2cd7","modified":1538677850000},{"_id":"themes/hexo-theme-next/layout/_macro/sidebar.swig","hash":"9c7343fd470e0943ebd75f227a083a980816290b","modified":1538677850000},{"_id":"themes/hexo-theme-next/layout/_partials/comments.swig","hash":"4adc65a602d1276615da3b887dcbf2ac68e7382b","modified":1538677850000},{"_id":"themes/hexo-theme-next/layout/_partials/footer.swig","hash":"26e93336dc57a39590ba8dc80564a1d2ad5ff93b","modified":1538677850000},{"_id":"themes/hexo-theme-next/layout/_partials/head.swig","hash":"f14a39dad1ddd98e6d3ceb25dda092ba80d391b5","modified":1538677850000},{"_id":"themes/hexo-theme-next/layout/_partials/header.swig","hash":"c54b32263bc8d75918688fb21f795103b3f57f03","modified":1538677850000},{"_id":"themes/hexo-theme-next/layout/_partials/page-header.swig","hash":"77c61e0baea3544df361b7338c3cd13dc84dde22","modified":1538677850000},{"_id":"themes/hexo-theme-next/layout/_partials/pagination.swig","hash":"1634fb887842698e01ff6e632597fe03c75d2d01","modified":1538677850000},{"_id":"themes/hexo-theme-next/layout/_partials/search.swig","hash":"b4ebe4a52a3b51efe549dd1cdee846103664f5eb","modified":1538677850000},{"_id":"themes/hexo-theme-next/layout/_scripts/boostrap.swig","hash":"c0f5a0955f69ca4ed9ee64a2d5f8aa75064935ad","modified":1538677850000},{"_id":"themes/hexo-theme-next/layout/_scripts/commons.swig","hash":"931808ad9b8d8390c0dcf9bdeb0954eeb9185d68","modified":1538677850000},{"_id":"themes/hexo-theme-next/layout/_scripts/vendors.swig","hash":"9be624634703be496a5d2535228bc568a8373af9","modified":1538677850000},{"_id":"themes/hexo-theme-next/layout/_third-party/duoshuo-hot-articles.swig","hash":"ba75672183d94f1de7c8bd0eeee497a58c70e889","modified":1538677850000},{"_id":"themes/hexo-theme-next/layout/_third-party/exturl.swig","hash":"8301c9600bb3e47f7fb98b0e0332ef3c51bb1688","modified":1538677850000},{"_id":"themes/hexo-theme-next/layout/_third-party/mathjax.swig","hash":"a0bd3388587fd943baae0d84ca779a707fbcad89","modified":1538677850000},{"_id":"themes/hexo-theme-next/layout/_third-party/needsharebutton.swig","hash":"fa882641da3bd83d9a58a8a97f9d4c62a9ee7b5c","modified":1538677850000},{"_id":"themes/hexo-theme-next/layout/_third-party/rating.swig","hash":"554ec568e9d2c71e4a624a8de3cb5929050811d6","modified":1538677850000},{"_id":"themes/hexo-theme-next/layout/_third-party/schedule.swig","hash":"db15d7e1552aa2d2386a6b8a33b3b3a40bf9e43d","modified":1538677850000},{"_id":"themes/hexo-theme-next/layout/_third-party/scroll-cookie.swig","hash":"9a188938d46931d5f3882a140aa1c48b3a893f0c","modified":1538677850000},{"_id":"themes/hexo-theme-next/scripts/tags/button.js","hash":"eddbb612c15ac27faf11c59c019ce188f33dec2c","modified":1538677850000},{"_id":"themes/hexo-theme-next/scripts/tags/center-quote.js","hash":"99b66949f18398689b904907af23c013be1b978f","modified":1538677850000},{"_id":"themes/hexo-theme-next/scripts/tags/exturl.js","hash":"5022c0ba9f1d13192677cf1fd66005c57c3d0f53","modified":1538677850000},{"_id":"themes/hexo-theme-next/scripts/tags/full-image.js","hash":"c9f833158c66bd72f627a0559cf96550e867aa72","modified":1538677850000},{"_id":"themes/hexo-theme-next/scripts/tags/group-pictures.js","hash":"ac681b0d0d8d39ba3817336c0270c6787c2b6b70","modified":1538677850000},{"_id":"themes/hexo-theme-next/scripts/tags/label.js","hash":"6f00952d70aadece844ce7fd27adc52816cc7374","modified":1538677850000},{"_id":"themes/hexo-theme-next/scripts/tags/lazy-image.js","hash":"bcba2ff25cd7850ce6da322d8bd85a8dd00b5ceb","modified":1538677850000},{"_id":"themes/hexo-theme-next/scripts/tags/tabs.js","hash":"aa7fc94a5ec27737458d9fe1a75c0db7593352fd","modified":1538677850000},{"_id":"themes/hexo-theme-next/scripts/tags/note.js","hash":"f7eae135f35cdab23728e9d0d88b76e00715faa0","modified":1538677850000},{"_id":"themes/hexo-theme-next/source/css/main.styl","hash":"a91dbb7ef799f0a171b5e726c801139efe545176","modified":1538677850000},{"_id":"themes/hexo-theme-next/source/images/algolia_logo.svg","hash":"45eeea0b5fba833e21e38ea10ed5ab385ceb4f01","modified":1538677850000},{"_id":"themes/hexo-theme-next/source/images/avatar.gif","hash":"264082bb3a1af70d5499c7d22b0902cb454b6d12","modified":1538677850000},{"_id":"themes/hexo-theme-next/source/images/cc-by-nc-nd.svg","hash":"bc3588c9b2d7c68830524783120ff6cf957cf668","modified":1538677850000},{"_id":"themes/hexo-theme-next/source/images/cc-by-nc-sa.svg","hash":"6f55543d1fb9cbc436c101d24f802dec7b41efc3","modified":1538677850000},{"_id":"themes/hexo-theme-next/source/images/cc-by-nc.svg","hash":"6f076713fb9bf934aa2c1046bdf2cf2e37bc1eab","modified":1538677850000},{"_id":"themes/hexo-theme-next/source/images/cc-by-nd.svg","hash":"42cd73da328077ccc92f859bb8f3cf621b3484f8","modified":1538677850000},{"_id":"themes/hexo-theme-next/source/images/cc-by-sa.svg","hash":"70c1535f43e54e5ff35ca81419e77e4c0c301398","modified":1538677850000},{"_id":"themes/hexo-theme-next/source/images/cc-by.svg","hash":"e92a33c32d1dac8ed94849b2b4e6456e887efe70","modified":1538677850000},{"_id":"themes/hexo-theme-next/source/images/cc-zero.svg","hash":"9bfb52b2f63527a7049247bf00d44e6dc1170e7d","modified":1538677850000},{"_id":"themes/hexo-theme-next/source/images/favicon-16x16-next.png","hash":"ebc28c208dadf0721b7c4c2edbb3a3f873b4038b","modified":1538813776000},{"_id":"themes/hexo-theme-next/source/images/favicon-32x32-next.png","hash":"4c8984b896652420f9fcbea0f47ef126d9784711","modified":1538813800000},{"_id":"themes/hexo-theme-next/source/images/favicon.ico","hash":"51fc3d3c1171d198ffebc9e0064c7305071ed997","modified":1538812958000},{"_id":"themes/hexo-theme-next/source/images/loading.gif","hash":"5fbd472222feb8a22cf5b8aa5dc5b8e13af88e2b","modified":1538677850000},{"_id":"themes/hexo-theme-next/source/images/mypic.jpg","hash":"8746ab65acb5a0e5beb2cd8c81e50294da068c2c","modified":1538811602000},{"_id":"themes/hexo-theme-next/source/images/logo.svg","hash":"169f56fd82941591dad3abd734a50ec7259be950","modified":1538677850000},{"_id":"themes/hexo-theme-next/source/images/placeholder.gif","hash":"5fbd472222feb8a22cf5b8aa5dc5b8e13af88e2b","modified":1538677850000},{"_id":"themes/hexo-theme-next/source/images/quote-l.svg","hash":"cd108d6f44351cadf8e6742565217f88818a0458","modified":1538677850000},{"_id":"themes/hexo-theme-next/source/images/quote-r.svg","hash":"2a2a250b32a87c69dcc1b1976c74b747bedbfb41","modified":1538677850000},{"_id":"themes/hexo-theme-next/source/images/searchicon.png","hash":"67727a6a969be0b2659b908518fa6706eed307b8","modified":1538677850000},{"_id":"themes/hexo-theme-next/layout/_scripts/schemes/muse.swig","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1538677850000},{"_id":"themes/hexo-theme-next/layout/_scripts/schemes/mist.swig","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1538677850000},{"_id":"themes/hexo-theme-next/source/css/_mixins/Mist.styl","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1538677850000},{"_id":"themes/hexo-theme-next/source/css/_mixins/Muse.styl","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1538677850000},{"_id":"themes/hexo-theme-next/source/css/_mixins/custom.styl","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1538677850000},{"_id":"themes/hexo-theme-next/source/css/_variables/Muse.styl","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1538677850000},{"_id":"themes/hexo-theme-next/source/css/_variables/custom.styl","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1538677850000},{"_id":"source/pic/map/2.png","hash":"13bc3c6a8e5248bfab8d89052e12bd1869d94b14","modified":1550158165251},{"_id":"source/pic/map/3.png","hash":"13bc3c6a8e5248bfab8d89052e12bd1869d94b14","modified":1550158165251},{"_id":"themes/hexo-theme-next/layout/_partials/head/custom-head.swig","hash":"a223919d2e1bf17ca4d6abb2c86f2efca9883dc1","modified":1538677850000},{"_id":"themes/hexo-theme-next/layout/_partials/head/external-fonts.swig","hash":"f5e487b0d213ca0bd94aa30bc23b240d65081627","modified":1538677850000},{"_id":"themes/hexo-theme-next/layout/_partials/search/localsearch.swig","hash":"b2f0d247b213e4cf8de47af6a304d98070cc7256","modified":1538677850000},{"_id":"themes/hexo-theme-next/layout/_partials/search/swiftype.swig","hash":"a8c7f9ca7c605d039a1f3bf4e4d3183700a3dd62","modified":1538677850000},{"_id":"themes/hexo-theme-next/layout/_partials/share/add-this.swig","hash":"9e3d133ac5bcc6cb51702c83b2611a49811abad1","modified":1538677850000},{"_id":"themes/hexo-theme-next/layout/_partials/share/baidushare.swig","hash":"d9e2d9282f9be6e04eae105964abb81e512bffed","modified":1538677850000},{"_id":"themes/hexo-theme-next/layout/_partials/share/duoshuo_share.swig","hash":"d4fbffd7fa8f2090eb32a871872665d90a885fac","modified":1538677850000},{"_id":"themes/hexo-theme-next/layout/_partials/search/tinysou.swig","hash":"b25002a83cbd2ca0c4a5df87ad5bff26477c0457","modified":1538677850000},{"_id":"themes/hexo-theme-next/layout/_partials/share/jiathis.swig","hash":"0a9cdd6958395fcdffc80ab60f0c6301b63664a5","modified":1538677850000},{"_id":"themes/hexo-theme-next/layout/_scripts/pages/post-details.swig","hash":"9b84ab576982b2c3bb0291da49143bc77fba3cc6","modified":1538677850000},{"_id":"themes/hexo-theme-next/layout/_scripts/schemes/gemini.swig","hash":"a9a3995b9615adfb8d6b127c78c6771627bee19a","modified":1538677850000},{"_id":"themes/hexo-theme-next/layout/_scripts/schemes/pisces.swig","hash":"a9a3995b9615adfb8d6b127c78c6771627bee19a","modified":1538677850000},{"_id":"themes/hexo-theme-next/layout/_third-party/analytics/analytics-with-widget.swig","hash":"ff947f3561b229bc528cb1837d4ca19612219411","modified":1538677850000},{"_id":"themes/hexo-theme-next/layout/_third-party/analytics/application-insights.swig","hash":"71397a5823e8ec8aad3b68aace13150623b3e19d","modified":1538677850000},{"_id":"themes/hexo-theme-next/layout/_third-party/analytics/baidu-analytics.swig","hash":"753d262911c27baf663fcaf199267133528656af","modified":1538677850000},{"_id":"themes/hexo-theme-next/layout/_third-party/analytics/busuanzi-counter.swig","hash":"7b11eac3a0685fa1ab2ab6ecff60afc4f15f0d16","modified":1538677850000},{"_id":"themes/hexo-theme-next/layout/_third-party/analytics/cnzz-analytics.swig","hash":"a10b7f19d7b5725527514622899df413a34a89db","modified":1538677850000},{"_id":"themes/hexo-theme-next/layout/_third-party/analytics/facebook-sdk.swig","hash":"7d94845f96197d9d84a405fa5d4ede75fb81b225","modified":1538677850000},{"_id":"themes/hexo-theme-next/layout/_third-party/analytics/firestore.swig","hash":"ccc443b22bd4f8c7ac4145664686c756395b90e0","modified":1538677850000},{"_id":"themes/hexo-theme-next/layout/_third-party/analytics/google-analytics.swig","hash":"b1e13df83fb2b1d5d513b30b7aa6158b0837daab","modified":1538677850000},{"_id":"themes/hexo-theme-next/layout/_third-party/analytics/index.swig","hash":"45f3f629c2aacc381095750e1c8649041a71a84b","modified":1538677850000},{"_id":"themes/hexo-theme-next/layout/_third-party/analytics/lean-analytics.swig","hash":"e6d10ee4fb70b3ae1cd37e9e36e000306734aa2e","modified":1538677850000},{"_id":"themes/hexo-theme-next/layout/_third-party/analytics/tencent-mta.swig","hash":"5a8027328f060f965b3014060bebec1d7cf149c1","modified":1538677850000},{"_id":"themes/hexo-theme-next/layout/_third-party/analytics/vkontakte-api.swig","hash":"f9a1647a8f1866deeb94052d1f87a5df99cb1e70","modified":1538677850000},{"_id":"themes/hexo-theme-next/layout/_third-party/comments/changyan.swig","hash":"4c501ea0b9c494181eb3c607c5526a5754e7fbd8","modified":1538677850000},{"_id":"themes/hexo-theme-next/layout/_third-party/comments/disqus.swig","hash":"b83a51bbe0f1e2ded9819070840b0ea145f003a6","modified":1538677850000},{"_id":"themes/hexo-theme-next/layout/_third-party/comments/duoshuo.swig","hash":"1600f340e0225361580c44890568dc07dbcf2c89","modified":1538677850000},{"_id":"themes/hexo-theme-next/layout/_third-party/comments/gitment.swig","hash":"4dcc3213c033994d342d02b800b6229295433d30","modified":1538677850000},{"_id":"themes/hexo-theme-next/layout/_third-party/comments/hypercomments.swig","hash":"af7f3e43cbdc4f88c13f101f0f341af96ace3383","modified":1538677850000},{"_id":"themes/hexo-theme-next/layout/_third-party/analytics/tencent-analytics.swig","hash":"8a399df90dadba5ad4e781445b58f4765aeb701e","modified":1538677850000},{"_id":"themes/hexo-theme-next/layout/_third-party/comments/index.swig","hash":"493bd5999a1061b981922be92d8277a0f9152447","modified":1538677850000},{"_id":"themes/hexo-theme-next/layout/_third-party/comments/livere.swig","hash":"9246162d4bc7e949ce1d12d135cbbaf5dc3024ec","modified":1538677850000},{"_id":"themes/hexo-theme-next/layout/_third-party/comments/valine.swig","hash":"4050553d44ba1396174161c9a6bb0f89fa779eca","modified":1538677850000},{"_id":"themes/hexo-theme-next/layout/_third-party/comments/youyan.swig","hash":"7e65ff8fe586cd655b0e9d1ad2912663ff9bd36c","modified":1538677850000},{"_id":"themes/hexo-theme-next/layout/_third-party/search/index.swig","hash":"34599633658f3b0ffb487728b7766e1c7b551f5a","modified":1538677850000},{"_id":"themes/hexo-theme-next/layout/_third-party/search/localsearch.swig","hash":"93479642fd076a1257fecc25fcf5d20ccdefe509","modified":1538677850000},{"_id":"themes/hexo-theme-next/layout/_third-party/search/tinysou.swig","hash":"fe95dd3d166634c466e19aa756e65ad6e8254d3e","modified":1538677850000},{"_id":"themes/hexo-theme-next/layout/_third-party/seo/baidu-push.swig","hash":"d8c98938719284fa06492c114d99a1904652a555","modified":1538677850000},{"_id":"themes/hexo-theme-next/source/css/_custom/custom.styl","hash":"3403fdd8efde1a0afd11ae8a5a97673f5903087f","modified":1538677850000},{"_id":"themes/hexo-theme-next/source/css/_mixins/Gemini.styl","hash":"07f7da320689f828f6e36a6123807964a45157a0","modified":1538677850000},{"_id":"themes/hexo-theme-next/source/css/_mixins/Pisces.styl","hash":"7896c3ee107e1a8b9108b6019f1c070600a1e8cc","modified":1538677850000},{"_id":"themes/hexo-theme-next/source/css/_mixins/base.styl","hash":"0e55cbd93852dc3f8ccb44df74d35d9918f847e0","modified":1538677850000},{"_id":"themes/hexo-theme-next/source/css/_variables/Gemini.styl","hash":"58e7dd5947817d9fc30770712fc39b2f52230d1e","modified":1538677850000},{"_id":"themes/hexo-theme-next/source/css/_variables/Mist.styl","hash":"a25408534f8fe6e321db4bbf9dd03335d648fe17","modified":1538677850000},{"_id":"themes/hexo-theme-next/source/css/_variables/Pisces.styl","hash":"4069f918ccc312da86db6c51205fc6c6eaabb116","modified":1538677850000},{"_id":"themes/hexo-theme-next/source/css/_variables/base.styl","hash":"b1f6ea881a4938a54603d68282b0f8efb4d7915d","modified":1538677850000},{"_id":"themes/hexo-theme-next/source/images/apple-touch-icon-next.png","hash":"6b4c5b06673ac9268697d9c26d8ab0a5080f4595","modified":1538813836000},{"_id":"themes/hexo-theme-next/source/lib/algolia-instant-search/instantsearch.min.css","hash":"90ef19edc982645b118b095615838d9c5eaba0de","modified":1538677850000},{"_id":"themes/hexo-theme-next/source/lib/canvas-nest/canvas-nest.min.js","hash":"0387e75e23b1db108a755073fe52a0d03eb391a7","modified":1538677850000},{"_id":"themes/hexo-theme-next/source/lib/canvas-ribbon/canvas-ribbon.js","hash":"b02737510e9b89aeed6b54f89f602a9c24b06ff2","modified":1538677850000},{"_id":"themes/hexo-theme-next/source/lib/fancybox/.bower.json","hash":"9be892a4e14e0da18ff9cb962c9ef71f163b1b22","modified":1538677850000},{"_id":"themes/hexo-theme-next/source/lib/fancybox/.gitattributes","hash":"672d3b5767e0eacd83bb41b188c913f2cf754793","modified":1538677850000},{"_id":"themes/hexo-theme-next/source/lib/fastclick/.bower.json","hash":"bf3eef9d647cd7c9b62feda3bc708c6cdd7c0877","modified":1538677850000},{"_id":"themes/hexo-theme-next/source/lib/fastclick/LICENSE","hash":"6f474ea75c42442da7bbcf2e9143ce98258efd8d","modified":1538677850000},{"_id":"themes/hexo-theme-next/source/lib/fastclick/README.md","hash":"68a9b9d53126405b0fa5f3324f1fb96dbcc547aa","modified":1538677850000},{"_id":"themes/hexo-theme-next/source/lib/fastclick/bower.json","hash":"a9b3ee1e4db71a0e4ea6d5bed292d176dd68b261","modified":1538677850000},{"_id":"themes/hexo-theme-next/source/lib/font-awesome/.bower.json","hash":"b4aefc910578d76b267e86dfffdd5121c8db9aec","modified":1538677850000},{"_id":"themes/hexo-theme-next/source/lib/font-awesome/.gitignore","hash":"03ddbf76c1dd1afb93eed0b670d2eee747472ef1","modified":1538677850000},{"_id":"themes/hexo-theme-next/source/lib/font-awesome/.npmignore","hash":"c31ff06a740955e44edd4403902e653ccabfd4db","modified":1538677850000},{"_id":"themes/hexo-theme-next/source/lib/font-awesome/HELP-US-OUT.txt","hash":"ee33b2798b1e714b904d663436c6b3521011d1fa","modified":1538677850000},{"_id":"themes/hexo-theme-next/source/lib/font-awesome/bower.json","hash":"71e7183634dc1b9449f590f15ebd7201add22ca7","modified":1538677850000},{"_id":"themes/hexo-theme-next/source/lib/jquery/.bower.json","hash":"865d6c1328ab209a4376b9d2b7a7824369565f28","modified":1538677850000},{"_id":"themes/hexo-theme-next/source/lib/jquery_lazyload/.bower.json","hash":"90fa628f156d8045357ff11eaf32e61abacf10e8","modified":1538677850000},{"_id":"themes/hexo-theme-next/source/lib/jquery_lazyload/README.md","hash":"b930297cb98b8e1dbd5abe9bc1ed9d5935d18ce8","modified":1538677850000},{"_id":"themes/hexo-theme-next/source/lib/jquery_lazyload/CONTRIBUTING.md","hash":"4ded6fee668544778e97e38c2b211fc56c848e77","modified":1538677850000},{"_id":"themes/hexo-theme-next/source/lib/jquery_lazyload/bower.json","hash":"e0acf1db27b0cc16128a59c46db1db406b5c4c58","modified":1538677850000},{"_id":"themes/hexo-theme-next/source/lib/jquery_lazyload/jquery.lazyload.js","hash":"f4a570908f6c89c6edfb1c74959e733eaadea4f2","modified":1538677850000},{"_id":"themes/hexo-theme-next/source/lib/jquery_lazyload/jquery.scrollstop.js","hash":"bf773ad48a0b9aa77681a89d7569eefc0f7b7b18","modified":1538677850000},{"_id":"themes/hexo-theme-next/source/lib/needsharebutton/font-embedded.css","hash":"14264a210bf94232d58d7599ea2ba93bfa4fb458","modified":1538677850000},{"_id":"themes/hexo-theme-next/source/lib/needsharebutton/needsharebutton.css","hash":"e33aa8fa48b6639d8d8b937d13261597dd473b3a","modified":1538677850000},{"_id":"themes/hexo-theme-next/source/lib/needsharebutton/needsharebutton.js","hash":"2ce5f3bf15c523b9bfc97720d8884bb22602a454","modified":1538677850000},{"_id":"themes/hexo-theme-next/source/lib/pace/pace-theme-barber-shop.min.css","hash":"ee0d51446cb4ffe1bb96bd7bc8c8e046dddfcf46","modified":1538677850000},{"_id":"themes/hexo-theme-next/source/lib/pace/pace-theme-bounce.min.css","hash":"f6bdb9a785b7979dd8ec5c60e278af955ef1e585","modified":1538677850000},{"_id":"themes/hexo-theme-next/source/lib/pace/pace-theme-big-counter.min.css","hash":"5b561dc328af4c4d512e20a76fe964d113a32ba8","modified":1538677850000},{"_id":"themes/hexo-theme-next/source/lib/pace/pace-theme-center-circle.min.css","hash":"a4066769c78affbfbc5e30a600e2c7862cd532e0","modified":1538677850000},{"_id":"themes/hexo-theme-next/source/lib/pace/pace-theme-center-atom.min.css","hash":"dcf79c24fe5350fb73d8038573a104e73639e9d3","modified":1538677850000},{"_id":"themes/hexo-theme-next/source/lib/pace/pace-theme-center-radar.min.css","hash":"ab7cba998bf4c03b13df342bf43647fa4f419783","modified":1538677850000},{"_id":"themes/hexo-theme-next/source/lib/pace/pace-theme-center-simple.min.css","hash":"67f44c947548bd4d77e7590d3f59e236cbf9e98a","modified":1538677850000},{"_id":"themes/hexo-theme-next/source/lib/pace/pace-theme-corner-indicator.min.css","hash":"b3c64c973f31884e3d8145989476707333406b9a","modified":1538677850000},{"_id":"themes/hexo-theme-next/source/lib/pace/pace-theme-fill-left.min.css","hash":"0bec1e235a4a2cccda3f993b205424e1441a44ae","modified":1538677850000},{"_id":"themes/hexo-theme-next/source/lib/pace/pace-theme-flash.min.css","hash":"13ace22c40312d7bbd8d9c1e50eff897a7a497d8","modified":1538677850000},{"_id":"themes/hexo-theme-next/source/lib/pace/pace-theme-loading-bar.min.css","hash":"7ee28875dfc1230d76c537f6605766e8d4011e9f","modified":1538677850000},{"_id":"themes/hexo-theme-next/source/lib/pace/pace-theme-mac-osx.min.css","hash":"9f2e7b51b084da407863826b25265b31150b3821","modified":1538677850000},{"_id":"themes/hexo-theme-next/source/lib/pace/pace-theme-minimal.min.css","hash":"9cd783cceb8a191f3c8b5d81f7a430ecc3e489d3","modified":1538677850000},{"_id":"themes/hexo-theme-next/source/lib/pace/pace.min.js","hash":"8aaa675f577d5501f5f22d5ccb07c2b76310b690","modified":1538677850000},{"_id":"themes/hexo-theme-next/source/lib/three/canvas_lines.min.js","hash":"2d9a9f38c493fdf7c0b833bb9184b6a1645c11b2","modified":1538677850000},{"_id":"themes/hexo-theme-next/source/lib/three/canvas_sphere.min.js","hash":"46a50b91c98b639c9a2b9265c5a1e66a5c656881","modified":1538677850000},{"_id":"themes/hexo-theme-next/source/lib/three/three-waves.min.js","hash":"8148492dd49aa876d32bb7d5b728d3f5bf6f5074","modified":1538677850000},{"_id":"themes/hexo-theme-next/source/lib/velocity/.bower.json","hash":"63da5e80ebb61bb66a2794d5936315ca44231f0c","modified":1538677850000},{"_id":"themes/hexo-theme-next/source/lib/velocity/bower.json","hash":"92d92860418c4216aa59eb4cb4a556290a7ad9c3","modified":1538677850000},{"_id":"themes/hexo-theme-next/source/lib/velocity/velocity.min.js","hash":"bf172816a9c57f9040e3d19c24e181a142daf92b","modified":1538677850000},{"_id":"themes/hexo-theme-next/source/lib/velocity/velocity.ui.js","hash":"dbbfb50f6502f6b81dcc9fee7b31f1e812da3464","modified":1538677850000},{"_id":"themes/hexo-theme-next/source/lib/velocity/velocity.ui.min.js","hash":"dde584994ac13dc601836e86f4cf490e418d9723","modified":1538677850000},{"_id":"themes/hexo-theme-next/source/js/src/affix.js","hash":"1b509c3b5b290a6f4607f0f06461a0c33acb69b1","modified":1538677850000},{"_id":"themes/hexo-theme-next/source/js/src/algolia-search.js","hash":"cb431b54ba9c692165a1f5a12e4c564a560f8058","modified":1538677850000},{"_id":"themes/hexo-theme-next/source/js/src/bootstrap.js","hash":"0289031200c3d4c2bdd801ee10fff13bb2c353e4","modified":1538677850000},{"_id":"themes/hexo-theme-next/source/js/src/exturl.js","hash":"a2a0f0de07e46211f74942a468f42ee270aa555c","modified":1538677850000},{"_id":"themes/hexo-theme-next/source/js/src/hook-duoshuo.js","hash":"b35a7dc47b634197b93487cea8671a40a9fdffce","modified":1538677850000},{"_id":"themes/hexo-theme-next/source/js/src/js.cookie.js","hash":"1512c751d219577d338ac0780fb2bbd9075d5298","modified":1538677850000},{"_id":"themes/hexo-theme-next/source/js/src/motion.js","hash":"885176ed51d468f662fbf0fc09611f45c7e5a3b1","modified":1538677850000},{"_id":"themes/hexo-theme-next/source/js/src/post-details.js","hash":"93a18271b4123dd8f94f09d1439b47c3c19a8712","modified":1538677850000},{"_id":"themes/hexo-theme-next/source/js/src/scroll-cookie.js","hash":"02cf91514e41200bc9df5d8bdbeb58575ec06074","modified":1538677850000},{"_id":"themes/hexo-theme-next/source/js/src/scrollspy.js","hash":"b7657be25fc52ec67c75ab5481bdcb483573338b","modified":1538677850000},{"_id":"themes/hexo-theme-next/source/js/src/utils.js","hash":"b3e9eca64aba59403334f3fa821f100d98d40337","modified":1538677850000},{"_id":"themes/hexo-theme-next/source/lib/jquery/index.js","hash":"17a740d68a1c330876c198b6a4d9319f379f3af2","modified":1538677850000},{"_id":"themes/hexo-theme-next/layout/_third-party/search/algolia-search/assets.swig","hash":"218cc936ba3518a3591b2c9eda46bc701edf7710","modified":1538677850000},{"_id":"themes/hexo-theme-next/layout/_third-party/search/algolia-search/dom.swig","hash":"2530de0f3125a912756f6c0e9090cd012134a4c5","modified":1538677850000},{"_id":"themes/hexo-theme-next/source/css/_common/components/back-to-top-sidebar.styl","hash":"8f86f694c0749a18ab3ad6f6df75466ca137a4bc","modified":1538677850000},{"_id":"themes/hexo-theme-next/source/css/_common/components/back-to-top.styl","hash":"237d185ac62ec9877e300947fa0109c44fb8db19","modified":1538677850000},{"_id":"themes/hexo-theme-next/source/css/_common/components/buttons.styl","hash":"8b32928686c327151e13d3ab100157f9a03cd59f","modified":1538677850000},{"_id":"themes/hexo-theme-next/source/css/_common/components/comments.styl","hash":"ff4489cd582f518bba6909a301ac1292a38b4e96","modified":1538677850000},{"_id":"themes/hexo-theme-next/source/css/_common/components/components.styl","hash":"7ad4081466b397e2a6204141bb7768b7c01bd93c","modified":1538677850000},{"_id":"themes/hexo-theme-next/source/css/_common/components/pagination.styl","hash":"4f2801fc4cf3f31bf2069f41db8c6ce0e3da9e39","modified":1538677850000},{"_id":"themes/hexo-theme-next/source/css/_common/components/tag-cloud.styl","hash":"6eb4bcc3056bd279d000607e8b4dad50d368ca69","modified":1538677850000},{"_id":"themes/hexo-theme-next/source/css/_common/outline/outline.styl","hash":"12662536c7a07fff548abe94171f34b768dd610f","modified":1538677850000},{"_id":"themes/hexo-theme-next/source/css/_common/scaffolding/base.styl","hash":"24ee4b356ff55fc6e58f26a929fa07750002cf29","modified":1538677850000},{"_id":"themes/hexo-theme-next/source/css/_common/scaffolding/helpers.styl","hash":"1da5c800d025345f212a3bf1be035060f4e5e6ed","modified":1538677850000},{"_id":"themes/hexo-theme-next/source/css/_common/scaffolding/mobile.styl","hash":"91ca75492cd51f2553f4d294ed2f48239fcd55eb","modified":1538677850000},{"_id":"themes/hexo-theme-next/source/css/_common/scaffolding/normalize.styl","hash":"3f40e8a9fe8e7bd5cfc4cf4cbbbcb9539462e973","modified":1538677850000},{"_id":"themes/hexo-theme-next/source/css/_common/scaffolding/scaffolding.styl","hash":"a17e2b871a335f290afb392a08f94fd35f59c715","modified":1538677850000},{"_id":"themes/hexo-theme-next/source/css/_common/scaffolding/tables.styl","hash":"ea9069645696f86c5df64208490876fe150c8cae","modified":1538677850000},{"_id":"themes/hexo-theme-next/source/css/_schemes/Gemini/index.styl","hash":"60fa84aa7731760f05f52dd7d8f79b5f74ac478d","modified":1538677850000},{"_id":"themes/hexo-theme-next/source/css/_schemes/Mist/_base.styl","hash":"25d5e45a355ee2093f3b8b8eeac125ebf3905026","modified":1538677850000},{"_id":"themes/hexo-theme-next/source/css/_schemes/Mist/_header.styl","hash":"d0bfd1bef988c76f7d7dd72d88af6f0908a8b0db","modified":1538677850000},{"_id":"themes/hexo-theme-next/source/css/_schemes/Mist/_logo.styl","hash":"b1025c421406d2c24cc92a02ae28c1915b01e240","modified":1538677850000},{"_id":"themes/hexo-theme-next/source/css/_schemes/Mist/_menu.styl","hash":"26666c1f472bf5f3fb9bc62081cca22b4de15ccb","modified":1538677850000},{"_id":"themes/hexo-theme-next/source/css/_schemes/Mist/_posts-expanded.styl","hash":"9c99034f8e00d47e978b3959f51eb4a9ded0fcc8","modified":1538677850000},{"_id":"themes/hexo-theme-next/source/css/_schemes/Mist/_search.styl","hash":"09c965022c13b84ed8a661fee8ac2a6d550495ae","modified":1538677850000},{"_id":"themes/hexo-theme-next/source/css/_schemes/Mist/index.styl","hash":"9b913b73d31d21f057f97115ffab93cfa578b884","modified":1538677850000},{"_id":"themes/hexo-theme-next/source/css/_schemes/Muse/_layout.styl","hash":"31127dcbf4c7b4ada53ffbf1638b5fe325b7cbc0","modified":1538677850000},{"_id":"themes/hexo-theme-next/source/css/_schemes/Muse/_menu.styl","hash":"e695e58f714129ca292c2e54cd62c251aca7f7fe","modified":1538677850000},{"_id":"themes/hexo-theme-next/source/css/_schemes/Muse/_logo.styl","hash":"748dbfbf9c08e719ddc775958003c64b00d39dab","modified":1538677850000},{"_id":"themes/hexo-theme-next/source/css/_schemes/Muse/_search.styl","hash":"09c965022c13b84ed8a661fee8ac2a6d550495ae","modified":1538677850000},{"_id":"themes/hexo-theme-next/source/css/_schemes/Muse/index.styl","hash":"5dbc0d0c897e46760e5dbee416530d485c747bba","modified":1538677850000},{"_id":"themes/hexo-theme-next/source/css/_schemes/Pisces/_brand.styl","hash":"bce344d3a665b4c55230d2a91eac2ad16d6f32fd","modified":1538677850000},{"_id":"themes/hexo-theme-next/source/css/_schemes/Pisces/_menu.styl","hash":"4642e30010af8b2b037f5b43146b10a934941958","modified":1538677850000},{"_id":"themes/hexo-theme-next/source/css/_schemes/Pisces/_layout.styl","hash":"416988dca389e6e2fdfa51fa7f4ee07eb53f82fb","modified":1538677850000},{"_id":"themes/hexo-theme-next/source/css/_schemes/Pisces/_posts.styl","hash":"1f6e2ce674735269599acc6d77b3ea18d31967fc","modified":1538677850000},{"_id":"themes/hexo-theme-next/source/css/_schemes/Pisces/_sidebar.styl","hash":"ad2dcedf393ed1f3f5afd2508d24969c916d02fc","modified":1538677850000},{"_id":"themes/hexo-theme-next/source/css/_schemes/Pisces/index.styl","hash":"86197902dfd3bededba10ba62b8f9f22e0420bde","modified":1538677850000},{"_id":"themes/hexo-theme-next/source/lib/Han/dist/han.min.css","hash":"6d586bfcfb7ae48f1b12f76eec82d3ad31947501","modified":1538677850000},{"_id":"themes/hexo-theme-next/source/lib/fancybox/source/blank.gif","hash":"2daeaa8b5f19f0bc209d976c02bd6acb51b00b0a","modified":1538677850000},{"_id":"themes/hexo-theme-next/source/lib/fancybox/source/fancybox_loading.gif","hash":"1a755fb2599f3a313cc6cfdb14df043f8c14a99c","modified":1538677850000},{"_id":"themes/hexo-theme-next/source/lib/fancybox/source/fancybox_loading@2x.gif","hash":"273b123496a42ba45c3416adb027cd99745058b0","modified":1538677850000},{"_id":"themes/hexo-theme-next/source/lib/fancybox/source/fancybox_overlay.png","hash":"b3a4ee645ba494f52840ef8412015ba0f465dbe0","modified":1538677850000},{"_id":"themes/hexo-theme-next/source/lib/fancybox/source/fancybox_sprite.png","hash":"17df19f97628e77be09c352bf27425faea248251","modified":1538677850000},{"_id":"themes/hexo-theme-next/source/lib/fancybox/source/fancybox_sprite@2x.png","hash":"30c58913f327e28f466a00f4c1ac8001b560aed8","modified":1538677850000},{"_id":"themes/hexo-theme-next/source/lib/fancybox/source/jquery.fancybox.css","hash":"82f33ad0842aa9c154d029e0dada2497d4eb1d57","modified":1538677850000},{"_id":"themes/hexo-theme-next/source/lib/fancybox/source/jquery.fancybox.pack.js","hash":"ae6318aeb62ad4ce7a7e9a4cdacd93ffb004f0fb","modified":1538677850000},{"_id":"themes/hexo-theme-next/source/lib/fastclick/lib/fastclick.js","hash":"1d6aeda0480d0e4cb6198edf7719d601d4ae2ccc","modified":1538677850000},{"_id":"themes/hexo-theme-next/source/lib/fastclick/lib/fastclick.min.js","hash":"2cae0f5a6c5d6f3cb993015e6863f9483fc4de18","modified":1538677850000},{"_id":"themes/hexo-theme-next/source/lib/font-awesome/css/font-awesome.css","hash":"3655f1fdf1e584c4d8e8d39026093ca306a5a341","modified":1538677850000},{"_id":"themes/hexo-theme-next/source/lib/font-awesome/css/font-awesome.css.map","hash":"1573904b82807abbb32c97a3632c6c6808eaac50","modified":1538677850000},{"_id":"themes/hexo-theme-next/source/lib/font-awesome/css/font-awesome.min.css","hash":"88af80502c44cd52ca81ffe7dc7276b7eccb06cf","modified":1538677850000},{"_id":"themes/hexo-theme-next/source/lib/ua-parser-js/dist/ua-parser.min.js","hash":"41ea797c68dbcff2f6fb3aba1d1043a22e7cc0f6","modified":1538677850000},{"_id":"themes/hexo-theme-next/source/lib/ua-parser-js/dist/ua-parser.pack.js","hash":"a817b6c158cbc5bab3582713de9fe18a18a80552","modified":1538677850000},{"_id":"themes/hexo-theme-next/source/js/src/schemes/pisces.js","hash":"f1d0b5d7af32c423eaa8bb93ab6a0b45655645dc","modified":1538677850000},{"_id":"themes/hexo-theme-next/source/lib/Han/dist/han.css","hash":"6c26cdb36687d4f0a11dabf5290a909c3506be5c","modified":1538677850000},{"_id":"themes/hexo-theme-next/source/lib/Han/dist/han.js","hash":"4ac683b2bc8531c84d98f51b86957be0e6f830f3","modified":1538677850000},{"_id":"themes/hexo-theme-next/source/lib/Han/dist/han.min.js","hash":"16b03db23a52623348f37c04544f2792032c1fb6","modified":1538677850000},{"_id":"themes/hexo-theme-next/source/lib/fancybox/source/jquery.fancybox.js","hash":"d71602cbca33b9ecdb7ab291b7f86a49530f3601","modified":1538677850000},{"_id":"themes/hexo-theme-next/source/lib/font-awesome/fonts/fontawesome-webfont.woff","hash":"28b782240b3e76db824e12c02754a9731a167527","modified":1538677850000},{"_id":"themes/hexo-theme-next/source/lib/font-awesome/fonts/fontawesome-webfont.woff2","hash":"d6f48cba7d076fb6f2fd6ba993a75b9dc1ecbf0c","modified":1538677850000},{"_id":"themes/hexo-theme-next/source/lib/velocity/velocity.js","hash":"4237c6e9d59da349639de20e559e87c2c0218cfd","modified":1538677850000},{"_id":"source/pic/map/1.png","hash":"4542af2f5de9cb56386a1f32f7b2526a2d0e53db","modified":1550157256835},{"_id":"themes/hexo-theme-next/source/css/_common/components/footer/footer.styl","hash":"9f73c4696f0907aa451a855444f88fc0698fa472","modified":1538677850000},{"_id":"themes/hexo-theme-next/source/css/_common/components/header/headerband.styl","hash":"d63e0cacc53dd375fcc113465a4328c59ff5f2c1","modified":1538677850000},{"_id":"themes/hexo-theme-next/source/css/_common/components/header/header.styl","hash":"53cde051e0337f4bf42fb8d6d7a79fa3fa6d4ef2","modified":1538677850000},{"_id":"themes/hexo-theme-next/source/css/_common/components/header/site-meta.styl","hash":"0656e753f182c9f47fef7304c847b7587a85ef0d","modified":1538677850000},{"_id":"themes/hexo-theme-next/source/css/_common/components/header/menu.styl","hash":"1a0d059799a298fe17c49a44298d32cebde93785","modified":1538677850000},{"_id":"themes/hexo-theme-next/source/css/_common/components/header/site-nav.styl","hash":"1727702eac5d326b5c81a667944a245016668231","modified":1538677850000},{"_id":"themes/hexo-theme-next/source/css/_common/components/highlight/highlight.styl","hash":"50450d9fdc8a2b2be8cfca51e3e1a01ffd636c0b","modified":1538677850000},{"_id":"themes/hexo-theme-next/source/css/_common/components/highlight/diff.styl","hash":"167986d0f649516671ddf7193eebba7b421cd115","modified":1538677850000},{"_id":"themes/hexo-theme-next/source/css/_common/components/highlight/theme.styl","hash":"7fe4d4d656e86276c17cb4e48a560cb6a4def703","modified":1538677850000},{"_id":"themes/hexo-theme-next/source/css/_common/components/pages/archive.styl","hash":"b6f3a06a94a6ee5470c956663164d58eda818a64","modified":1538677850000},{"_id":"themes/hexo-theme-next/source/css/_common/components/pages/categories.styl","hash":"7fb593f90d74a99c21840679933b9ef6fdc16a61","modified":1538677850000},{"_id":"themes/hexo-theme-next/source/css/_common/components/pages/pages.styl","hash":"f9760ecf186954cee3ba4a149be334e9ba296b89","modified":1538677850000},{"_id":"themes/hexo-theme-next/source/css/_common/components/pages/schedule.styl","hash":"8cf318644acc8b4978537c263290363e21c7f5af","modified":1538677850000},{"_id":"themes/hexo-theme-next/source/css/_common/components/pages/post-detail.styl","hash":"4e3838d7ac81d9ad133960f0f7ed58a44a015285","modified":1538677850000},{"_id":"themes/hexo-theme-next/source/css/_common/components/post/post-button.styl","hash":"62fbbd32cf5a99ae550c45c763a2c4813a138d01","modified":1538677850000},{"_id":"themes/hexo-theme-next/source/css/_common/components/post/post-collapse.styl","hash":"875cbe88d5c7f6248990e2beb97c9828920e7e24","modified":1538677850000},{"_id":"themes/hexo-theme-next/source/css/_common/components/post/post-copyright.styl","hash":"caf263d1928496688c0e1419801eafd7e6919ce5","modified":1538677850000},{"_id":"themes/hexo-theme-next/source/css/_common/components/post/post-eof.styl","hash":"a200c0a1c5a895ac9dc41e0641a5dfcd766be99b","modified":1538677850000},{"_id":"themes/hexo-theme-next/source/css/_common/components/post/post-expand.styl","hash":"a6c6eb8adba0a090ad1f4b9124e866887f20d10d","modified":1538677850000},{"_id":"themes/hexo-theme-next/source/css/_common/components/post/post-gallery.styl","hash":"cd9e214e502697f2f2db84eb721bac57a49b0fce","modified":1538677850000},{"_id":"themes/hexo-theme-next/source/css/_common/components/post/post-meta.styl","hash":"d0d7a5c90d62b685520d2b47fea8ba6019ff5402","modified":1538677850000},{"_id":"themes/hexo-theme-next/source/css/_common/components/post/post-nav.styl","hash":"27deb3d3a243d30022055dac7dad851024099a8b","modified":1538677850000},{"_id":"themes/hexo-theme-next/source/css/_common/components/post/post-rtl.styl","hash":"b2495ae5e04dcca610aacadc47881d9e716cd440","modified":1538677850000},{"_id":"themes/hexo-theme-next/source/css/_common/components/post/post-reward.styl","hash":"ca88ea6999a61fb905eb6e72eba5f92d4ee31e6e","modified":1538677850000},{"_id":"themes/hexo-theme-next/source/css/_common/components/post/post-title.styl","hash":"ccb34c52be8adba5996c6b94f9e723bd07d34c16","modified":1538677850000},{"_id":"themes/hexo-theme-next/source/css/_common/components/post/post-tags.styl","hash":"5a982d8ef3b3623ea5f59e63728990f5623c1b57","modified":1538677850000},{"_id":"themes/hexo-theme-next/source/css/_common/components/post/post-type.styl","hash":"01567edaea6978628aa5521a122a85434c418bfd","modified":1538677850000},{"_id":"themes/hexo-theme-next/source/css/_common/components/post/post-widgets.styl","hash":"7968343e41f8b94b318c36289dff1196c3eb1791","modified":1538677850000},{"_id":"themes/hexo-theme-next/source/css/_common/components/post/post.styl","hash":"89d6c3b697efc63de42afd2e89194b1be14152af","modified":1538677850000},{"_id":"themes/hexo-theme-next/source/css/_common/components/sidebar/sidebar-author-links.styl","hash":"39f04c4c7237a4e10acd3002331992b79945d241","modified":1538677850000},{"_id":"themes/hexo-theme-next/source/css/_common/components/sidebar/sidebar-author.styl","hash":"761eba9811b050b25d548cc0854de4824b41eb08","modified":1538677850000},{"_id":"themes/hexo-theme-next/source/css/_common/components/sidebar/sidebar-dimmer.styl","hash":"11c22f0fb3f6beb13e5a425ec064a4ff974c13b7","modified":1538677850000},{"_id":"themes/hexo-theme-next/source/css/_common/components/sidebar/sidebar-blogroll.styl","hash":"8dd9a1c6f4f6baa00c2cf01837e7617120cf9660","modified":1538677850000},{"_id":"themes/hexo-theme-next/source/css/_common/components/sidebar/sidebar-nav.styl","hash":"1153bb71edf253765145559674390e16dd67c633","modified":1538677850000},{"_id":"themes/hexo-theme-next/source/css/_common/components/sidebar/sidebar-feed-link.styl","hash":"61f8cea3c01acd600e90e1bc2a07def405503748","modified":1538677850000},{"_id":"themes/hexo-theme-next/source/css/_common/components/sidebar/sidebar-toc.styl","hash":"c8fe49a4bc014c24dead05b782a7082411a4abc5","modified":1538677850000},{"_id":"themes/hexo-theme-next/source/css/_common/components/sidebar/site-state.styl","hash":"e71652d3216e289c8548b1ea2357822c1476a425","modified":1538677850000},{"_id":"themes/hexo-theme-next/source/css/_common/components/sidebar/sidebar-toggle.styl","hash":"a1521d48bb06d8d703753f52a198baa197af7da2","modified":1538677850000},{"_id":"themes/hexo-theme-next/source/css/_common/components/sidebar/sidebar.styl","hash":"5ef6343835f484a2c0770bd1eb9cc443609e4c39","modified":1538677850000},{"_id":"themes/hexo-theme-next/source/css/_common/components/tags/blockquote-center.styl","hash":"2fe76476432b31993338cb45cdb3b29a518b6379","modified":1538677850000},{"_id":"themes/hexo-theme-next/source/css/_common/components/tags/exturl.styl","hash":"a3bdd71237afc112b2aa255f278cab6baeb25351","modified":1538677850000},{"_id":"themes/hexo-theme-next/source/css/_common/components/tags/full-image.styl","hash":"f825da191816eef69ea8efb498a7f756d5ebb498","modified":1538677850000},{"_id":"themes/hexo-theme-next/source/css/_common/components/tags/note-modern.styl","hash":"b7076e58d647265ee0ad2b461fe8ce72c9373bc5","modified":1538677850000},{"_id":"themes/hexo-theme-next/source/css/_common/components/tags/label.styl","hash":"2ab1322fe52ab5aafd49e68f5bd890e8380ee927","modified":1538677850000},{"_id":"themes/hexo-theme-next/source/css/_common/components/tags/group-pictures.styl","hash":"2ad1a2a9bbf6742d1b0762c4c623b68113d1e0fe","modified":1538677850000},{"_id":"themes/hexo-theme-next/source/css/_common/components/tags/note.styl","hash":"9a409b798decdefdaf7a23f0b11004a8c27e82f3","modified":1538677850000},{"_id":"themes/hexo-theme-next/source/css/_common/components/tags/tags.styl","hash":"b80604868e4f5cf20fccafd7ee415c20c804f700","modified":1538677850000},{"_id":"themes/hexo-theme-next/source/css/_common/components/tags/tabs.styl","hash":"154a87a32d2fead480d5e909c37f6c476671c5e6","modified":1538677850000},{"_id":"themes/hexo-theme-next/source/css/_common/components/third-party/algolia-search.styl","hash":"bba4f3bdb7517cd85376df3e1209b570c0548c69","modified":1538677850000},{"_id":"themes/hexo-theme-next/source/css/_common/components/third-party/busuanzi-counter.styl","hash":"a6e7d698702c2e383dde3fde2abde27951679084","modified":1538677850000},{"_id":"themes/hexo-theme-next/source/css/_common/components/third-party/baidushare.styl","hash":"5dbeed535d63a50265d96b396a5440f9bb31e4ba","modified":1538677850000},{"_id":"themes/hexo-theme-next/source/css/_common/components/third-party/duoshuo.styl","hash":"717cc7f82be9cc151e23a7678601ff2fd3a7fa1d","modified":1538677850000},{"_id":"themes/hexo-theme-next/source/css/_common/components/third-party/gitment.styl","hash":"874278147115601d2abf15987f5f7a84ada1ac6b","modified":1538677850000},{"_id":"themes/hexo-theme-next/source/css/_common/components/third-party/han.styl","hash":"10599e16414a8b7a76c4e79e6617b5fe3d4d1adf","modified":1538677850000},{"_id":"themes/hexo-theme-next/source/css/_common/components/third-party/jiathis.styl","hash":"15975ba7456b96916b1dbac448a1a0d2c38b8f3d","modified":1538677850000},{"_id":"themes/hexo-theme-next/source/css/_common/components/third-party/localsearch.styl","hash":"16087276945fa038f199692e3eabb1c52b8ea633","modified":1538677850000},{"_id":"themes/hexo-theme-next/source/css/_common/components/third-party/needsharebutton.styl","hash":"28825ae15fa20ae3942cdaa7bcc1f3523ce59acc","modified":1538677850000},{"_id":"themes/hexo-theme-next/source/css/_common/components/third-party/third-party.styl","hash":"9c8196394a89dfa40b87bf0019e80144365a9c93","modified":1538677850000},{"_id":"themes/hexo-theme-next/source/css/_schemes/Mist/outline/outline.styl","hash":"a07aa12cc36ac5c819670c2a3c17d07ed7a08986","modified":1538677850000},{"_id":"themes/hexo-theme-next/source/css/_schemes/Mist/sidebar/sidebar-blogroll.styl","hash":"1f09be9bb38411f0629b58c3b23873589a6dbcaa","modified":1538677850000},{"_id":"themes/hexo-theme-next/source/css/_schemes/Muse/sidebar/sidebar-blogroll.styl","hash":"1f09be9bb38411f0629b58c3b23873589a6dbcaa","modified":1538677850000},{"_id":"themes/hexo-theme-next/source/lib/Han/dist/font/han-space.otf","hash":"07436f011b44051f61b8329c99de4bec64e86f4b","modified":1538677850000},{"_id":"themes/hexo-theme-next/source/lib/Han/dist/font/han-space.woff","hash":"7a635062b10bf5662ae1d218ba0980171005d060","modified":1538677850000},{"_id":"themes/hexo-theme-next/source/lib/Han/dist/font/han.otf","hash":"f1f6bb8f461f5672e000380195d3d2358a28494c","modified":1538677850000},{"_id":"themes/hexo-theme-next/source/lib/Han/dist/font/han.woff","hash":"f38ff9b2eecaa17b50b66aa2dae87e9e7436d195","modified":1538677850000},{"_id":"themes/hexo-theme-next/source/lib/Han/dist/font/han.woff2","hash":"623af3ed5423371ac136a4fe0e8cc7bb7396037a","modified":1538677850000},{"_id":"themes/hexo-theme-next/source/lib/fancybox/source/helpers/fancybox_buttons.png","hash":"e385b139516c6813dcd64b8fc431c364ceafe5f3","modified":1538677850000},{"_id":"themes/hexo-theme-next/source/lib/fancybox/source/helpers/jquery.fancybox-buttons.css","hash":"6394c48092085788a8c0ef72670b0652006231a1","modified":1538677850000},{"_id":"themes/hexo-theme-next/source/lib/fancybox/source/helpers/jquery.fancybox-media.js","hash":"51139a4c79573d372a347ef01a493222a1eaf10a","modified":1538677850000},{"_id":"themes/hexo-theme-next/source/lib/fancybox/source/helpers/jquery.fancybox-buttons.js","hash":"ee948b4489aedeb548a77c9e45d8c7c5732fd62d","modified":1538677850000},{"_id":"themes/hexo-theme-next/source/lib/fancybox/source/helpers/jquery.fancybox-thumbs.css","hash":"b88b589f5f1aa1b3d87cc7eef34c281ff749b1ae","modified":1538677850000},{"_id":"themes/hexo-theme-next/source/lib/fancybox/source/helpers/jquery.fancybox-thumbs.js","hash":"d22b1629cb23a6181bebb70d0cf653ffe4b835c8","modified":1538677850000},{"_id":"themes/hexo-theme-next/source/lib/font-awesome/fonts/FontAwesome.otf","hash":"048707bc52ac4b6563aaa383bfe8660a0ddc908c","modified":1538677850000},{"_id":"themes/hexo-theme-next/source/lib/font-awesome/fonts/fontawesome-webfont.eot","hash":"d980c2ce873dc43af460d4d572d441304499f400","modified":1538677850000},{"_id":"themes/hexo-theme-next/source/lib/algolia-instant-search/instantsearch.min.js","hash":"90a1b22129efc172e2dfcceeeb76bff58bc3192f","modified":1538677850000},{"_id":"themes/hexo-theme-next/source/lib/font-awesome/fonts/fontawesome-webfont.ttf","hash":"13b1eab65a983c7a73bc7997c479d66943f7c6cb","modified":1538677850000},{"_id":"source/pic/map/4.png","hash":"f3ec61a6660c102331481f26e96a2d262be14a33","modified":1550158986903},{"_id":"themes/hexo-theme-next/source/lib/font-awesome/fonts/fontawesome-webfont.svg","hash":"b5483b11f8ba213e733b5b8af9927a04fec996f6","modified":1538677850000},{"_id":"themes/hexo-theme-next/source/lib/three/three.min.js","hash":"26273b1cb4914850a89529b48091dc584f2c57b8","modified":1538677850000},{"_id":"source/pic/map/5.png","hash":"a9034fb8f6f5600a65d2fb97f27c82ed57da61fa","modified":1550159071745}],"Category":[],"Data":[],"Page":[{"title":"404 Not Found：该页无法显示","comments":0,"_content":"","source":"404/index.md","raw":"---\ntitle: 404 Not Found：该页无法显示\ncomments: false\npermalink: /404\n---\n","date":"2018-12-27T16:21:15.950Z","updated":"2018-12-27T16:21:15.950Z","path":"/404.html","layout":"page","_id":"cjtravwqq000034ugfaxne23r","content":"","site":{"data":{}},"excerpt":"","more":""},{"title":"一份简单的《我是谁》","_content":"### 欢迎访问我的博客\n\n* 我是上海大学的的一个无名的小学渣\n* 一个喜欢玩，比较浪的男生\n* 一个比较弱的**ACM_er**,主攻数学和dp方面\n* [langman_orz](http://codeforces.com/profile/Langman_orz)这个是我的个人cf主页\n* 现在嘛，是一个退役老咸鱼。\n\n#### 最近想搭个博客去记录一下最近干了啥\n所以这个博客就出来啦    \n还请各位看官多来看看，增加访问量\n\n\n#### 那么有人会问，你这博客平时写些啥玩意？\n> 问的好啊？我也不晓得，毕竟也就心血来潮\n\n* 写一些最近的acm方面的东西，理解或题解啥的 \n    > 退役了，可能不会去写一些题解了。\n* 写下我最近在学的东西，以及最近需要用的东西，像什么课后习题答案啥的\n* 有时候应该也会写点有关吃喝的东西吧，毕竟资深吃货\n* 有时候也会写点项目报告啥的\n* 如果有些新的博客你看不懂的话，不要介意，我语文不太好，我自己看自己的博客都能看到一堆   错别字，很多的markdown都是之前写的，还请不要介意，写错了，欢迎大家提出来。\n\n","source":"about/index.md","raw":"---\ntitle:  一份简单的《我是谁》\n---\n### 欢迎访问我的博客\n\n* 我是上海大学的的一个无名的小学渣\n* 一个喜欢玩，比较浪的男生\n* 一个比较弱的**ACM_er**,主攻数学和dp方面\n* [langman_orz](http://codeforces.com/profile/Langman_orz)这个是我的个人cf主页\n* 现在嘛，是一个退役老咸鱼。\n\n#### 最近想搭个博客去记录一下最近干了啥\n所以这个博客就出来啦    \n还请各位看官多来看看，增加访问量\n\n\n#### 那么有人会问，你这博客平时写些啥玩意？\n> 问的好啊？我也不晓得，毕竟也就心血来潮\n\n* 写一些最近的acm方面的东西，理解或题解啥的 \n    > 退役了，可能不会去写一些题解了。\n* 写下我最近在学的东西，以及最近需要用的东西，像什么课后习题答案啥的\n* 有时候应该也会写点有关吃喝的东西吧，毕竟资深吃货\n* 有时候也会写点项目报告啥的\n* 如果有些新的博客你看不懂的话，不要介意，我语文不太好，我自己看自己的博客都能看到一堆   错别字，很多的markdown都是之前写的，还请不要介意，写错了，欢迎大家提出来。\n\n","date":"2018-12-01T06:26:09.838Z","updated":"2018-12-01T06:26:09.838Z","path":"about/index.html","comments":1,"layout":"page","_id":"cjtravwv5001734ugbglh3j9n","content":"<h3 id=\"欢迎访问我的博客\"><a class=\"markdownIt-Anchor\" href=\"#欢迎访问我的博客\"></a> 欢迎访问我的博客</h3>\n<ul>\n<li>我是上海大学的的一个无名的小学渣</li>\n<li>一个喜欢玩，比较浪的男生</li>\n<li>一个比较弱的<strong>ACM_er</strong>,主攻数学和dp方面</li>\n<li><a href=\"http://codeforces.com/profile/Langman_orz\" target=\"_blank\" rel=\"noopener\">langman_orz</a>这个是我的个人cf主页</li>\n<li>现在嘛，是一个退役老咸鱼。</li>\n</ul>\n<h4 id=\"最近想搭个博客去记录一下最近干了啥\"><a class=\"markdownIt-Anchor\" href=\"#最近想搭个博客去记录一下最近干了啥\"></a> 最近想搭个博客去记录一下最近干了啥</h4>\n<p>所以这个博客就出来啦<br>\n还请各位看官多来看看，增加访问量</p>\n<h4 id=\"那么有人会问你这博客平时写些啥玩意\"><a class=\"markdownIt-Anchor\" href=\"#那么有人会问你这博客平时写些啥玩意\"></a> 那么有人会问，你这博客平时写些啥玩意？</h4>\n<blockquote>\n<p>问的好啊？我也不晓得，毕竟也就心血来潮</p>\n</blockquote>\n<ul>\n<li>写一些最近的acm方面的东西，理解或题解啥的\n<blockquote>\n<p>退役了，可能不会去写一些题解了。</p>\n</blockquote>\n</li>\n<li>写下我最近在学的东西，以及最近需要用的东西，像什么课后习题答案啥的</li>\n<li>有时候应该也会写点有关吃喝的东西吧，毕竟资深吃货</li>\n<li>有时候也会写点项目报告啥的</li>\n<li>如果有些新的博客你看不懂的话，不要介意，我语文不太好，我自己看自己的博客都能看到一堆   错别字，很多的markdown都是之前写的，还请不要介意，写错了，欢迎大家提出来。</li>\n</ul>\n","site":{"data":{}},"excerpt":"","more":"<h3 id=\"欢迎访问我的博客\"><a class=\"markdownIt-Anchor\" href=\"#欢迎访问我的博客\"></a> 欢迎访问我的博客</h3>\n<ul>\n<li>我是上海大学的的一个无名的小学渣</li>\n<li>一个喜欢玩，比较浪的男生</li>\n<li>一个比较弱的<strong>ACM_er</strong>,主攻数学和dp方面</li>\n<li><a href=\"http://codeforces.com/profile/Langman_orz\" target=\"_blank\" rel=\"noopener\">langman_orz</a>这个是我的个人cf主页</li>\n<li>现在嘛，是一个退役老咸鱼。</li>\n</ul>\n<h4 id=\"最近想搭个博客去记录一下最近干了啥\"><a class=\"markdownIt-Anchor\" href=\"#最近想搭个博客去记录一下最近干了啥\"></a> 最近想搭个博客去记录一下最近干了啥</h4>\n<p>所以这个博客就出来啦<br>\n还请各位看官多来看看，增加访问量</p>\n<h4 id=\"那么有人会问你这博客平时写些啥玩意\"><a class=\"markdownIt-Anchor\" href=\"#那么有人会问你这博客平时写些啥玩意\"></a> 那么有人会问，你这博客平时写些啥玩意？</h4>\n<blockquote>\n<p>问的好啊？我也不晓得，毕竟也就心血来潮</p>\n</blockquote>\n<ul>\n<li>写一些最近的acm方面的东西，理解或题解啥的\n<blockquote>\n<p>退役了，可能不会去写一些题解了。</p>\n</blockquote>\n</li>\n<li>写下我最近在学的东西，以及最近需要用的东西，像什么课后习题答案啥的</li>\n<li>有时候应该也会写点有关吃喝的东西吧，毕竟资深吃货</li>\n<li>有时候也会写点项目报告啥的</li>\n<li>如果有些新的博客你看不懂的话，不要介意，我语文不太好，我自己看自己的博客都能看到一堆   错别字，很多的markdown都是之前写的，还请不要介意，写错了，欢迎大家提出来。</li>\n</ul>\n"},{"title":"链接","comments":0,"date":"2018-10-23T04:47:44.000Z","_content":"\n# 友情链接\n|name|description|\n|-----|----|\n|[ybmj](http://ybmj.xyz/)|苗神|\n|[weifeng](http://blog.naiver.me/)|伟峰学长|\n|[D-tesla](http://dengtesla.com/)|数学大佬,粉红拉|\n|[cubercsl](http://cubercsl.cn/)|菜队，无所不能|\n|[OneDay_pyf](http://blog.csdn.net/oneday_pyf)|伦神|\n|[lightina](http://blog.lightina.cn/)|陈老板|\n|[烧包](http://shaobaobaoer.cn/)|大佬，啥都会|\n\n# 常用链接\n- [oeis](http://oeis.org/)\n- [sharelatex](https://www.sharelatex.com/)\n","source":"links/index.md","raw":"---\ntitle: 链接\ncomments: false\ndate: 2018-10-23 12:47:44\n---\n\n# 友情链接\n|name|description|\n|-----|----|\n|[ybmj](http://ybmj.xyz/)|苗神|\n|[weifeng](http://blog.naiver.me/)|伟峰学长|\n|[D-tesla](http://dengtesla.com/)|数学大佬,粉红拉|\n|[cubercsl](http://cubercsl.cn/)|菜队，无所不能|\n|[OneDay_pyf](http://blog.csdn.net/oneday_pyf)|伦神|\n|[lightina](http://blog.lightina.cn/)|陈老板|\n|[烧包](http://shaobaobaoer.cn/)|大佬，啥都会|\n\n# 常用链接\n- [oeis](http://oeis.org/)\n- [sharelatex](https://www.sharelatex.com/)\n","updated":"2018-12-01T06:28:49.120Z","path":"links/index.html","layout":"page","_id":"cjtravwv7001934ug45rrikbb","content":"<h1 id=\"友情链接\"><a class=\"markdownIt-Anchor\" href=\"#友情链接\"></a> 友情链接</h1>\n<table>\n<thead>\n<tr>\n<th>name</th>\n<th>description</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td><a href=\"http://ybmj.xyz/\" target=\"_blank\" rel=\"noopener\">ybmj</a></td>\n<td>苗神</td>\n</tr>\n<tr>\n<td><a href=\"http://blog.naiver.me/\" target=\"_blank\" rel=\"noopener\">weifeng</a></td>\n<td>伟峰学长</td>\n</tr>\n<tr>\n<td><a href=\"http://dengtesla.com/\" target=\"_blank\" rel=\"noopener\">D-tesla</a></td>\n<td>数学大佬,粉红拉</td>\n</tr>\n<tr>\n<td><a href=\"http://cubercsl.cn/\" target=\"_blank\" rel=\"noopener\">cubercsl</a></td>\n<td>菜队，无所不能</td>\n</tr>\n<tr>\n<td><a href=\"http://blog.csdn.net/oneday_pyf\" target=\"_blank\" rel=\"noopener\">OneDay_pyf</a></td>\n<td>伦神</td>\n</tr>\n<tr>\n<td><a href=\"http://blog.lightina.cn/\" target=\"_blank\" rel=\"noopener\">lightina</a></td>\n<td>陈老板</td>\n</tr>\n<tr>\n<td><a href=\"http://shaobaobaoer.cn/\" target=\"_blank\" rel=\"noopener\">烧包</a></td>\n<td>大佬，啥都会</td>\n</tr>\n</tbody>\n</table>\n<h1 id=\"常用链接\"><a class=\"markdownIt-Anchor\" href=\"#常用链接\"></a> 常用链接</h1>\n<ul>\n<li><a href=\"http://oeis.org/\" target=\"_blank\" rel=\"noopener\">oeis</a></li>\n<li><a href=\"https://www.sharelatex.com/\" target=\"_blank\" rel=\"noopener\">sharelatex</a></li>\n</ul>\n","site":{"data":{}},"excerpt":"","more":"<h1 id=\"友情链接\"><a class=\"markdownIt-Anchor\" href=\"#友情链接\"></a> 友情链接</h1>\n<table>\n<thead>\n<tr>\n<th>name</th>\n<th>description</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td><a href=\"http://ybmj.xyz/\" target=\"_blank\" rel=\"noopener\">ybmj</a></td>\n<td>苗神</td>\n</tr>\n<tr>\n<td><a href=\"http://blog.naiver.me/\" target=\"_blank\" rel=\"noopener\">weifeng</a></td>\n<td>伟峰学长</td>\n</tr>\n<tr>\n<td><a href=\"http://dengtesla.com/\" target=\"_blank\" rel=\"noopener\">D-tesla</a></td>\n<td>数学大佬,粉红拉</td>\n</tr>\n<tr>\n<td><a href=\"http://cubercsl.cn/\" target=\"_blank\" rel=\"noopener\">cubercsl</a></td>\n<td>菜队，无所不能</td>\n</tr>\n<tr>\n<td><a href=\"http://blog.csdn.net/oneday_pyf\" target=\"_blank\" rel=\"noopener\">OneDay_pyf</a></td>\n<td>伦神</td>\n</tr>\n<tr>\n<td><a href=\"http://blog.lightina.cn/\" target=\"_blank\" rel=\"noopener\">lightina</a></td>\n<td>陈老板</td>\n</tr>\n<tr>\n<td><a href=\"http://shaobaobaoer.cn/\" target=\"_blank\" rel=\"noopener\">烧包</a></td>\n<td>大佬，啥都会</td>\n</tr>\n</tbody>\n</table>\n<h1 id=\"常用链接\"><a class=\"markdownIt-Anchor\" href=\"#常用链接\"></a> 常用链接</h1>\n<ul>\n<li><a href=\"http://oeis.org/\" target=\"_blank\" rel=\"noopener\">oeis</a></li>\n<li><a href=\"https://www.sharelatex.com/\" target=\"_blank\" rel=\"noopener\">sharelatex</a></li>\n</ul>\n"},{"title":"标签","date":"2018-10-06T07:47:00.000Z","type":"tags","comments":0,"_content":"","source":"tags/index.md","raw":"---\ntitle: 标签\ndate: 2018-10-06 15:47:00\ntype: \"tags\"\ncomments: false\n---\n","updated":"2018-10-06T07:48:02.171Z","path":"tags/index.html","layout":"page","_id":"cjtravwv9001c34ug8y0itc9n","content":"","site":{"data":{}},"excerpt":"","more":""}],"Post":[{"title":"dp常见思路","_content":"## dp的定义\ndp ，就是记忆化搜索，\n精髓在于他的 记忆化，\n相当于 把大问题转化成子问题\n然后找出问题之间的关系，从子状态 转移到 其他的状态。\n\n## 背包方面\n他的状态点在于\n当背包容量为x时，他的最佳状态\n然后找出容量是x的时候能从\n哪几个子状态转移过来。\n难点在于：\n1：背包的构造\n2：背包状态转移方程的寻找\n3：方向是从前到后，还是从后到前\n4：dp维数的确定\n\n## 树形dp\n在树上做dp\n那么状态的关系很好找，\n树上的一个结点他们的关系，只有，父亲结点，子结点，兄弟结点;\n所以关键在于找出父子结点的一些关系;\n套路基本就是两遍dfs\n而且兄弟结点用的不多，基本只是父子关系\n\n## 状压dp\n首先，你得知道哪些可以压缩\n大多数可以压缩的在于\n1：他的数量很少\n2：他的状态很少，一般是 开 或 闭，两个状态的多\n用到了很多的位运算，他不像背包。\n他是从子结点推出父结点\n基本就是些套路，dp\n关键还是在于状态转移方程的寻找。\n\n## 数位dp\n我觉得难点在于两个\n1 状态转移方程的寻找\n2 状态转移的状态点比较难找到\n首先我要知道他的记忆化出现在那个方面\n我在之前的一些操作有可能出现相同的结果\n这时候就体现出记忆化的用处\n而且我要知道通过怎么样的状态我可以确定不重复.\n状态转移的时候也需要注意\n从后一位和前一位的关系来寻找转移方程\n而且有时候还是一个状态到另一个状态来写,不是简单的数位间的关系求解.\n","source":"_posts/dp常见思路.md","raw":"---\ntitle: dp常见思路  \ntags: [ACM,dp]\n---\n## dp的定义\ndp ，就是记忆化搜索，\n精髓在于他的 记忆化，\n相当于 把大问题转化成子问题\n然后找出问题之间的关系，从子状态 转移到 其他的状态。\n\n## 背包方面\n他的状态点在于\n当背包容量为x时，他的最佳状态\n然后找出容量是x的时候能从\n哪几个子状态转移过来。\n难点在于：\n1：背包的构造\n2：背包状态转移方程的寻找\n3：方向是从前到后，还是从后到前\n4：dp维数的确定\n\n## 树形dp\n在树上做dp\n那么状态的关系很好找，\n树上的一个结点他们的关系，只有，父亲结点，子结点，兄弟结点;\n所以关键在于找出父子结点的一些关系;\n套路基本就是两遍dfs\n而且兄弟结点用的不多，基本只是父子关系\n\n## 状压dp\n首先，你得知道哪些可以压缩\n大多数可以压缩的在于\n1：他的数量很少\n2：他的状态很少，一般是 开 或 闭，两个状态的多\n用到了很多的位运算，他不像背包。\n他是从子结点推出父结点\n基本就是些套路，dp\n关键还是在于状态转移方程的寻找。\n\n## 数位dp\n我觉得难点在于两个\n1 状态转移方程的寻找\n2 状态转移的状态点比较难找到\n首先我要知道他的记忆化出现在那个方面\n我在之前的一些操作有可能出现相同的结果\n这时候就体现出记忆化的用处\n而且我要知道通过怎么样的状态我可以确定不重复.\n状态转移的时候也需要注意\n从后一位和前一位的关系来寻找转移方程\n而且有时候还是一个状态到另一个状态来写,不是简单的数位间的关系求解.\n","slug":"dp常见思路","published":1,"date":"2018-10-04T18:33:12.023Z","updated":"2018-10-06T17:57:21.466Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjtravwqr000134ugor70hj19","content":"<h2 id=\"dp的定义\"><a class=\"markdownIt-Anchor\" href=\"#dp的定义\"></a> dp的定义</h2>\n<p>dp ，就是记忆化搜索，<br>\n精髓在于他的 记忆化，<br>\n相当于 把大问题转化成子问题<br>\n然后找出问题之间的关系，从子状态 转移到 其他的状态。</p>\n<h2 id=\"背包方面\"><a class=\"markdownIt-Anchor\" href=\"#背包方面\"></a> 背包方面</h2>\n<p>他的状态点在于<br>\n当背包容量为x时，他的最佳状态<br>\n然后找出容量是x的时候能从<br>\n哪几个子状态转移过来。<br>\n难点在于：<br>\n1：背包的构造<br>\n2：背包状态转移方程的寻找<br>\n3：方向是从前到后，还是从后到前<br>\n4：dp维数的确定</p>\n<h2 id=\"树形dp\"><a class=\"markdownIt-Anchor\" href=\"#树形dp\"></a> 树形dp</h2>\n<p>在树上做dp<br>\n那么状态的关系很好找，<br>\n树上的一个结点他们的关系，只有，父亲结点，子结点，兄弟结点;<br>\n所以关键在于找出父子结点的一些关系;<br>\n套路基本就是两遍dfs<br>\n而且兄弟结点用的不多，基本只是父子关系</p>\n<h2 id=\"状压dp\"><a class=\"markdownIt-Anchor\" href=\"#状压dp\"></a> 状压dp</h2>\n<p>首先，你得知道哪些可以压缩<br>\n大多数可以压缩的在于<br>\n1：他的数量很少<br>\n2：他的状态很少，一般是 开 或 闭，两个状态的多<br>\n用到了很多的位运算，他不像背包。<br>\n他是从子结点推出父结点<br>\n基本就是些套路，dp<br>\n关键还是在于状态转移方程的寻找。</p>\n<h2 id=\"数位dp\"><a class=\"markdownIt-Anchor\" href=\"#数位dp\"></a> 数位dp</h2>\n<p>我觉得难点在于两个<br>\n1 状态转移方程的寻找<br>\n2 状态转移的状态点比较难找到<br>\n首先我要知道他的记忆化出现在那个方面<br>\n我在之前的一些操作有可能出现相同的结果<br>\n这时候就体现出记忆化的用处<br>\n而且我要知道通过怎么样的状态我可以确定不重复.<br>\n状态转移的时候也需要注意<br>\n从后一位和前一位的关系来寻找转移方程<br>\n而且有时候还是一个状态到另一个状态来写,不是简单的数位间的关系求解.</p>\n","site":{"data":{}},"excerpt":"","more":"<h2 id=\"dp的定义\"><a class=\"markdownIt-Anchor\" href=\"#dp的定义\"></a> dp的定义</h2>\n<p>dp ，就是记忆化搜索，<br>\n精髓在于他的 记忆化，<br>\n相当于 把大问题转化成子问题<br>\n然后找出问题之间的关系，从子状态 转移到 其他的状态。</p>\n<h2 id=\"背包方面\"><a class=\"markdownIt-Anchor\" href=\"#背包方面\"></a> 背包方面</h2>\n<p>他的状态点在于<br>\n当背包容量为x时，他的最佳状态<br>\n然后找出容量是x的时候能从<br>\n哪几个子状态转移过来。<br>\n难点在于：<br>\n1：背包的构造<br>\n2：背包状态转移方程的寻找<br>\n3：方向是从前到后，还是从后到前<br>\n4：dp维数的确定</p>\n<h2 id=\"树形dp\"><a class=\"markdownIt-Anchor\" href=\"#树形dp\"></a> 树形dp</h2>\n<p>在树上做dp<br>\n那么状态的关系很好找，<br>\n树上的一个结点他们的关系，只有，父亲结点，子结点，兄弟结点;<br>\n所以关键在于找出父子结点的一些关系;<br>\n套路基本就是两遍dfs<br>\n而且兄弟结点用的不多，基本只是父子关系</p>\n<h2 id=\"状压dp\"><a class=\"markdownIt-Anchor\" href=\"#状压dp\"></a> 状压dp</h2>\n<p>首先，你得知道哪些可以压缩<br>\n大多数可以压缩的在于<br>\n1：他的数量很少<br>\n2：他的状态很少，一般是 开 或 闭，两个状态的多<br>\n用到了很多的位运算，他不像背包。<br>\n他是从子结点推出父结点<br>\n基本就是些套路，dp<br>\n关键还是在于状态转移方程的寻找。</p>\n<h2 id=\"数位dp\"><a class=\"markdownIt-Anchor\" href=\"#数位dp\"></a> 数位dp</h2>\n<p>我觉得难点在于两个<br>\n1 状态转移方程的寻找<br>\n2 状态转移的状态点比较难找到<br>\n首先我要知道他的记忆化出现在那个方面<br>\n我在之前的一些操作有可能出现相同的结果<br>\n这时候就体现出记忆化的用处<br>\n而且我要知道通过怎么样的状态我可以确定不重复.<br>\n状态转移的时候也需要注意<br>\n从后一位和前一位的关系来寻找转移方程<br>\n而且有时候还是一个状态到另一个状态来写,不是简单的数位间的关系求解.</p>\n"},{"title":"dp 常见模板","_content":"### 最大上升子序列\n```\nLIS(LDS)\ntemplate<class Cmp>  \nint LIS (Cmp cmp)(nlogn)  \n{  \n    static int m, end[N];  \n    m = 0;  \n    for (int i=0;i<n;i++)  \n    {  \n        int pos = lower_bound(end, end+m, a[i], cmp)-end;  \n        end[pos] = a[i], m += pos==m;  \n    }  \n    return m;  \n}  \n    cout << LIS(less<int>()) << endl;         //严格上升  \n    cout << LIS(less_equal<int>()) << endl;   //非严格上升  \n    cout << LIS(greater<int>()) << endl;      //严格下降  \n    cout << LIS(greater_equal<int>()) << endl;//非严格下降  \n```\n### 最大公共子序列\n```\n留个递推公式,差不多的意思(n^2)\n\n   dp[i][j]=dp[i-1][j-1]+1;\n   dp[i][j]=max(dp[i-1][j],dp[i][j-1]);\n   dp[0][0]=0;\n\n```\n### 前向星造图法\n```cpp\nstruct EDGE{          //图的单位,边的结构体\n  int to;             //儿子\n  int next;           //同父的下一个结点\n  int w;              //权\n}edge[maxn*2];\n\nvoid addedge(int u,int v,int w) //加边\n{\n  edge[tot].to = v;\n  edge[tot].w = w;\n  edge[tot].next = head[u];\n  head[u] = tot++;\n}\n\nvoid dfs(u,v)//遍历的规则,单边\n{\n   for(int i =head[u];i!=-1;i = edge[i].next)\n   {\n     int v = edge[i].to;\n     int w = edge[i].w;\n     伪代码区\n   }  \n}\nvoid dfs(int u,int father)//双边\n{\n  for(int i = head[u];i!=-1;i=edge[i].next)\n    {\n      int v = edge[i].next;\n      int w = edge[i].w;\n      if(v != father)\n      {\n        伪代码\n      }\n    }\n}   \n\n```\n### 什么是开挂\n```cpp\npoj 3107 不开 500ms\n         开了 188ms\n         类型应该是何前面的(int) 相对应\ninline int read()//加快输入输出\n{\n    char k=0;char ls;ls=getchar();for(;ls<'0'||ls>'9';k=ls,ls=getchar());\n    int x=0;for(;ls>='0'&&ls<='9';ls=getchar())x=x*10+ls-'0';\n    if(k=='-')x=0-x;return x;\n}\n```\n### 状态压缩里面常用的一些东西\n```cpp\n//1 获得当前行的数\nint getnum(int x)\n{\n  int ret = 0;\n  while(x)\n  {\n    x &= x-1;\n    ret++;\n  }\n  return ret;\n}\n//2 看当前行左右是不是满足题设\nbool check(int x)\n{\n  if(x & x<<1) return 0;\n  return 1;\n}\n// 看是不是可以满足条件,和题目给的图一样,是可以放的,并且和上一个是不是会冲突\nbool suit(int x,int y)\n{\n  if(x&y) return 0;\n  return 1;\n}\n\n```\n### 数位dp\n```cpp\n// 1 把各个数位上的数字存进去\nll dfs(int len(数位),....(中间各个东西的转化),flag(是否在最高位,要限制))\n{\n  if(len<0) return ..;\n  if(!flag && ~dp[len][...]) return dp[len][...];\n  ll ans= 0;\n  int Max = flag?shu[len]:9;\n  for(int i = 0;i<=Max;i++)\n   {\n     ans += dfs(len-1,...,flag&&i==Max);\n   }\n   if(!flag) dp[len][...] = ans;\n   return ans;\n}\nvoid slove(ll x)\n{\n  int co = 0;\n  while(x)\n  {\n    shu[co] = x%10;\n    x/=10;\n  }\n  return dfs(co-1,...,1);\n}\n这是主要的一个套路;\n\n```\n","source":"_posts/dp常见模板.md","raw":"---\ntitle: dp 常见模板\ntags: [ACM,dp]\n---\n### 最大上升子序列\n```\nLIS(LDS)\ntemplate<class Cmp>  \nint LIS (Cmp cmp)(nlogn)  \n{  \n    static int m, end[N];  \n    m = 0;  \n    for (int i=0;i<n;i++)  \n    {  \n        int pos = lower_bound(end, end+m, a[i], cmp)-end;  \n        end[pos] = a[i], m += pos==m;  \n    }  \n    return m;  \n}  \n    cout << LIS(less<int>()) << endl;         //严格上升  \n    cout << LIS(less_equal<int>()) << endl;   //非严格上升  \n    cout << LIS(greater<int>()) << endl;      //严格下降  \n    cout << LIS(greater_equal<int>()) << endl;//非严格下降  \n```\n### 最大公共子序列\n```\n留个递推公式,差不多的意思(n^2)\n\n   dp[i][j]=dp[i-1][j-1]+1;\n   dp[i][j]=max(dp[i-1][j],dp[i][j-1]);\n   dp[0][0]=0;\n\n```\n### 前向星造图法\n```cpp\nstruct EDGE{          //图的单位,边的结构体\n  int to;             //儿子\n  int next;           //同父的下一个结点\n  int w;              //权\n}edge[maxn*2];\n\nvoid addedge(int u,int v,int w) //加边\n{\n  edge[tot].to = v;\n  edge[tot].w = w;\n  edge[tot].next = head[u];\n  head[u] = tot++;\n}\n\nvoid dfs(u,v)//遍历的规则,单边\n{\n   for(int i =head[u];i!=-1;i = edge[i].next)\n   {\n     int v = edge[i].to;\n     int w = edge[i].w;\n     伪代码区\n   }  \n}\nvoid dfs(int u,int father)//双边\n{\n  for(int i = head[u];i!=-1;i=edge[i].next)\n    {\n      int v = edge[i].next;\n      int w = edge[i].w;\n      if(v != father)\n      {\n        伪代码\n      }\n    }\n}   \n\n```\n### 什么是开挂\n```cpp\npoj 3107 不开 500ms\n         开了 188ms\n         类型应该是何前面的(int) 相对应\ninline int read()//加快输入输出\n{\n    char k=0;char ls;ls=getchar();for(;ls<'0'||ls>'9';k=ls,ls=getchar());\n    int x=0;for(;ls>='0'&&ls<='9';ls=getchar())x=x*10+ls-'0';\n    if(k=='-')x=0-x;return x;\n}\n```\n### 状态压缩里面常用的一些东西\n```cpp\n//1 获得当前行的数\nint getnum(int x)\n{\n  int ret = 0;\n  while(x)\n  {\n    x &= x-1;\n    ret++;\n  }\n  return ret;\n}\n//2 看当前行左右是不是满足题设\nbool check(int x)\n{\n  if(x & x<<1) return 0;\n  return 1;\n}\n// 看是不是可以满足条件,和题目给的图一样,是可以放的,并且和上一个是不是会冲突\nbool suit(int x,int y)\n{\n  if(x&y) return 0;\n  return 1;\n}\n\n```\n### 数位dp\n```cpp\n// 1 把各个数位上的数字存进去\nll dfs(int len(数位),....(中间各个东西的转化),flag(是否在最高位,要限制))\n{\n  if(len<0) return ..;\n  if(!flag && ~dp[len][...]) return dp[len][...];\n  ll ans= 0;\n  int Max = flag?shu[len]:9;\n  for(int i = 0;i<=Max;i++)\n   {\n     ans += dfs(len-1,...,flag&&i==Max);\n   }\n   if(!flag) dp[len][...] = ans;\n   return ans;\n}\nvoid slove(ll x)\n{\n  int co = 0;\n  while(x)\n  {\n    shu[co] = x%10;\n    x/=10;\n  }\n  return dfs(co-1,...,1);\n}\n这是主要的一个套路;\n\n```\n","slug":"dp常见模板","published":1,"date":"2018-10-04T18:33:12.025Z","updated":"2018-10-06T17:57:48.650Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjtravwqy000234ugq6bjaiff","content":"<h3 id=\"最大上升子序列\"><a class=\"markdownIt-Anchor\" href=\"#最大上升子序列\"></a> 最大上升子序列</h3>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">LIS(LDS)</span><br><span class=\"line\">template&lt;class Cmp&gt;  </span><br><span class=\"line\">int LIS (Cmp cmp)(nlogn)  </span><br><span class=\"line\">&#123;  </span><br><span class=\"line\">    static int m, end[N];  </span><br><span class=\"line\">    m = 0;  </span><br><span class=\"line\">    for (int i=0;i&lt;n;i++)  </span><br><span class=\"line\">    &#123;  </span><br><span class=\"line\">        int pos = lower_bound(end, end+m, a[i], cmp)-end;  </span><br><span class=\"line\">        end[pos] = a[i], m += pos==m;  </span><br><span class=\"line\">    &#125;  </span><br><span class=\"line\">    return m;  </span><br><span class=\"line\">&#125;  </span><br><span class=\"line\">    cout &lt;&lt; LIS(less&lt;int&gt;()) &lt;&lt; endl;         //严格上升  </span><br><span class=\"line\">    cout &lt;&lt; LIS(less_equal&lt;int&gt;()) &lt;&lt; endl;   //非严格上升  </span><br><span class=\"line\">    cout &lt;&lt; LIS(greater&lt;int&gt;()) &lt;&lt; endl;      //严格下降  </span><br><span class=\"line\">    cout &lt;&lt; LIS(greater_equal&lt;int&gt;()) &lt;&lt; endl;//非严格下降</span><br></pre></td></tr></table></figure>\n<h3 id=\"最大公共子序列\"><a class=\"markdownIt-Anchor\" href=\"#最大公共子序列\"></a> 最大公共子序列</h3>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">留个递推公式,差不多的意思(n^2)</span><br><span class=\"line\"></span><br><span class=\"line\">   dp[i][j]=dp[i-1][j-1]+1;</span><br><span class=\"line\">   dp[i][j]=max(dp[i-1][j],dp[i][j-1]);</span><br><span class=\"line\">   dp[0][0]=0;</span><br></pre></td></tr></table></figure>\n<h3 id=\"前向星造图法\"><a class=\"markdownIt-Anchor\" href=\"#前向星造图法\"></a> 前向星造图法</h3>\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">struct</span> <span class=\"title\">EDGE</span>&#123;</span>          <span class=\"comment\">//图的单位,边的结构体</span></span><br><span class=\"line\">  <span class=\"keyword\">int</span> to;             <span class=\"comment\">//儿子</span></span><br><span class=\"line\">  <span class=\"keyword\">int</span> next;           <span class=\"comment\">//同父的下一个结点</span></span><br><span class=\"line\">  <span class=\"keyword\">int</span> w;              <span class=\"comment\">//权</span></span><br><span class=\"line\">&#125;edge[maxn*<span class=\"number\">2</span>];</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">addedge</span><span class=\"params\">(<span class=\"keyword\">int</span> u,<span class=\"keyword\">int</span> v,<span class=\"keyword\">int</span> w)</span> <span class=\"comment\">//加边</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">  edge[tot].to = v;</span><br><span class=\"line\">  edge[tot].w = w;</span><br><span class=\"line\">  edge[tot].next = head[u];</span><br><span class=\"line\">  head[u] = tot++;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">dfs</span><span class=\"params\">(u,v)</span><span class=\"comment\">//遍历的规则,单边</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">   <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i =head[u];i!=<span class=\"number\">-1</span>;i = edge[i].next)</span><br><span class=\"line\">   &#123;</span><br><span class=\"line\">     <span class=\"keyword\">int</span> v = edge[i].to;</span><br><span class=\"line\">     <span class=\"keyword\">int</span> w = edge[i].w;</span><br><span class=\"line\">     伪代码区</span><br><span class=\"line\">   &#125;  </span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">dfs</span><span class=\"params\">(<span class=\"keyword\">int</span> u,<span class=\"keyword\">int</span> father)</span><span class=\"comment\">//双边</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i = head[u];i!=<span class=\"number\">-1</span>;i=edge[i].next)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">      <span class=\"keyword\">int</span> v = edge[i].next;</span><br><span class=\"line\">      <span class=\"keyword\">int</span> w = edge[i].w;</span><br><span class=\"line\">      <span class=\"keyword\">if</span>(v != father)</span><br><span class=\"line\">      &#123;</span><br><span class=\"line\">        伪代码</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"什么是开挂\"><a class=\"markdownIt-Anchor\" href=\"#什么是开挂\"></a> 什么是开挂</h3>\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">poj <span class=\"number\">3107</span> 不开 <span class=\"number\">500</span>ms</span><br><span class=\"line\">         开了 <span class=\"number\">188</span>ms</span><br><span class=\"line\">         类型应该是何前面的(<span class=\"keyword\">int</span>) 相对应</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">inline</span> <span class=\"keyword\">int</span> <span class=\"title\">read</span><span class=\"params\">()</span><span class=\"comment\">//加快输入输出</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">char</span> k=<span class=\"number\">0</span>;<span class=\"keyword\">char</span> ls;ls=getchar();<span class=\"keyword\">for</span>(;ls&lt;<span class=\"string\">'0'</span>||ls&gt;<span class=\"string\">'9'</span>;k=ls,ls=getchar());</span><br><span class=\"line\">    <span class=\"keyword\">int</span> x=<span class=\"number\">0</span>;<span class=\"keyword\">for</span>(;ls&gt;=<span class=\"string\">'0'</span>&amp;&amp;ls&lt;=<span class=\"string\">'9'</span>;ls=getchar())x=x*<span class=\"number\">10</span>+ls-<span class=\"string\">'0'</span>;</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(k==<span class=\"string\">'-'</span>)x=<span class=\"number\">0</span>-x;<span class=\"keyword\">return</span> x;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"状态压缩里面常用的一些东西\"><a class=\"markdownIt-Anchor\" href=\"#状态压缩里面常用的一些东西\"></a> 状态压缩里面常用的一些东西</h3>\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//1 获得当前行的数</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">getnum</span><span class=\"params\">(<span class=\"keyword\">int</span> x)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">int</span> ret = <span class=\"number\">0</span>;</span><br><span class=\"line\">  <span class=\"keyword\">while</span>(x)</span><br><span class=\"line\">  &#123;</span><br><span class=\"line\">    x &amp;= x<span class=\"number\">-1</span>;</span><br><span class=\"line\">    ret++;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> ret;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">//2 看当前行左右是不是满足题设</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">bool</span> <span class=\"title\">check</span><span class=\"params\">(<span class=\"keyword\">int</span> x)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">if</span>(x &amp; x&lt;&lt;<span class=\"number\">1</span>) <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> <span class=\"number\">1</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">// 看是不是可以满足条件,和题目给的图一样,是可以放的,并且和上一个是不是会冲突</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">bool</span> <span class=\"title\">suit</span><span class=\"params\">(<span class=\"keyword\">int</span> x,<span class=\"keyword\">int</span> y)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">if</span>(x&amp;y) <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> <span class=\"number\">1</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"数位dp\"><a class=\"markdownIt-Anchor\" href=\"#数位dp\"></a> 数位dp</h3>\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 1 把各个数位上的数字存进去</span></span><br><span class=\"line\">ll dfs(int len(数位),....(中间各个东西的转化),flag(是否在最高位,要限制))</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">  <span class=\"keyword\">if</span>(len&lt;<span class=\"number\">0</span>) <span class=\"keyword\">return</span> ..;</span><br><span class=\"line\">  <span class=\"keyword\">if</span>(!flag &amp;&amp; ~dp[len][...]) <span class=\"keyword\">return</span> dp[len][...];</span><br><span class=\"line\">  ll ans= <span class=\"number\">0</span>;</span><br><span class=\"line\">  <span class=\"keyword\">int</span> Max = flag?shu[len]:<span class=\"number\">9</span>;</span><br><span class=\"line\">  <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>;i&lt;=Max;i++)</span><br><span class=\"line\">   &#123;</span><br><span class=\"line\">     ans += dfs(len<span class=\"number\">-1</span>,...,flag&amp;&amp;i==Max);</span><br><span class=\"line\">   &#125;</span><br><span class=\"line\">   <span class=\"keyword\">if</span>(!flag) dp[len][...] = ans;</span><br><span class=\"line\">   <span class=\"keyword\">return</span> ans;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">slove</span><span class=\"params\">(ll x)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">int</span> co = <span class=\"number\">0</span>;</span><br><span class=\"line\">  <span class=\"keyword\">while</span>(x)</span><br><span class=\"line\">  &#123;</span><br><span class=\"line\">    shu[co] = x%<span class=\"number\">10</span>;</span><br><span class=\"line\">    x/=<span class=\"number\">10</span>;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> dfs(co<span class=\"number\">-1</span>,...,<span class=\"number\">1</span>);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">这是主要的一个套路;</span><br></pre></td></tr></table></figure>\n","site":{"data":{}},"excerpt":"","more":"<h3 id=\"最大上升子序列\"><a class=\"markdownIt-Anchor\" href=\"#最大上升子序列\"></a> 最大上升子序列</h3>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">LIS(LDS)</span><br><span class=\"line\">template&lt;class Cmp&gt;  </span><br><span class=\"line\">int LIS (Cmp cmp)(nlogn)  </span><br><span class=\"line\">&#123;  </span><br><span class=\"line\">    static int m, end[N];  </span><br><span class=\"line\">    m = 0;  </span><br><span class=\"line\">    for (int i=0;i&lt;n;i++)  </span><br><span class=\"line\">    &#123;  </span><br><span class=\"line\">        int pos = lower_bound(end, end+m, a[i], cmp)-end;  </span><br><span class=\"line\">        end[pos] = a[i], m += pos==m;  </span><br><span class=\"line\">    &#125;  </span><br><span class=\"line\">    return m;  </span><br><span class=\"line\">&#125;  </span><br><span class=\"line\">    cout &lt;&lt; LIS(less&lt;int&gt;()) &lt;&lt; endl;         //严格上升  </span><br><span class=\"line\">    cout &lt;&lt; LIS(less_equal&lt;int&gt;()) &lt;&lt; endl;   //非严格上升  </span><br><span class=\"line\">    cout &lt;&lt; LIS(greater&lt;int&gt;()) &lt;&lt; endl;      //严格下降  </span><br><span class=\"line\">    cout &lt;&lt; LIS(greater_equal&lt;int&gt;()) &lt;&lt; endl;//非严格下降</span><br></pre></td></tr></table></figure>\n<h3 id=\"最大公共子序列\"><a class=\"markdownIt-Anchor\" href=\"#最大公共子序列\"></a> 最大公共子序列</h3>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">留个递推公式,差不多的意思(n^2)</span><br><span class=\"line\"></span><br><span class=\"line\">   dp[i][j]=dp[i-1][j-1]+1;</span><br><span class=\"line\">   dp[i][j]=max(dp[i-1][j],dp[i][j-1]);</span><br><span class=\"line\">   dp[0][0]=0;</span><br></pre></td></tr></table></figure>\n<h3 id=\"前向星造图法\"><a class=\"markdownIt-Anchor\" href=\"#前向星造图法\"></a> 前向星造图法</h3>\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">struct</span> <span class=\"title\">EDGE</span>&#123;</span>          <span class=\"comment\">//图的单位,边的结构体</span></span><br><span class=\"line\">  <span class=\"keyword\">int</span> to;             <span class=\"comment\">//儿子</span></span><br><span class=\"line\">  <span class=\"keyword\">int</span> next;           <span class=\"comment\">//同父的下一个结点</span></span><br><span class=\"line\">  <span class=\"keyword\">int</span> w;              <span class=\"comment\">//权</span></span><br><span class=\"line\">&#125;edge[maxn*<span class=\"number\">2</span>];</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">addedge</span><span class=\"params\">(<span class=\"keyword\">int</span> u,<span class=\"keyword\">int</span> v,<span class=\"keyword\">int</span> w)</span> <span class=\"comment\">//加边</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">  edge[tot].to = v;</span><br><span class=\"line\">  edge[tot].w = w;</span><br><span class=\"line\">  edge[tot].next = head[u];</span><br><span class=\"line\">  head[u] = tot++;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">dfs</span><span class=\"params\">(u,v)</span><span class=\"comment\">//遍历的规则,单边</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">   <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i =head[u];i!=<span class=\"number\">-1</span>;i = edge[i].next)</span><br><span class=\"line\">   &#123;</span><br><span class=\"line\">     <span class=\"keyword\">int</span> v = edge[i].to;</span><br><span class=\"line\">     <span class=\"keyword\">int</span> w = edge[i].w;</span><br><span class=\"line\">     伪代码区</span><br><span class=\"line\">   &#125;  </span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">dfs</span><span class=\"params\">(<span class=\"keyword\">int</span> u,<span class=\"keyword\">int</span> father)</span><span class=\"comment\">//双边</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i = head[u];i!=<span class=\"number\">-1</span>;i=edge[i].next)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">      <span class=\"keyword\">int</span> v = edge[i].next;</span><br><span class=\"line\">      <span class=\"keyword\">int</span> w = edge[i].w;</span><br><span class=\"line\">      <span class=\"keyword\">if</span>(v != father)</span><br><span class=\"line\">      &#123;</span><br><span class=\"line\">        伪代码</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"什么是开挂\"><a class=\"markdownIt-Anchor\" href=\"#什么是开挂\"></a> 什么是开挂</h3>\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">poj <span class=\"number\">3107</span> 不开 <span class=\"number\">500</span>ms</span><br><span class=\"line\">         开了 <span class=\"number\">188</span>ms</span><br><span class=\"line\">         类型应该是何前面的(<span class=\"keyword\">int</span>) 相对应</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">inline</span> <span class=\"keyword\">int</span> <span class=\"title\">read</span><span class=\"params\">()</span><span class=\"comment\">//加快输入输出</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">char</span> k=<span class=\"number\">0</span>;<span class=\"keyword\">char</span> ls;ls=getchar();<span class=\"keyword\">for</span>(;ls&lt;<span class=\"string\">'0'</span>||ls&gt;<span class=\"string\">'9'</span>;k=ls,ls=getchar());</span><br><span class=\"line\">    <span class=\"keyword\">int</span> x=<span class=\"number\">0</span>;<span class=\"keyword\">for</span>(;ls&gt;=<span class=\"string\">'0'</span>&amp;&amp;ls&lt;=<span class=\"string\">'9'</span>;ls=getchar())x=x*<span class=\"number\">10</span>+ls-<span class=\"string\">'0'</span>;</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(k==<span class=\"string\">'-'</span>)x=<span class=\"number\">0</span>-x;<span class=\"keyword\">return</span> x;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"状态压缩里面常用的一些东西\"><a class=\"markdownIt-Anchor\" href=\"#状态压缩里面常用的一些东西\"></a> 状态压缩里面常用的一些东西</h3>\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//1 获得当前行的数</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">getnum</span><span class=\"params\">(<span class=\"keyword\">int</span> x)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">int</span> ret = <span class=\"number\">0</span>;</span><br><span class=\"line\">  <span class=\"keyword\">while</span>(x)</span><br><span class=\"line\">  &#123;</span><br><span class=\"line\">    x &amp;= x<span class=\"number\">-1</span>;</span><br><span class=\"line\">    ret++;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> ret;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">//2 看当前行左右是不是满足题设</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">bool</span> <span class=\"title\">check</span><span class=\"params\">(<span class=\"keyword\">int</span> x)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">if</span>(x &amp; x&lt;&lt;<span class=\"number\">1</span>) <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> <span class=\"number\">1</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">// 看是不是可以满足条件,和题目给的图一样,是可以放的,并且和上一个是不是会冲突</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">bool</span> <span class=\"title\">suit</span><span class=\"params\">(<span class=\"keyword\">int</span> x,<span class=\"keyword\">int</span> y)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">if</span>(x&amp;y) <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> <span class=\"number\">1</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"数位dp\"><a class=\"markdownIt-Anchor\" href=\"#数位dp\"></a> 数位dp</h3>\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 1 把各个数位上的数字存进去</span></span><br><span class=\"line\">ll dfs(int len(数位),....(中间各个东西的转化),flag(是否在最高位,要限制))</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">  <span class=\"keyword\">if</span>(len&lt;<span class=\"number\">0</span>) <span class=\"keyword\">return</span> ..;</span><br><span class=\"line\">  <span class=\"keyword\">if</span>(!flag &amp;&amp; ~dp[len][...]) <span class=\"keyword\">return</span> dp[len][...];</span><br><span class=\"line\">  ll ans= <span class=\"number\">0</span>;</span><br><span class=\"line\">  <span class=\"keyword\">int</span> Max = flag?shu[len]:<span class=\"number\">9</span>;</span><br><span class=\"line\">  <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>;i&lt;=Max;i++)</span><br><span class=\"line\">   &#123;</span><br><span class=\"line\">     ans += dfs(len<span class=\"number\">-1</span>,...,flag&amp;&amp;i==Max);</span><br><span class=\"line\">   &#125;</span><br><span class=\"line\">   <span class=\"keyword\">if</span>(!flag) dp[len][...] = ans;</span><br><span class=\"line\">   <span class=\"keyword\">return</span> ans;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">slove</span><span class=\"params\">(ll x)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">int</span> co = <span class=\"number\">0</span>;</span><br><span class=\"line\">  <span class=\"keyword\">while</span>(x)</span><br><span class=\"line\">  &#123;</span><br><span class=\"line\">    shu[co] = x%<span class=\"number\">10</span>;</span><br><span class=\"line\">    x/=<span class=\"number\">10</span>;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> dfs(co<span class=\"number\">-1</span>,...,<span class=\"number\">1</span>);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">这是主要的一个套路;</span><br></pre></td></tr></table></figure>\n"},{"title":"hexo博客如何配置到服务器上","date":"2019-03-15T12:31:27.000Z","_content":"\n## 把博客放到自己得服务器上\n\n> 最近搞了个服务器，其实在寒假就搞了一个腾讯云，但是啊，这个首付确实还挺便宜的，但是续费的时候要我1000块，这就很难受了。然后听别人说的就去搞了个阿里云。之前自己博客是买了个域名放在了github送的那个小服务器上，能用，但是感觉就有点奇怪。\n\n### 首先啊\n> 我是从hexo+github起步的。首先你得知道hexo如何在本地搭建那个博客得。网上其实有很多得教程，但是啊，感觉还是挺奇怪得，很多说得不是很详细，很多到底是本地操作还是服务器端得呢。其实搞清楚后，东西也不是很多。总结来说，一个是服务器上，你要做个git仓库，然后安装下web服务器，然后就没了，在本地，你要做得就是改下你的那个hexo得部署，之前你是放在github得那个地方，现在就是放在本地就完事了。\n\n### 服务器上的操作\n\n#### hexo有关\n> 我们之前把hexo的博客放在那个github的服务器上，我们其实什么插件都不用装，把文件直接push到服务器上就可以了，再加一个CANME就好了，这说明啥，这说明我们的那个网站，其实就是个静态的网页，打开的那种。**唉，说到这里其实我就有一个问题了，我们的博客在hexo g静态文件生成的时候，是有静态文件的，里面有一个index.html你要是直接打开，你会发现gg 思密达，但是你要放在web服务器上就能渲染的很好。倒是打破了我对web服务器的理解**然后任务就很明显，把hexo的静态文件放到服务器上的web服务器上就完事了。\n\n#### git用户\n> 这个用户，我在一开始是觉得奇怪的。没啥用的啊，搞个git的插件就行了。实际上，确实是这样，没啥用，唯一的用处在于那个，我们把博客推送到github服务器上，不是不用密码吗，是因为我们直接给了ssh的权限，这个的用处好像也就在这里了，对这个用户，我们可以放大点权限，让我们博客直接送过去，不然就会有权限限制。很多博客都是这样说的，那我就这样做了。具体的做法就是\n+ 创建用户\n+ 给权限[这个挺重要的，注意下]\n+ 建立ssh的信任问题\n+ 创建一个仓库\n\n#### web服务器\n> 这个干啥的呢，自己百度把。我用的是apache服务器，然后这个服务器需要做啥呢\n+ 改默认访问网页\n+ 建立一个/var/www/hexo的文件，把默认网页访问改成这个。记得把这个文件的权限改成git可以动的。\n+ 在那个git用户下面，对那个空仓库，做一个钩子，这个你要注意把那个钩子做成**可执行文件**，干啥呢，就是把你的那个仓库放到/var/www/hexo里面去\n\n### 本地操作\n\n> 改下那个_config.yml里面的那个部署的地址就好了\n\n### 阿里云操作\n\n> 你要去开下那个80端口。\n> 再改下那个你的域名映射\n\n### 备案\n\n> 为啥不知道，但是好像确实要去搞下。不然可能会被查水表。反正旁边的人都搞了\n","source":"_posts/hexo博客如何配置到服务器上.md","raw":"---\ntitle: hexo博客如何配置到服务器上\ndate: 2019-03-15 20:31:27\ntags: [服务器，博客]\n---\n\n## 把博客放到自己得服务器上\n\n> 最近搞了个服务器，其实在寒假就搞了一个腾讯云，但是啊，这个首付确实还挺便宜的，但是续费的时候要我1000块，这就很难受了。然后听别人说的就去搞了个阿里云。之前自己博客是买了个域名放在了github送的那个小服务器上，能用，但是感觉就有点奇怪。\n\n### 首先啊\n> 我是从hexo+github起步的。首先你得知道hexo如何在本地搭建那个博客得。网上其实有很多得教程，但是啊，感觉还是挺奇怪得，很多说得不是很详细，很多到底是本地操作还是服务器端得呢。其实搞清楚后，东西也不是很多。总结来说，一个是服务器上，你要做个git仓库，然后安装下web服务器，然后就没了，在本地，你要做得就是改下你的那个hexo得部署，之前你是放在github得那个地方，现在就是放在本地就完事了。\n\n### 服务器上的操作\n\n#### hexo有关\n> 我们之前把hexo的博客放在那个github的服务器上，我们其实什么插件都不用装，把文件直接push到服务器上就可以了，再加一个CANME就好了，这说明啥，这说明我们的那个网站，其实就是个静态的网页，打开的那种。**唉，说到这里其实我就有一个问题了，我们的博客在hexo g静态文件生成的时候，是有静态文件的，里面有一个index.html你要是直接打开，你会发现gg 思密达，但是你要放在web服务器上就能渲染的很好。倒是打破了我对web服务器的理解**然后任务就很明显，把hexo的静态文件放到服务器上的web服务器上就完事了。\n\n#### git用户\n> 这个用户，我在一开始是觉得奇怪的。没啥用的啊，搞个git的插件就行了。实际上，确实是这样，没啥用，唯一的用处在于那个，我们把博客推送到github服务器上，不是不用密码吗，是因为我们直接给了ssh的权限，这个的用处好像也就在这里了，对这个用户，我们可以放大点权限，让我们博客直接送过去，不然就会有权限限制。很多博客都是这样说的，那我就这样做了。具体的做法就是\n+ 创建用户\n+ 给权限[这个挺重要的，注意下]\n+ 建立ssh的信任问题\n+ 创建一个仓库\n\n#### web服务器\n> 这个干啥的呢，自己百度把。我用的是apache服务器，然后这个服务器需要做啥呢\n+ 改默认访问网页\n+ 建立一个/var/www/hexo的文件，把默认网页访问改成这个。记得把这个文件的权限改成git可以动的。\n+ 在那个git用户下面，对那个空仓库，做一个钩子，这个你要注意把那个钩子做成**可执行文件**，干啥呢，就是把你的那个仓库放到/var/www/hexo里面去\n\n### 本地操作\n\n> 改下那个_config.yml里面的那个部署的地址就好了\n\n### 阿里云操作\n\n> 你要去开下那个80端口。\n> 再改下那个你的域名映射\n\n### 备案\n\n> 为啥不知道，但是好像确实要去搞下。不然可能会被查水表。反正旁边的人都搞了\n","slug":"hexo博客如何配置到服务器上","published":1,"updated":"2019-03-15T13:55:08.114Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjtravwr2000434uglzqnyy2e","content":"<h2 id=\"把博客放到自己得服务器上\"><a class=\"markdownIt-Anchor\" href=\"#把博客放到自己得服务器上\"></a> 把博客放到自己得服务器上</h2>\n<blockquote>\n<p>最近搞了个服务器，其实在寒假就搞了一个腾讯云，但是啊，这个首付确实还挺便宜的，但是续费的时候要我1000块，这就很难受了。然后听别人说的就去搞了个阿里云。之前自己博客是买了个域名放在了github送的那个小服务器上，能用，但是感觉就有点奇怪。</p>\n</blockquote>\n<h3 id=\"首先啊\"><a class=\"markdownIt-Anchor\" href=\"#首先啊\"></a> 首先啊</h3>\n<blockquote>\n<p>我是从hexo+github起步的。首先你得知道hexo如何在本地搭建那个博客得。网上其实有很多得教程，但是啊，感觉还是挺奇怪得，很多说得不是很详细，很多到底是本地操作还是服务器端得呢。其实搞清楚后，东西也不是很多。总结来说，一个是服务器上，你要做个git仓库，然后安装下web服务器，然后就没了，在本地，你要做得就是改下你的那个hexo得部署，之前你是放在github得那个地方，现在就是放在本地就完事了。</p>\n</blockquote>\n<h3 id=\"服务器上的操作\"><a class=\"markdownIt-Anchor\" href=\"#服务器上的操作\"></a> 服务器上的操作</h3>\n<h4 id=\"hexo有关\"><a class=\"markdownIt-Anchor\" href=\"#hexo有关\"></a> hexo有关</h4>\n<blockquote>\n<p>我们之前把hexo的博客放在那个github的服务器上，我们其实什么插件都不用装，把文件直接push到服务器上就可以了，再加一个CANME就好了，这说明啥，这说明我们的那个网站，其实就是个静态的网页，打开的那种。<strong>唉，说到这里其实我就有一个问题了，我们的博客在hexo g静态文件生成的时候，是有静态文件的，里面有一个index.html你要是直接打开，你会发现gg 思密达，但是你要放在web服务器上就能渲染的很好。倒是打破了我对web服务器的理解</strong>然后任务就很明显，把hexo的静态文件放到服务器上的web服务器上就完事了。</p>\n</blockquote>\n<h4 id=\"git用户\"><a class=\"markdownIt-Anchor\" href=\"#git用户\"></a> git用户</h4>\n<blockquote>\n<p>这个用户，我在一开始是觉得奇怪的。没啥用的啊，搞个git的插件就行了。实际上，确实是这样，没啥用，唯一的用处在于那个，我们把博客推送到github服务器上，不是不用密码吗，是因为我们直接给了ssh的权限，这个的用处好像也就在这里了，对这个用户，我们可以放大点权限，让我们博客直接送过去，不然就会有权限限制。很多博客都是这样说的，那我就这样做了。具体的做法就是</p>\n</blockquote>\n<ul>\n<li>创建用户</li>\n<li>给权限[这个挺重要的，注意下]</li>\n<li>建立ssh的信任问题</li>\n<li>创建一个仓库</li>\n</ul>\n<h4 id=\"web服务器\"><a class=\"markdownIt-Anchor\" href=\"#web服务器\"></a> web服务器</h4>\n<blockquote>\n<p>这个干啥的呢，自己百度把。我用的是apache服务器，然后这个服务器需要做啥呢</p>\n</blockquote>\n<ul>\n<li>改默认访问网页</li>\n<li>建立一个/var/www/hexo的文件，把默认网页访问改成这个。记得把这个文件的权限改成git可以动的。</li>\n<li>在那个git用户下面，对那个空仓库，做一个钩子，这个你要注意把那个钩子做成<strong>可执行文件</strong>，干啥呢，就是把你的那个仓库放到/var/www/hexo里面去</li>\n</ul>\n<h3 id=\"本地操作\"><a class=\"markdownIt-Anchor\" href=\"#本地操作\"></a> 本地操作</h3>\n<blockquote>\n<p>改下那个_config.yml里面的那个部署的地址就好了</p>\n</blockquote>\n<h3 id=\"阿里云操作\"><a class=\"markdownIt-Anchor\" href=\"#阿里云操作\"></a> 阿里云操作</h3>\n<blockquote>\n<p>你要去开下那个80端口。<br>\n再改下那个你的域名映射</p>\n</blockquote>\n<h3 id=\"备案\"><a class=\"markdownIt-Anchor\" href=\"#备案\"></a> 备案</h3>\n<blockquote>\n<p>为啥不知道，但是好像确实要去搞下。不然可能会被查水表。反正旁边的人都搞了</p>\n</blockquote>\n","site":{"data":{}},"excerpt":"","more":"<h2 id=\"把博客放到自己得服务器上\"><a class=\"markdownIt-Anchor\" href=\"#把博客放到自己得服务器上\"></a> 把博客放到自己得服务器上</h2>\n<blockquote>\n<p>最近搞了个服务器，其实在寒假就搞了一个腾讯云，但是啊，这个首付确实还挺便宜的，但是续费的时候要我1000块，这就很难受了。然后听别人说的就去搞了个阿里云。之前自己博客是买了个域名放在了github送的那个小服务器上，能用，但是感觉就有点奇怪。</p>\n</blockquote>\n<h3 id=\"首先啊\"><a class=\"markdownIt-Anchor\" href=\"#首先啊\"></a> 首先啊</h3>\n<blockquote>\n<p>我是从hexo+github起步的。首先你得知道hexo如何在本地搭建那个博客得。网上其实有很多得教程，但是啊，感觉还是挺奇怪得，很多说得不是很详细，很多到底是本地操作还是服务器端得呢。其实搞清楚后，东西也不是很多。总结来说，一个是服务器上，你要做个git仓库，然后安装下web服务器，然后就没了，在本地，你要做得就是改下你的那个hexo得部署，之前你是放在github得那个地方，现在就是放在本地就完事了。</p>\n</blockquote>\n<h3 id=\"服务器上的操作\"><a class=\"markdownIt-Anchor\" href=\"#服务器上的操作\"></a> 服务器上的操作</h3>\n<h4 id=\"hexo有关\"><a class=\"markdownIt-Anchor\" href=\"#hexo有关\"></a> hexo有关</h4>\n<blockquote>\n<p>我们之前把hexo的博客放在那个github的服务器上，我们其实什么插件都不用装，把文件直接push到服务器上就可以了，再加一个CANME就好了，这说明啥，这说明我们的那个网站，其实就是个静态的网页，打开的那种。<strong>唉，说到这里其实我就有一个问题了，我们的博客在hexo g静态文件生成的时候，是有静态文件的，里面有一个index.html你要是直接打开，你会发现gg 思密达，但是你要放在web服务器上就能渲染的很好。倒是打破了我对web服务器的理解</strong>然后任务就很明显，把hexo的静态文件放到服务器上的web服务器上就完事了。</p>\n</blockquote>\n<h4 id=\"git用户\"><a class=\"markdownIt-Anchor\" href=\"#git用户\"></a> git用户</h4>\n<blockquote>\n<p>这个用户，我在一开始是觉得奇怪的。没啥用的啊，搞个git的插件就行了。实际上，确实是这样，没啥用，唯一的用处在于那个，我们把博客推送到github服务器上，不是不用密码吗，是因为我们直接给了ssh的权限，这个的用处好像也就在这里了，对这个用户，我们可以放大点权限，让我们博客直接送过去，不然就会有权限限制。很多博客都是这样说的，那我就这样做了。具体的做法就是</p>\n</blockquote>\n<ul>\n<li>创建用户</li>\n<li>给权限[这个挺重要的，注意下]</li>\n<li>建立ssh的信任问题</li>\n<li>创建一个仓库</li>\n</ul>\n<h4 id=\"web服务器\"><a class=\"markdownIt-Anchor\" href=\"#web服务器\"></a> web服务器</h4>\n<blockquote>\n<p>这个干啥的呢，自己百度把。我用的是apache服务器，然后这个服务器需要做啥呢</p>\n</blockquote>\n<ul>\n<li>改默认访问网页</li>\n<li>建立一个/var/www/hexo的文件，把默认网页访问改成这个。记得把这个文件的权限改成git可以动的。</li>\n<li>在那个git用户下面，对那个空仓库，做一个钩子，这个你要注意把那个钩子做成<strong>可执行文件</strong>，干啥呢，就是把你的那个仓库放到/var/www/hexo里面去</li>\n</ul>\n<h3 id=\"本地操作\"><a class=\"markdownIt-Anchor\" href=\"#本地操作\"></a> 本地操作</h3>\n<blockquote>\n<p>改下那个_config.yml里面的那个部署的地址就好了</p>\n</blockquote>\n<h3 id=\"阿里云操作\"><a class=\"markdownIt-Anchor\" href=\"#阿里云操作\"></a> 阿里云操作</h3>\n<blockquote>\n<p>你要去开下那个80端口。<br>\n再改下那个你的域名映射</p>\n</blockquote>\n<h3 id=\"备案\"><a class=\"markdownIt-Anchor\" href=\"#备案\"></a> 备案</h3>\n<blockquote>\n<p>为啥不知道，但是好像确实要去搞下。不然可能会被查水表。反正旁边的人都搞了</p>\n</blockquote>\n"},{"title":"博弈论[之前看博弈的一些理解]","_content":"\n# 博弈方面的一些看法\n\n> 博弈这个玩意是真的烦，会的时候是弱智题不会的时候他妈天方夜谭。  \n\n说下个人的看法以及各种题型\n\n## 主要的解题思想\n\n官方说的是通过必败点和必胜点来判定\n先通过必败点来推，直接来看必胜点，把问题抽象成图 把状态抽象成点，必败点就是先手必败点，然后通过必败点能走到的搞成必胜点，如过有一个状态没有走过 而且他后面的路都是必胜点那么他就是必败点。感觉就像dp一样，记忆化搜索。\n当然题目不可能出的那么简单的。\n不过根据雄爷定理，万事不离期宗，掌握基本，扩展自己去发掘。\n\n## 主要的题型\n#### 巴什博弈\n这个是最简单的博弈，就是一堆东西，每个人自己能拿1-n件，谁最后一个拿完谁赢，这个是最简单的，不记录。\n#### 威佐夫博弈\n有两堆各若干个物品，两个人轮流从某一堆或同时从两堆中取同样多的物品，规定每次至少取一个，多者不限，最后取光者得胜。\n这个的解题思路在于通过前面的那个np问题来解决，用局势来思考这些问题，前几个局势在于(0,0),(1,2),(3,5),(4,7).....然后一些大佬就总结出了一些牛逼的结论( ak,bk),`ak=k*(spat(5)+1)/2 , bk = ak+k`人才。\n#### Fibonacci博弈\n有一堆个数为n的石子，游戏双方轮流取石子，满足：\n1. 先手不能在第一次把所有的石子取完；\n2. 之后每次可以取的石子数介于1到对手刚取的石子数的2倍之间（包含1和对手刚取的石子数的2倍）。 约定取走最后一个石子的人为赢家。  \n> 这个的解决办法涉及到齐肯多夫定理不去了解。没办法本人太笨\n\n结论是 `当n为Fibonacci数时，先手必败`\n\n#### 尼姆博弈\n有三堆各若干个物品，两个人轮流从某一堆取任意多的物品，规定每次至少取一个，多者不限，最后取光者得胜。\n这个博弈有点意思 他的`必败点的局势在于(a,b,c) a^b^c = 0`\n\n> 不过不换怎么说，注意他们的游戏方式 这只是最基础的几种博弈，方法都是通过前面的那个基础来进行扩展的\n\n#### SG函数\n这个在看之前感觉很高级但是啊，好像也就是一个dp的过程，通过一个必败点，看成起点然后，那个方法看成通向下一个起点的路，然后找所有能直接到这个必败点的必胜点。好像也就那么回事。好像能解决的都是小数字题这是一个板子，f里面存的是方法，多堆问题可以转化成异或来解决。\n```cpp\nvoid getSG(int n){\n    int i,j;\n    memset(SG,0,sizeof(SG));\n    for(i = 1; i <= n; i++){\n        memset(S,0,sizeof(S));\n        for(j = 0; f[j] <= i && j <= N; j++)\n            S[SG[i-f[j]]] = 1;\n        for(j = 0;;j++) if(!S[j]){\n            SG[i] = j;\n            break;\n        }\n    }\n}\n```\n## 解题的方法\n* 1　：相信自己的第一感觉\n* 2　：博弈都会和一些特别的数搭边 ， 所以第一件事坑定是分析局势然后找找看是不是有特别的意义，像什么 卡特兰数，fib数列 ，幂次方，异或的值是否为0；\n* 3 : 不挂怎么说，记得打表。\n","source":"_posts/博弈.md","raw":"---\ntitle: 博弈论[之前看博弈的一些理解]\ntags: [ACM,博弈]\n---\n\n# 博弈方面的一些看法\n\n> 博弈这个玩意是真的烦，会的时候是弱智题不会的时候他妈天方夜谭。  \n\n说下个人的看法以及各种题型\n\n## 主要的解题思想\n\n官方说的是通过必败点和必胜点来判定\n先通过必败点来推，直接来看必胜点，把问题抽象成图 把状态抽象成点，必败点就是先手必败点，然后通过必败点能走到的搞成必胜点，如过有一个状态没有走过 而且他后面的路都是必胜点那么他就是必败点。感觉就像dp一样，记忆化搜索。\n当然题目不可能出的那么简单的。\n不过根据雄爷定理，万事不离期宗，掌握基本，扩展自己去发掘。\n\n## 主要的题型\n#### 巴什博弈\n这个是最简单的博弈，就是一堆东西，每个人自己能拿1-n件，谁最后一个拿完谁赢，这个是最简单的，不记录。\n#### 威佐夫博弈\n有两堆各若干个物品，两个人轮流从某一堆或同时从两堆中取同样多的物品，规定每次至少取一个，多者不限，最后取光者得胜。\n这个的解题思路在于通过前面的那个np问题来解决，用局势来思考这些问题，前几个局势在于(0,0),(1,2),(3,5),(4,7).....然后一些大佬就总结出了一些牛逼的结论( ak,bk),`ak=k*(spat(5)+1)/2 , bk = ak+k`人才。\n#### Fibonacci博弈\n有一堆个数为n的石子，游戏双方轮流取石子，满足：\n1. 先手不能在第一次把所有的石子取完；\n2. 之后每次可以取的石子数介于1到对手刚取的石子数的2倍之间（包含1和对手刚取的石子数的2倍）。 约定取走最后一个石子的人为赢家。  \n> 这个的解决办法涉及到齐肯多夫定理不去了解。没办法本人太笨\n\n结论是 `当n为Fibonacci数时，先手必败`\n\n#### 尼姆博弈\n有三堆各若干个物品，两个人轮流从某一堆取任意多的物品，规定每次至少取一个，多者不限，最后取光者得胜。\n这个博弈有点意思 他的`必败点的局势在于(a,b,c) a^b^c = 0`\n\n> 不过不换怎么说，注意他们的游戏方式 这只是最基础的几种博弈，方法都是通过前面的那个基础来进行扩展的\n\n#### SG函数\n这个在看之前感觉很高级但是啊，好像也就是一个dp的过程，通过一个必败点，看成起点然后，那个方法看成通向下一个起点的路，然后找所有能直接到这个必败点的必胜点。好像也就那么回事。好像能解决的都是小数字题这是一个板子，f里面存的是方法，多堆问题可以转化成异或来解决。\n```cpp\nvoid getSG(int n){\n    int i,j;\n    memset(SG,0,sizeof(SG));\n    for(i = 1; i <= n; i++){\n        memset(S,0,sizeof(S));\n        for(j = 0; f[j] <= i && j <= N; j++)\n            S[SG[i-f[j]]] = 1;\n        for(j = 0;;j++) if(!S[j]){\n            SG[i] = j;\n            break;\n        }\n    }\n}\n```\n## 解题的方法\n* 1　：相信自己的第一感觉\n* 2　：博弈都会和一些特别的数搭边 ， 所以第一件事坑定是分析局势然后找找看是不是有特别的意义，像什么 卡特兰数，fib数列 ，幂次方，异或的值是否为0；\n* 3 : 不挂怎么说，记得打表。\n","slug":"博弈","published":1,"date":"2018-10-05T06:00:51.269Z","updated":"2018-10-23T04:54:11.975Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjtravwr3000534ugyzd28pek","content":"<h1 id=\"博弈方面的一些看法\"><a class=\"markdownIt-Anchor\" href=\"#博弈方面的一些看法\"></a> 博弈方面的一些看法</h1>\n<blockquote>\n<p>博弈这个玩意是真的烦，会的时候是弱智题不会的时候他妈天方夜谭。</p>\n</blockquote>\n<p>说下个人的看法以及各种题型</p>\n<h2 id=\"主要的解题思想\"><a class=\"markdownIt-Anchor\" href=\"#主要的解题思想\"></a> 主要的解题思想</h2>\n<p>官方说的是通过必败点和必胜点来判定<br>\n先通过必败点来推，直接来看必胜点，把问题抽象成图 把状态抽象成点，必败点就是先手必败点，然后通过必败点能走到的搞成必胜点，如过有一个状态没有走过 而且他后面的路都是必胜点那么他就是必败点。感觉就像dp一样，记忆化搜索。<br>\n当然题目不可能出的那么简单的。<br>\n不过根据雄爷定理，万事不离期宗，掌握基本，扩展自己去发掘。</p>\n<h2 id=\"主要的题型\"><a class=\"markdownIt-Anchor\" href=\"#主要的题型\"></a> 主要的题型</h2>\n<h4 id=\"巴什博弈\"><a class=\"markdownIt-Anchor\" href=\"#巴什博弈\"></a> 巴什博弈</h4>\n<p>这个是最简单的博弈，就是一堆东西，每个人自己能拿1-n件，谁最后一个拿完谁赢，这个是最简单的，不记录。</p>\n<h4 id=\"威佐夫博弈\"><a class=\"markdownIt-Anchor\" href=\"#威佐夫博弈\"></a> 威佐夫博弈</h4>\n<p>有两堆各若干个物品，两个人轮流从某一堆或同时从两堆中取同样多的物品，规定每次至少取一个，多者不限，最后取光者得胜。<br>\n这个的解题思路在于通过前面的那个np问题来解决，用局势来思考这些问题，前几个局势在于(0,0),(1,2),(3,5),(4,7)…然后一些大佬就总结出了一些牛逼的结论( ak,bk),<code>ak=k*(spat(5)+1)/2 , bk = ak+k</code>人才。</p>\n<h4 id=\"fibonacci博弈\"><a class=\"markdownIt-Anchor\" href=\"#fibonacci博弈\"></a> Fibonacci博弈</h4>\n<p>有一堆个数为n的石子，游戏双方轮流取石子，满足：</p>\n<ol>\n<li>先手不能在第一次把所有的石子取完；</li>\n<li>之后每次可以取的石子数介于1到对手刚取的石子数的2倍之间（包含1和对手刚取的石子数的2倍）。 约定取走最后一个石子的人为赢家。</li>\n</ol>\n<blockquote>\n<p>这个的解决办法涉及到齐肯多夫定理不去了解。没办法本人太笨</p>\n</blockquote>\n<p>结论是 <code>当n为Fibonacci数时，先手必败</code></p>\n<h4 id=\"尼姆博弈\"><a class=\"markdownIt-Anchor\" href=\"#尼姆博弈\"></a> 尼姆博弈</h4>\n<p>有三堆各若干个物品，两个人轮流从某一堆取任意多的物品，规定每次至少取一个，多者不限，最后取光者得胜。<br>\n这个博弈有点意思 他的<code>必败点的局势在于(a,b,c) a^b^c = 0</code></p>\n<blockquote>\n<p>不过不换怎么说，注意他们的游戏方式 这只是最基础的几种博弈，方法都是通过前面的那个基础来进行扩展的</p>\n</blockquote>\n<h4 id=\"sg函数\"><a class=\"markdownIt-Anchor\" href=\"#sg函数\"></a> SG函数</h4>\n<p>这个在看之前感觉很高级但是啊，好像也就是一个dp的过程，通过一个必败点，看成起点然后，那个方法看成通向下一个起点的路，然后找所有能直接到这个必败点的必胜点。好像也就那么回事。好像能解决的都是小数字题这是一个板子，f里面存的是方法，多堆问题可以转化成异或来解决。</p>\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">getSG</span><span class=\"params\">(<span class=\"keyword\">int</span> n)</span></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">int</span> i,j;</span><br><span class=\"line\">    <span class=\"built_in\">memset</span>(SG,<span class=\"number\">0</span>,<span class=\"keyword\">sizeof</span>(SG));</span><br><span class=\"line\">    <span class=\"keyword\">for</span>(i = <span class=\"number\">1</span>; i &lt;= n; i++)&#123;</span><br><span class=\"line\">        <span class=\"built_in\">memset</span>(S,<span class=\"number\">0</span>,<span class=\"keyword\">sizeof</span>(S));</span><br><span class=\"line\">        <span class=\"keyword\">for</span>(j = <span class=\"number\">0</span>; f[j] &lt;= i &amp;&amp; j &lt;= N; j++)</span><br><span class=\"line\">            S[SG[i-f[j]]] = <span class=\"number\">1</span>;</span><br><span class=\"line\">        <span class=\"keyword\">for</span>(j = <span class=\"number\">0</span>;;j++) <span class=\"keyword\">if</span>(!S[j])&#123;</span><br><span class=\"line\">            SG[i] = j;</span><br><span class=\"line\">            <span class=\"keyword\">break</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h2 id=\"解题的方法\"><a class=\"markdownIt-Anchor\" href=\"#解题的方法\"></a> 解题的方法</h2>\n<ul>\n<li>1　：相信自己的第一感觉</li>\n<li>2　：博弈都会和一些特别的数搭边 ， 所以第一件事坑定是分析局势然后找找看是不是有特别的意义，像什么 卡特兰数，fib数列 ，幂次方，异或的值是否为0；</li>\n<li>3 : 不挂怎么说，记得打表。</li>\n</ul>\n","site":{"data":{}},"excerpt":"","more":"<h1 id=\"博弈方面的一些看法\"><a class=\"markdownIt-Anchor\" href=\"#博弈方面的一些看法\"></a> 博弈方面的一些看法</h1>\n<blockquote>\n<p>博弈这个玩意是真的烦，会的时候是弱智题不会的时候他妈天方夜谭。</p>\n</blockquote>\n<p>说下个人的看法以及各种题型</p>\n<h2 id=\"主要的解题思想\"><a class=\"markdownIt-Anchor\" href=\"#主要的解题思想\"></a> 主要的解题思想</h2>\n<p>官方说的是通过必败点和必胜点来判定<br>\n先通过必败点来推，直接来看必胜点，把问题抽象成图 把状态抽象成点，必败点就是先手必败点，然后通过必败点能走到的搞成必胜点，如过有一个状态没有走过 而且他后面的路都是必胜点那么他就是必败点。感觉就像dp一样，记忆化搜索。<br>\n当然题目不可能出的那么简单的。<br>\n不过根据雄爷定理，万事不离期宗，掌握基本，扩展自己去发掘。</p>\n<h2 id=\"主要的题型\"><a class=\"markdownIt-Anchor\" href=\"#主要的题型\"></a> 主要的题型</h2>\n<h4 id=\"巴什博弈\"><a class=\"markdownIt-Anchor\" href=\"#巴什博弈\"></a> 巴什博弈</h4>\n<p>这个是最简单的博弈，就是一堆东西，每个人自己能拿1-n件，谁最后一个拿完谁赢，这个是最简单的，不记录。</p>\n<h4 id=\"威佐夫博弈\"><a class=\"markdownIt-Anchor\" href=\"#威佐夫博弈\"></a> 威佐夫博弈</h4>\n<p>有两堆各若干个物品，两个人轮流从某一堆或同时从两堆中取同样多的物品，规定每次至少取一个，多者不限，最后取光者得胜。<br>\n这个的解题思路在于通过前面的那个np问题来解决，用局势来思考这些问题，前几个局势在于(0,0),(1,2),(3,5),(4,7)…然后一些大佬就总结出了一些牛逼的结论( ak,bk),<code>ak=k*(spat(5)+1)/2 , bk = ak+k</code>人才。</p>\n<h4 id=\"fibonacci博弈\"><a class=\"markdownIt-Anchor\" href=\"#fibonacci博弈\"></a> Fibonacci博弈</h4>\n<p>有一堆个数为n的石子，游戏双方轮流取石子，满足：</p>\n<ol>\n<li>先手不能在第一次把所有的石子取完；</li>\n<li>之后每次可以取的石子数介于1到对手刚取的石子数的2倍之间（包含1和对手刚取的石子数的2倍）。 约定取走最后一个石子的人为赢家。</li>\n</ol>\n<blockquote>\n<p>这个的解决办法涉及到齐肯多夫定理不去了解。没办法本人太笨</p>\n</blockquote>\n<p>结论是 <code>当n为Fibonacci数时，先手必败</code></p>\n<h4 id=\"尼姆博弈\"><a class=\"markdownIt-Anchor\" href=\"#尼姆博弈\"></a> 尼姆博弈</h4>\n<p>有三堆各若干个物品，两个人轮流从某一堆取任意多的物品，规定每次至少取一个，多者不限，最后取光者得胜。<br>\n这个博弈有点意思 他的<code>必败点的局势在于(a,b,c) a^b^c = 0</code></p>\n<blockquote>\n<p>不过不换怎么说，注意他们的游戏方式 这只是最基础的几种博弈，方法都是通过前面的那个基础来进行扩展的</p>\n</blockquote>\n<h4 id=\"sg函数\"><a class=\"markdownIt-Anchor\" href=\"#sg函数\"></a> SG函数</h4>\n<p>这个在看之前感觉很高级但是啊，好像也就是一个dp的过程，通过一个必败点，看成起点然后，那个方法看成通向下一个起点的路，然后找所有能直接到这个必败点的必胜点。好像也就那么回事。好像能解决的都是小数字题这是一个板子，f里面存的是方法，多堆问题可以转化成异或来解决。</p>\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">getSG</span><span class=\"params\">(<span class=\"keyword\">int</span> n)</span></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">int</span> i,j;</span><br><span class=\"line\">    <span class=\"built_in\">memset</span>(SG,<span class=\"number\">0</span>,<span class=\"keyword\">sizeof</span>(SG));</span><br><span class=\"line\">    <span class=\"keyword\">for</span>(i = <span class=\"number\">1</span>; i &lt;= n; i++)&#123;</span><br><span class=\"line\">        <span class=\"built_in\">memset</span>(S,<span class=\"number\">0</span>,<span class=\"keyword\">sizeof</span>(S));</span><br><span class=\"line\">        <span class=\"keyword\">for</span>(j = <span class=\"number\">0</span>; f[j] &lt;= i &amp;&amp; j &lt;= N; j++)</span><br><span class=\"line\">            S[SG[i-f[j]]] = <span class=\"number\">1</span>;</span><br><span class=\"line\">        <span class=\"keyword\">for</span>(j = <span class=\"number\">0</span>;;j++) <span class=\"keyword\">if</span>(!S[j])&#123;</span><br><span class=\"line\">            SG[i] = j;</span><br><span class=\"line\">            <span class=\"keyword\">break</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h2 id=\"解题的方法\"><a class=\"markdownIt-Anchor\" href=\"#解题的方法\"></a> 解题的方法</h2>\n<ul>\n<li>1　：相信自己的第一感觉</li>\n<li>2　：博弈都会和一些特别的数搭边 ， 所以第一件事坑定是分析局势然后找找看是不是有特别的意义，像什么 卡特兰数，fib数列 ，幂次方，异或的值是否为0；</li>\n<li>3 : 不挂怎么说，记得打表。</li>\n</ul>\n"},{"title":"把自己的电脑配成服务器","date":"2019-01-01T07:54:00.000Z","_content":"\n# 配一台用来玩的服务器\n\n> 环境：ubuntu 18.04 \n> 物理设备：网线\n\n哎呀，最近总是和服务器的东西挂上勾，网上的服务器，租一个一年要300，400左右的样子，学生党，想了想，好像也就一个博客，也就懒的买了(没钱，打扰了)；然乎老师刚好给了一台笔记本让我们搭服务器，就玩玩呗。\n\n### 主机设置\n\n我用的是ubuntu18.04的系统，首先，ubuntu自带ssh的功能，但是仅限于连接，无法被连接，所以第一步是下载ssh的服务端。\n\n```powershell\nsudo apt-get update\nsudo apt-get install openssh-server\n```\n装好后,你可以通过那个\n```powershell\nps -e | grep ssh\n```\n来查看是否在运行。这个时候，ssh的服务端就在默认端口进行监听，默认在22端口。理论上你这个时候就可以去访问了。你可以用你的那个内网ip去访问。ip分为内网ip和外网ip;内网ip是路由器分配给你这台机器的，所以，在同一个路由器下的机器，可以通过内网ip进行访问。\n在ubuntu下，你可以通过`ifconfig`去查询你的内网ip,然后用你其他的机器通过\n```powershell\nssh username@ip -p 22\n```\n其中username是你的用户名，ip是你的内网IP地址，-p 表示的连接22的端口。\n\n### 路由器设置\n> 唉，这个时候就需要通过去处理你的外网ip，来让其他的网络端来访问。这个时候也就凸显了网线的重要性。好像是说，用wifi登陆你的ip会发生变化。就算绑了mac地址。\n1. 进入路由器管理员界面。\n2. 把你的ip和mac绑定。\n3. 规定转发规则，在虚拟服务器里，去弄一下转发端口。你配的是什么端口，就开哪个端口。\n4. 调设置，让外网访问。搞完前面，你会发现外网还是访问不了。我之前就卡了好久，网上也不说清楚，你在dmz主机设置里面，把你要给外网看的IP加上，不过我这边不知道为什么，只能开一个。\n\n> 然后就结束了。其中虚拟服务器，那个外部端口内部端口是这样说的，我认为：你外网通过哪个端口访问到你的ip，你的路由器自动转化成，内网的哪台主机的哪个端口，比如外部8888内部22，你在外网就通过连接8888这个端口来处理。\n","source":"_posts/把自己的电脑配成服务器.md","raw":"---\ntitle: 把自己的电脑配成服务器\ndate: 2019-1-1 15:54:00\n---\n\n# 配一台用来玩的服务器\n\n> 环境：ubuntu 18.04 \n> 物理设备：网线\n\n哎呀，最近总是和服务器的东西挂上勾，网上的服务器，租一个一年要300，400左右的样子，学生党，想了想，好像也就一个博客，也就懒的买了(没钱，打扰了)；然乎老师刚好给了一台笔记本让我们搭服务器，就玩玩呗。\n\n### 主机设置\n\n我用的是ubuntu18.04的系统，首先，ubuntu自带ssh的功能，但是仅限于连接，无法被连接，所以第一步是下载ssh的服务端。\n\n```powershell\nsudo apt-get update\nsudo apt-get install openssh-server\n```\n装好后,你可以通过那个\n```powershell\nps -e | grep ssh\n```\n来查看是否在运行。这个时候，ssh的服务端就在默认端口进行监听，默认在22端口。理论上你这个时候就可以去访问了。你可以用你的那个内网ip去访问。ip分为内网ip和外网ip;内网ip是路由器分配给你这台机器的，所以，在同一个路由器下的机器，可以通过内网ip进行访问。\n在ubuntu下，你可以通过`ifconfig`去查询你的内网ip,然后用你其他的机器通过\n```powershell\nssh username@ip -p 22\n```\n其中username是你的用户名，ip是你的内网IP地址，-p 表示的连接22的端口。\n\n### 路由器设置\n> 唉，这个时候就需要通过去处理你的外网ip，来让其他的网络端来访问。这个时候也就凸显了网线的重要性。好像是说，用wifi登陆你的ip会发生变化。就算绑了mac地址。\n1. 进入路由器管理员界面。\n2. 把你的ip和mac绑定。\n3. 规定转发规则，在虚拟服务器里，去弄一下转发端口。你配的是什么端口，就开哪个端口。\n4. 调设置，让外网访问。搞完前面，你会发现外网还是访问不了。我之前就卡了好久，网上也不说清楚，你在dmz主机设置里面，把你要给外网看的IP加上，不过我这边不知道为什么，只能开一个。\n\n> 然后就结束了。其中虚拟服务器，那个外部端口内部端口是这样说的，我认为：你外网通过哪个端口访问到你的ip，你的路由器自动转化成，内网的哪台主机的哪个端口，比如外部8888内部22，你在外网就通过连接8888这个端口来处理。\n","slug":"把自己的电脑配成服务器","published":1,"updated":"2019-01-01T10:17:10.410Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjtravwr4000634ugelkoe1nt","content":"<h1 id=\"配一台用来玩的服务器\"><a class=\"markdownIt-Anchor\" href=\"#配一台用来玩的服务器\"></a> 配一台用来玩的服务器</h1>\n<blockquote>\n<p>环境：ubuntu 18.04<br>\n物理设备：网线</p>\n</blockquote>\n<p>哎呀，最近总是和服务器的东西挂上勾，网上的服务器，租一个一年要300，400左右的样子，学生党，想了想，好像也就一个博客，也就懒的买了(没钱，打扰了)；然乎老师刚好给了一台笔记本让我们搭服务器，就玩玩呗。</p>\n<h3 id=\"主机设置\"><a class=\"markdownIt-Anchor\" href=\"#主机设置\"></a> 主机设置</h3>\n<p>我用的是ubuntu18.04的系统，首先，ubuntu自带ssh的功能，但是仅限于连接，无法被连接，所以第一步是下载ssh的服务端。</p>\n<figure class=\"highlight powershell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sudo apt-get update</span><br><span class=\"line\">sudo apt-get install openssh-server</span><br></pre></td></tr></table></figure>\n<p>装好后,你可以通过那个</p>\n<figure class=\"highlight powershell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ps -e | grep ssh</span><br></pre></td></tr></table></figure>\n<p>来查看是否在运行。这个时候，ssh的服务端就在默认端口进行监听，默认在22端口。理论上你这个时候就可以去访问了。你可以用你的那个内网ip去访问。ip分为内网ip和外网ip;内网ip是路由器分配给你这台机器的，所以，在同一个路由器下的机器，可以通过内网ip进行访问。<br>\n在ubuntu下，你可以通过<code>ifconfig</code>去查询你的内网ip,然后用你其他的机器通过</p>\n<figure class=\"highlight powershell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ssh username@ip -p <span class=\"number\">22</span></span><br></pre></td></tr></table></figure>\n<p>其中username是你的用户名，ip是你的内网IP地址，-p 表示的连接22的端口。</p>\n<h3 id=\"路由器设置\"><a class=\"markdownIt-Anchor\" href=\"#路由器设置\"></a> 路由器设置</h3>\n<blockquote>\n<p>唉，这个时候就需要通过去处理你的外网ip，来让其他的网络端来访问。这个时候也就凸显了网线的重要性。好像是说，用wifi登陆你的ip会发生变化。就算绑了mac地址。</p>\n</blockquote>\n<ol>\n<li>进入路由器管理员界面。</li>\n<li>把你的ip和mac绑定。</li>\n<li>规定转发规则，在虚拟服务器里，去弄一下转发端口。你配的是什么端口，就开哪个端口。</li>\n<li>调设置，让外网访问。搞完前面，你会发现外网还是访问不了。我之前就卡了好久，网上也不说清楚，你在dmz主机设置里面，把你要给外网看的IP加上，不过我这边不知道为什么，只能开一个。</li>\n</ol>\n<blockquote>\n<p>然后就结束了。其中虚拟服务器，那个外部端口内部端口是这样说的，我认为：你外网通过哪个端口访问到你的ip，你的路由器自动转化成，内网的哪台主机的哪个端口，比如外部8888内部22，你在外网就通过连接8888这个端口来处理。</p>\n</blockquote>\n","site":{"data":{}},"excerpt":"","more":"<h1 id=\"配一台用来玩的服务器\"><a class=\"markdownIt-Anchor\" href=\"#配一台用来玩的服务器\"></a> 配一台用来玩的服务器</h1>\n<blockquote>\n<p>环境：ubuntu 18.04<br>\n物理设备：网线</p>\n</blockquote>\n<p>哎呀，最近总是和服务器的东西挂上勾，网上的服务器，租一个一年要300，400左右的样子，学生党，想了想，好像也就一个博客，也就懒的买了(没钱，打扰了)；然乎老师刚好给了一台笔记本让我们搭服务器，就玩玩呗。</p>\n<h3 id=\"主机设置\"><a class=\"markdownIt-Anchor\" href=\"#主机设置\"></a> 主机设置</h3>\n<p>我用的是ubuntu18.04的系统，首先，ubuntu自带ssh的功能，但是仅限于连接，无法被连接，所以第一步是下载ssh的服务端。</p>\n<figure class=\"highlight powershell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sudo apt-get update</span><br><span class=\"line\">sudo apt-get install openssh-server</span><br></pre></td></tr></table></figure>\n<p>装好后,你可以通过那个</p>\n<figure class=\"highlight powershell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ps -e | grep ssh</span><br></pre></td></tr></table></figure>\n<p>来查看是否在运行。这个时候，ssh的服务端就在默认端口进行监听，默认在22端口。理论上你这个时候就可以去访问了。你可以用你的那个内网ip去访问。ip分为内网ip和外网ip;内网ip是路由器分配给你这台机器的，所以，在同一个路由器下的机器，可以通过内网ip进行访问。<br>\n在ubuntu下，你可以通过<code>ifconfig</code>去查询你的内网ip,然后用你其他的机器通过</p>\n<figure class=\"highlight powershell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ssh username@ip -p <span class=\"number\">22</span></span><br></pre></td></tr></table></figure>\n<p>其中username是你的用户名，ip是你的内网IP地址，-p 表示的连接22的端口。</p>\n<h3 id=\"路由器设置\"><a class=\"markdownIt-Anchor\" href=\"#路由器设置\"></a> 路由器设置</h3>\n<blockquote>\n<p>唉，这个时候就需要通过去处理你的外网ip，来让其他的网络端来访问。这个时候也就凸显了网线的重要性。好像是说，用wifi登陆你的ip会发生变化。就算绑了mac地址。</p>\n</blockquote>\n<ol>\n<li>进入路由器管理员界面。</li>\n<li>把你的ip和mac绑定。</li>\n<li>规定转发规则，在虚拟服务器里，去弄一下转发端口。你配的是什么端口，就开哪个端口。</li>\n<li>调设置，让外网访问。搞完前面，你会发现外网还是访问不了。我之前就卡了好久，网上也不说清楚，你在dmz主机设置里面，把你要给外网看的IP加上，不过我这边不知道为什么，只能开一个。</li>\n</ol>\n<blockquote>\n<p>然后就结束了。其中虚拟服务器，那个外部端口内部端口是这样说的，我认为：你外网通过哪个端口访问到你的ip，你的路由器自动转化成，内网的哪台主机的哪个端口，比如外部8888内部22，你在外网就通过连接8888这个端口来处理。</p>\n</blockquote>\n"},{"title":"地图","date":"2019-02-28T04:30:16.000Z","_content":"## 地图的识别与应用作业\n\n### 行走路线\n![ada](https://res.cloudinary.com/ddq3wewxk/image/upload/v1551330360/1.png)\n\n > 这是驾车的路线，上海到泾县没有通高铁，只有大巴，大巴也是差不多需要5小时的时间，如果玩还是推荐自驾游，因为镇上没有什么好玩的，有趣的都在乡下。\n\n### 地理位置\n\n> 泾县，隶属于安徽省宣城市。古称猷州，位于安徽省东南部，宣城市境西部。东与宣州区、宁国市接壤；南与黄山市黄山区、旌德县毗连；西与池州青阳县交界；北与芜湖南陵县为邻，处长江中下游平原与皖南山区交接地带。\n\n> 作为一个年轻人来说，感觉在我们县活的特别舒服，我们靠山靠水，水相对外地的处理水来说，就很好喝，特别是在泡茶方面。\n\n### 吃喝玩乐\n\n> 作为一个泾县人，我乡下没怎么去过，所以吃的方面，我只能介绍一下镇上的吃的。\n\n#### 吃\n> 说起我们县的吃啊，我们这边没有什么特别引人瞩目的东西，但是我觉得泾县的早点是一绝，一晚面条，一份锅贴，加一个荷包蛋，再来份热豆浆，快哉。因为我家所在位置的原因，我在这介绍几个我常去的。\n![ada](https://res.cloudinary.com/ddq3wewxk/image/upload/v1551330360/2.png)推荐套餐，鸭血面，5个锅贴，一份臭干子\n![ada](https://res.cloudinary.com/ddq3wewxk/image/upload/v1551330360/3.png)一晚牛肉面\n简单但是好吃\n> 然后便是正餐，说实话，我觉得镇上的饭店做的都挺一般的，不如去吃点农家乐.泾县有点特色，比如茂林的 **膀**这个是啥呢，这个一般是取猪的后腿部分做出的一道菜，菜口味主要有两种，甜与咸，可以在做的时候选，这个一般都是在过年的时候才能订到，其他时间没去试过。但是我家每年过春节的时候都回去买一个回来啃。还有就是**茂林糊**，这个有点像胡辣汤，但是更浓，香，甜。其他的像什么糕点，说是特色，我是不喜欢吃。\n\n#### 玩\n> 玩的话主要有四个部分组成，一个赏风景，一个逛古街，一个怀红色，一个体验特色。\n\n- 赏风景：\n推荐去桃花潭![ada](https://res.cloudinary.com/ddq3wewxk/image/upload/v1551330361/4.png)\n\n- 逛古街：\n推荐去查济古镇![ada](https://res.cloudinary.com/ddq3wewxk/image/upload/v1551330361/5.png)\n赶紧去，趁商业气息还没浓烈起来\n\n- 怀红色：\n这就有很多了，云岭新四军旧址，镇上也有个烈士林园。\n\n- 体验特色：\n    1. 泾县有一个特色，就是宣纸，这个是我们的特产，来了可以去逛逛，有宣纸园让人体验的。\n    \n    2. 还有就是江南第一漂，这个在夏天可以去体验。我小时候那里的水特别清，特别干净，有种说法，说这里面的水可以喝，当然现在肯定不行了。","source":"_posts/地图.md","raw":"---\ntitle: 地图\ndate: 2019-02-28 12:30:16\ntags: [玩]\n---\n## 地图的识别与应用作业\n\n### 行走路线\n![ada](https://res.cloudinary.com/ddq3wewxk/image/upload/v1551330360/1.png)\n\n > 这是驾车的路线，上海到泾县没有通高铁，只有大巴，大巴也是差不多需要5小时的时间，如果玩还是推荐自驾游，因为镇上没有什么好玩的，有趣的都在乡下。\n\n### 地理位置\n\n> 泾县，隶属于安徽省宣城市。古称猷州，位于安徽省东南部，宣城市境西部。东与宣州区、宁国市接壤；南与黄山市黄山区、旌德县毗连；西与池州青阳县交界；北与芜湖南陵县为邻，处长江中下游平原与皖南山区交接地带。\n\n> 作为一个年轻人来说，感觉在我们县活的特别舒服，我们靠山靠水，水相对外地的处理水来说，就很好喝，特别是在泡茶方面。\n\n### 吃喝玩乐\n\n> 作为一个泾县人，我乡下没怎么去过，所以吃的方面，我只能介绍一下镇上的吃的。\n\n#### 吃\n> 说起我们县的吃啊，我们这边没有什么特别引人瞩目的东西，但是我觉得泾县的早点是一绝，一晚面条，一份锅贴，加一个荷包蛋，再来份热豆浆，快哉。因为我家所在位置的原因，我在这介绍几个我常去的。\n![ada](https://res.cloudinary.com/ddq3wewxk/image/upload/v1551330360/2.png)推荐套餐，鸭血面，5个锅贴，一份臭干子\n![ada](https://res.cloudinary.com/ddq3wewxk/image/upload/v1551330360/3.png)一晚牛肉面\n简单但是好吃\n> 然后便是正餐，说实话，我觉得镇上的饭店做的都挺一般的，不如去吃点农家乐.泾县有点特色，比如茂林的 **膀**这个是啥呢，这个一般是取猪的后腿部分做出的一道菜，菜口味主要有两种，甜与咸，可以在做的时候选，这个一般都是在过年的时候才能订到，其他时间没去试过。但是我家每年过春节的时候都回去买一个回来啃。还有就是**茂林糊**，这个有点像胡辣汤，但是更浓，香，甜。其他的像什么糕点，说是特色，我是不喜欢吃。\n\n#### 玩\n> 玩的话主要有四个部分组成，一个赏风景，一个逛古街，一个怀红色，一个体验特色。\n\n- 赏风景：\n推荐去桃花潭![ada](https://res.cloudinary.com/ddq3wewxk/image/upload/v1551330361/4.png)\n\n- 逛古街：\n推荐去查济古镇![ada](https://res.cloudinary.com/ddq3wewxk/image/upload/v1551330361/5.png)\n赶紧去，趁商业气息还没浓烈起来\n\n- 怀红色：\n这就有很多了，云岭新四军旧址，镇上也有个烈士林园。\n\n- 体验特色：\n    1. 泾县有一个特色，就是宣纸，这个是我们的特产，来了可以去逛逛，有宣纸园让人体验的。\n    \n    2. 还有就是江南第一漂，这个在夏天可以去体验。我小时候那里的水特别清，特别干净，有种说法，说这里面的水可以喝，当然现在肯定不行了。","slug":"地图","published":1,"updated":"2019-02-28T05:12:44.485Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjtravwr6000834ug4lzwgtht","content":"<h2 id=\"地图的识别与应用作业\"><a class=\"markdownIt-Anchor\" href=\"#地图的识别与应用作业\"></a> 地图的识别与应用作业</h2>\n<h3 id=\"行走路线\"><a class=\"markdownIt-Anchor\" href=\"#行走路线\"></a> 行走路线</h3>\n<p><img src=\"https://res.cloudinary.com/ddq3wewxk/image/upload/v1551330360/1.png\" alt=\"ada\"></p>\n<blockquote>\n<p>这是驾车的路线，上海到泾县没有通高铁，只有大巴，大巴也是差不多需要5小时的时间，如果玩还是推荐自驾游，因为镇上没有什么好玩的，有趣的都在乡下。</p>\n</blockquote>\n<h3 id=\"地理位置\"><a class=\"markdownIt-Anchor\" href=\"#地理位置\"></a> 地理位置</h3>\n<blockquote>\n<p>泾县，隶属于安徽省宣城市。古称猷州，位于安徽省东南部，宣城市境西部。东与宣州区、宁国市接壤；南与黄山市黄山区、旌德县毗连；西与池州青阳县交界；北与芜湖南陵县为邻，处长江中下游平原与皖南山区交接地带。</p>\n</blockquote>\n<blockquote>\n<p>作为一个年轻人来说，感觉在我们县活的特别舒服，我们靠山靠水，水相对外地的处理水来说，就很好喝，特别是在泡茶方面。</p>\n</blockquote>\n<h3 id=\"吃喝玩乐\"><a class=\"markdownIt-Anchor\" href=\"#吃喝玩乐\"></a> 吃喝玩乐</h3>\n<blockquote>\n<p>作为一个泾县人，我乡下没怎么去过，所以吃的方面，我只能介绍一下镇上的吃的。</p>\n</blockquote>\n<h4 id=\"吃\"><a class=\"markdownIt-Anchor\" href=\"#吃\"></a> 吃</h4>\n<blockquote>\n<p>说起我们县的吃啊，我们这边没有什么特别引人瞩目的东西，但是我觉得泾县的早点是一绝，一晚面条，一份锅贴，加一个荷包蛋，再来份热豆浆，快哉。因为我家所在位置的原因，我在这介绍几个我常去的。<br>\n<img src=\"https://res.cloudinary.com/ddq3wewxk/image/upload/v1551330360/2.png\" alt=\"ada\">推荐套餐，鸭血面，5个锅贴，一份臭干子<br>\n<img src=\"https://res.cloudinary.com/ddq3wewxk/image/upload/v1551330360/3.png\" alt=\"ada\">一晚牛肉面<br>\n简单但是好吃<br>\n然后便是正餐，说实话，我觉得镇上的饭店做的都挺一般的，不如去吃点农家乐.泾县有点特色，比如茂林的 <strong>膀</strong>这个是啥呢，这个一般是取猪的后腿部分做出的一道菜，菜口味主要有两种，甜与咸，可以在做的时候选，这个一般都是在过年的时候才能订到，其他时间没去试过。但是我家每年过春节的时候都回去买一个回来啃。还有就是<strong>茂林糊</strong>，这个有点像胡辣汤，但是更浓，香，甜。其他的像什么糕点，说是特色，我是不喜欢吃。</p>\n</blockquote>\n<h4 id=\"玩\"><a class=\"markdownIt-Anchor\" href=\"#玩\"></a> 玩</h4>\n<blockquote>\n<p>玩的话主要有四个部分组成，一个赏风景，一个逛古街，一个怀红色，一个体验特色。</p>\n</blockquote>\n<ul>\n<li>\n<p>赏风景：<br>\n推荐去桃花潭<img src=\"https://res.cloudinary.com/ddq3wewxk/image/upload/v1551330361/4.png\" alt=\"ada\"></p>\n</li>\n<li>\n<p>逛古街：<br>\n推荐去查济古镇<img src=\"https://res.cloudinary.com/ddq3wewxk/image/upload/v1551330361/5.png\" alt=\"ada\"><br>\n赶紧去，趁商业气息还没浓烈起来</p>\n</li>\n<li>\n<p>怀红色：<br>\n这就有很多了，云岭新四军旧址，镇上也有个烈士林园。</p>\n</li>\n<li>\n<p>体验特色：</p>\n<ol>\n<li>\n<p>泾县有一个特色，就是宣纸，这个是我们的特产，来了可以去逛逛，有宣纸园让人体验的。</p>\n</li>\n<li>\n<p>还有就是江南第一漂，这个在夏天可以去体验。我小时候那里的水特别清，特别干净，有种说法，说这里面的水可以喝，当然现在肯定不行了。</p>\n</li>\n</ol>\n</li>\n</ul>\n","site":{"data":{}},"excerpt":"","more":"<h2 id=\"地图的识别与应用作业\"><a class=\"markdownIt-Anchor\" href=\"#地图的识别与应用作业\"></a> 地图的识别与应用作业</h2>\n<h3 id=\"行走路线\"><a class=\"markdownIt-Anchor\" href=\"#行走路线\"></a> 行走路线</h3>\n<p><img src=\"https://res.cloudinary.com/ddq3wewxk/image/upload/v1551330360/1.png\" alt=\"ada\"></p>\n<blockquote>\n<p>这是驾车的路线，上海到泾县没有通高铁，只有大巴，大巴也是差不多需要5小时的时间，如果玩还是推荐自驾游，因为镇上没有什么好玩的，有趣的都在乡下。</p>\n</blockquote>\n<h3 id=\"地理位置\"><a class=\"markdownIt-Anchor\" href=\"#地理位置\"></a> 地理位置</h3>\n<blockquote>\n<p>泾县，隶属于安徽省宣城市。古称猷州，位于安徽省东南部，宣城市境西部。东与宣州区、宁国市接壤；南与黄山市黄山区、旌德县毗连；西与池州青阳县交界；北与芜湖南陵县为邻，处长江中下游平原与皖南山区交接地带。</p>\n</blockquote>\n<blockquote>\n<p>作为一个年轻人来说，感觉在我们县活的特别舒服，我们靠山靠水，水相对外地的处理水来说，就很好喝，特别是在泡茶方面。</p>\n</blockquote>\n<h3 id=\"吃喝玩乐\"><a class=\"markdownIt-Anchor\" href=\"#吃喝玩乐\"></a> 吃喝玩乐</h3>\n<blockquote>\n<p>作为一个泾县人，我乡下没怎么去过，所以吃的方面，我只能介绍一下镇上的吃的。</p>\n</blockquote>\n<h4 id=\"吃\"><a class=\"markdownIt-Anchor\" href=\"#吃\"></a> 吃</h4>\n<blockquote>\n<p>说起我们县的吃啊，我们这边没有什么特别引人瞩目的东西，但是我觉得泾县的早点是一绝，一晚面条，一份锅贴，加一个荷包蛋，再来份热豆浆，快哉。因为我家所在位置的原因，我在这介绍几个我常去的。<br>\n<img src=\"https://res.cloudinary.com/ddq3wewxk/image/upload/v1551330360/2.png\" alt=\"ada\">推荐套餐，鸭血面，5个锅贴，一份臭干子<br>\n<img src=\"https://res.cloudinary.com/ddq3wewxk/image/upload/v1551330360/3.png\" alt=\"ada\">一晚牛肉面<br>\n简单但是好吃<br>\n然后便是正餐，说实话，我觉得镇上的饭店做的都挺一般的，不如去吃点农家乐.泾县有点特色，比如茂林的 <strong>膀</strong>这个是啥呢，这个一般是取猪的后腿部分做出的一道菜，菜口味主要有两种，甜与咸，可以在做的时候选，这个一般都是在过年的时候才能订到，其他时间没去试过。但是我家每年过春节的时候都回去买一个回来啃。还有就是<strong>茂林糊</strong>，这个有点像胡辣汤，但是更浓，香，甜。其他的像什么糕点，说是特色，我是不喜欢吃。</p>\n</blockquote>\n<h4 id=\"玩\"><a class=\"markdownIt-Anchor\" href=\"#玩\"></a> 玩</h4>\n<blockquote>\n<p>玩的话主要有四个部分组成，一个赏风景，一个逛古街，一个怀红色，一个体验特色。</p>\n</blockquote>\n<ul>\n<li>\n<p>赏风景：<br>\n推荐去桃花潭<img src=\"https://res.cloudinary.com/ddq3wewxk/image/upload/v1551330361/4.png\" alt=\"ada\"></p>\n</li>\n<li>\n<p>逛古街：<br>\n推荐去查济古镇<img src=\"https://res.cloudinary.com/ddq3wewxk/image/upload/v1551330361/5.png\" alt=\"ada\"><br>\n赶紧去，趁商业气息还没浓烈起来</p>\n</li>\n<li>\n<p>怀红色：<br>\n这就有很多了，云岭新四军旧址，镇上也有个烈士林园。</p>\n</li>\n<li>\n<p>体验特色：</p>\n<ol>\n<li>\n<p>泾县有一个特色，就是宣纸，这个是我们的特产，来了可以去逛逛，有宣纸园让人体验的。</p>\n</li>\n<li>\n<p>还有就是江南第一漂，这个在夏天可以去体验。我小时候那里的水特别清，特别干净，有种说法，说这里面的水可以喝，当然现在肯定不行了。</p>\n</li>\n</ol>\n</li>\n</ul>\n"},{"title":"期望dp","_content":"\n## 期望dp\n&ensp;&ensp; 这个知识点，说来也可笑，作为一个dp，数学类型的选手，到现在才开始接触这个点，也是没谁了。最近做了几题，现在说下我个人对这个知识点的一些理解吧。   \n\n#### 题外话\n\n> &ensp;讲道理最近基本没怎么碰到过这个知识点。最近会碰到期望，概率啥的问题，但是很多都不是套路，拼的就是你能否想到。像多校赛中很多的问题，就不是套路能处理的。我也是无意中看到这个知识点，然后就刷了点水题，知道了一些处理的方法。  \n\n#### 一些重要的点\n\n1. 首先我们要确定方向\n\n> &ensp;我们之前写一些关于期望的概率的题的时候一般都是从左向右走，期望dp则是一般都是从屁股后面向前走。具体原因其实很大部分是和我们的dp定义密切相关。\n\n2. 确定dp表达式的含义\n\n> &ensp;dp写多了，很多情况写都是这样定义的，就是dp[i][j] 表示从基本到i，j这种情况所需要的消耗。在期望dp中一般是这样定义，比如说拿n个球，dp[i]表示已经拿了i个球，距离一共拿n个球，所要的期望。所以这里其实我们已经解释了为什么dp要从后往前走。\n\n3. dp公式的推导\n\n> &ensp;前面两个点，其实是期望dp的套路而已。后面真正难的点其实在于dp方程的确定，已经dp之间的推导. \n> &ensp;这个就不好说什么东西了，很多的公式推导其实主要还是要通过做题去提升你的一些感觉。dp嘛，有点随缘的。\n> &ensp;还有一点就是，有的时候这个dp不是线性递推，成了一个环，这个时候就需要用高斯消元去处理这个问题。\n\n\n#### 范围的题\n> 题我也是看网上别人的博客，然后加在一起的。\nhdu4405,poj2096,hdu3853,zoj3329,hdu2262,poj3744,poj3071,poj2151,zoj3380.\n","source":"_posts/期望dp.md","raw":"---\ntitle: 期望dp\ntags: [dp,ACM,期望]\n---\n\n## 期望dp\n&ensp;&ensp; 这个知识点，说来也可笑，作为一个dp，数学类型的选手，到现在才开始接触这个点，也是没谁了。最近做了几题，现在说下我个人对这个知识点的一些理解吧。   \n\n#### 题外话\n\n> &ensp;讲道理最近基本没怎么碰到过这个知识点。最近会碰到期望，概率啥的问题，但是很多都不是套路，拼的就是你能否想到。像多校赛中很多的问题，就不是套路能处理的。我也是无意中看到这个知识点，然后就刷了点水题，知道了一些处理的方法。  \n\n#### 一些重要的点\n\n1. 首先我们要确定方向\n\n> &ensp;我们之前写一些关于期望的概率的题的时候一般都是从左向右走，期望dp则是一般都是从屁股后面向前走。具体原因其实很大部分是和我们的dp定义密切相关。\n\n2. 确定dp表达式的含义\n\n> &ensp;dp写多了，很多情况写都是这样定义的，就是dp[i][j] 表示从基本到i，j这种情况所需要的消耗。在期望dp中一般是这样定义，比如说拿n个球，dp[i]表示已经拿了i个球，距离一共拿n个球，所要的期望。所以这里其实我们已经解释了为什么dp要从后往前走。\n\n3. dp公式的推导\n\n> &ensp;前面两个点，其实是期望dp的套路而已。后面真正难的点其实在于dp方程的确定，已经dp之间的推导. \n> &ensp;这个就不好说什么东西了，很多的公式推导其实主要还是要通过做题去提升你的一些感觉。dp嘛，有点随缘的。\n> &ensp;还有一点就是，有的时候这个dp不是线性递推，成了一个环，这个时候就需要用高斯消元去处理这个问题。\n\n\n#### 范围的题\n> 题我也是看网上别人的博客，然后加在一起的。\nhdu4405,poj2096,hdu3853,zoj3329,hdu2262,poj3744,poj3071,poj2151,zoj3380.\n","slug":"期望dp","published":1,"date":"2018-10-15T03:21:55.295Z","updated":"2018-10-15T03:27:17.588Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjtravwr7000934ugyhzwagfg","content":"<h2 id=\"期望dp\"><a class=\"markdownIt-Anchor\" href=\"#期望dp\"></a> 期望dp</h2>\n<p>   这个知识点，说来也可笑，作为一个dp，数学类型的选手，到现在才开始接触这个点，也是没谁了。最近做了几题，现在说下我个人对这个知识点的一些理解吧。</p>\n<h4 id=\"题外话\"><a class=\"markdownIt-Anchor\" href=\"#题外话\"></a> 题外话</h4>\n<blockquote>\n<p> 讲道理最近基本没怎么碰到过这个知识点。最近会碰到期望，概率啥的问题，但是很多都不是套路，拼的就是你能否想到。像多校赛中很多的问题，就不是套路能处理的。我也是无意中看到这个知识点，然后就刷了点水题，知道了一些处理的方法。</p>\n</blockquote>\n<h4 id=\"一些重要的点\"><a class=\"markdownIt-Anchor\" href=\"#一些重要的点\"></a> 一些重要的点</h4>\n<ol>\n<li>首先我们要确定方向</li>\n</ol>\n<blockquote>\n<p> 我们之前写一些关于期望的概率的题的时候一般都是从左向右走，期望dp则是一般都是从屁股后面向前走。具体原因其实很大部分是和我们的dp定义密切相关。</p>\n</blockquote>\n<ol start=\"2\">\n<li>确定dp表达式的含义</li>\n</ol>\n<blockquote>\n<p> dp写多了，很多情况写都是这样定义的，就是dp[i][j] 表示从基本到i，j这种情况所需要的消耗。在期望dp中一般是这样定义，比如说拿n个球，dp[i]表示已经拿了i个球，距离一共拿n个球，所要的期望。所以这里其实我们已经解释了为什么dp要从后往前走。</p>\n</blockquote>\n<ol start=\"3\">\n<li>dp公式的推导</li>\n</ol>\n<blockquote>\n<p> 前面两个点，其实是期望dp的套路而已。后面真正难的点其实在于dp方程的确定，已经dp之间的推导.<br>\n 这个就不好说什么东西了，很多的公式推导其实主要还是要通过做题去提升你的一些感觉。dp嘛，有点随缘的。<br>\n 还有一点就是，有的时候这个dp不是线性递推，成了一个环，这个时候就需要用高斯消元去处理这个问题。</p>\n</blockquote>\n<h4 id=\"范围的题\"><a class=\"markdownIt-Anchor\" href=\"#范围的题\"></a> 范围的题</h4>\n<blockquote>\n<p>题我也是看网上别人的博客，然后加在一起的。<br>\nhdu4405,poj2096,hdu3853,zoj3329,hdu2262,poj3744,poj3071,poj2151,zoj3380.</p>\n</blockquote>\n","site":{"data":{}},"excerpt":"","more":"<h2 id=\"期望dp\"><a class=\"markdownIt-Anchor\" href=\"#期望dp\"></a> 期望dp</h2>\n<p>   这个知识点，说来也可笑，作为一个dp，数学类型的选手，到现在才开始接触这个点，也是没谁了。最近做了几题，现在说下我个人对这个知识点的一些理解吧。</p>\n<h4 id=\"题外话\"><a class=\"markdownIt-Anchor\" href=\"#题外话\"></a> 题外话</h4>\n<blockquote>\n<p> 讲道理最近基本没怎么碰到过这个知识点。最近会碰到期望，概率啥的问题，但是很多都不是套路，拼的就是你能否想到。像多校赛中很多的问题，就不是套路能处理的。我也是无意中看到这个知识点，然后就刷了点水题，知道了一些处理的方法。</p>\n</blockquote>\n<h4 id=\"一些重要的点\"><a class=\"markdownIt-Anchor\" href=\"#一些重要的点\"></a> 一些重要的点</h4>\n<ol>\n<li>首先我们要确定方向</li>\n</ol>\n<blockquote>\n<p> 我们之前写一些关于期望的概率的题的时候一般都是从左向右走，期望dp则是一般都是从屁股后面向前走。具体原因其实很大部分是和我们的dp定义密切相关。</p>\n</blockquote>\n<ol start=\"2\">\n<li>确定dp表达式的含义</li>\n</ol>\n<blockquote>\n<p> dp写多了，很多情况写都是这样定义的，就是dp[i][j] 表示从基本到i，j这种情况所需要的消耗。在期望dp中一般是这样定义，比如说拿n个球，dp[i]表示已经拿了i个球，距离一共拿n个球，所要的期望。所以这里其实我们已经解释了为什么dp要从后往前走。</p>\n</blockquote>\n<ol start=\"3\">\n<li>dp公式的推导</li>\n</ol>\n<blockquote>\n<p> 前面两个点，其实是期望dp的套路而已。后面真正难的点其实在于dp方程的确定，已经dp之间的推导.<br>\n 这个就不好说什么东西了，很多的公式推导其实主要还是要通过做题去提升你的一些感觉。dp嘛，有点随缘的。<br>\n 还有一点就是，有的时候这个dp不是线性递推，成了一个环，这个时候就需要用高斯消元去处理这个问题。</p>\n</blockquote>\n<h4 id=\"范围的题\"><a class=\"markdownIt-Anchor\" href=\"#范围的题\"></a> 范围的题</h4>\n<blockquote>\n<p>题我也是看网上别人的博客，然后加在一起的。<br>\nhdu4405,poj2096,hdu3853,zoj3329,hdu2262,poj3744,poj3071,poj2151,zoj3380.</p>\n</blockquote>\n"},{"title":"期望，概率套题","comments":1,"mathjax":true,"date":"2018-10-23T04:47:44.000Z","_content":"\n# 期望概率的一些水题   \n\n## Aeroplane chess \n[ hdu4405 ](http://acm.hdu.edu.cn/showproblem.php?pid=4405)\n### 描述\n >   Hzz loves aeroplane chess very much. The chess map contains N+1 grids labeled from 0 to N. Hzz starts at grid 0. For each step he throws a dice(a dice have six faces with equal probability to face up and the numbers on the faces are 1,2,3,4,5,6). When Hzz is at grid i and the dice number is x, he will moves to grid i+x. Hzz finishes the game when i+x is equal to or greater than N. \n >   There are also M flight lines on the chess map. The i-th flight line can help Hzz fly from grid Xi to Yi (0<Xi<Yi<=N) without throwing the dice. If there is another flight line from Yi, Hzz can take the flight line continuously. It is granted that there is no two or more flight lines start from the same grid. \n >   Please help Hzz calculate the expected dice throwing times to finish the game. \n\n### input\n> There are multiple test cases. \nEach test case contains several lines. \nThe first line contains two integers N(1≤N≤100000) and M(0≤M≤1000). \nThen M lines follow, each line contains two integers Xi,Yi(1≤Xi<Yi≤N).   \nThe input end with N=0, M=0. \n\n### output\n> For each test case in the input, you should output a line indicating the expected dice throwing times. Output should be rounded to 4 digits after decimal point. \n\n### sample input\n```\n2 0\n8 3\n2 4\n4 5\n7 8\n0 0\n```\n\n### sample output\n```\n1.1667\n2.3441\n```\n\n### 题目意思\n> 主要意思就是，有个人很爱玩飞行棋。他们在一张行为1列为n+1的棋盘上玩。然后他们有一个色子，色子有六个面，面上分别是1，2...，然后他们从0出发。其中这个棋盘上有m条飞机道，飞机道有两个口a,b(b>a);然后只要到了a那么它就会直接飞到b不用花费其他东西。现在就是问你从起点到终点需要丢多少次色子，求出这个期望。\n\n### 思路\n> - 首先看第一眼确定做法，期望dp.\n> - 然后就是确定dp表达式的意思。$ dp[i] $ 这个表示从第i个点到终点的期望\n> - 接着就是确定转移，以及初始状态。\n>>  1. dp[n] = 0,\n>>  2. dp[a] = dp[b] (如果有一条从a到b的飞机道).\n>>  3. dp[i] = $  \\sum_{j=1}^6  $    dp[i+j]/6  +1; \n\n### 代码\n```cpp\n// langman\n#include<bits/stdc++.h>\nusing namespace std;\n\n#define clr(shu,x) memset(shu,x,sizeof(shu))\n#define INF 0x3f3f3f3f\n#define pi acos(-1)\n#define loge exp(1)\n#define ll long long\n#define pb push_back\n#define c_fuck(x) cout<<\"Case \"<<x<<\":\"\n#define debug cout<<\"is there bug?\"<<endl\nconst int mod = 1e9+7;\nconst double eps = 1e-6;\n// 期望入门题\n// 网上说 概率dp一般是正着推 期望dp一般是倒过来退。\n// 好像有点道理\n// dp[i] 表式的是从i这个点 到第n个点所要用的期望。\ndouble dp[100010];\nint vis[100010];\nint main()\n{\n  // std::ios::sync_with_stdio(false);\n  // cin.tie(0);\n  // cout.tie(0);\n  int n,m;\n  while(scanf(\"%d%d\",&n,&m) == 2)\n  {\n    if(!m && !n) break;\n    for(int i = 0;i<=n+6;i++)\n    {\n      dp[i] = 0;\n      vis[i] = -1;\n    }\n    for(int i = 1;i<=m;i++)\n    {\n      int u,v;\n      scanf(\"%d%d\",&u,&v);\n      vis[u] = v;\n    }\n    for(int i = n-1;i>=0;i--)\n    {\n      if(vis[i] != -1)\n      {\n        dp[i] = dp[vis[i]];\n      }\n      else\n      {\n        for(int j = 1;j<=6;j++)\n        {\n          dp[i] += dp[i+j]/6.0;\n        }\n        dp[i]+=1;\n      }\n    }\n    printf(\"%.4lf\\n\",dp[0]);\n  }\n  return 0;\n}\n```\n \n## Where is the canteen\n[poj-3744](http://poj.org/problem?id=3744)\n### description\n> YYF is a couragous scout. Now he is on a dangerous mission which is to penetrate into the enemy's base. After overcoming a series difficulties, YYF is now at the start of enemy's famous \"mine road\". This is a very long road, on which there are numbers of mines. At first, YYF is at step one. For each step after that, YYF will walk one step with a probability of p, or jump two step with a probality of 1-p. Here is the task, given the place of each mine, please calculate the probality that YYF can go through the \"mine road\" safely.\n\n### input\n\n> The input contains many test cases ended with EOF.\nEach test case contains two lines.\nThe First line of each test case is N (1 ≤ N ≤ 10) and p (0.25 ≤ p ≤ 0.75) seperated by a single blank, standing for the number of mines and the probability to walk one step.\nThe Second line of each test case is N integer standing for the place of N mines. Each integer is in the range of [1, 100000000].\n\n### output\n\n> For each test case, output the probabilty in a single line with the precision to 7 digits after the decimal point.\n\n### Sample input\n```\n1 0.5\n2\n2 0.5\n2 4\n\n```\n### Sample output\n```\n0.5000000\n0.2500000\n```\n### 题面意思\n\n> 这个题的意思是，有个人走路，路很长，不知道多长。然后他每次在一个点有p的概率走一步，1-p的概率走两步，然后这条路上有很多地雷，踩上就gg.现在问你活着走下去的概率是多少\n\n### 思路\n\n> 这个就是概率dp。\n> 那么第一点就是确定表达式。dp[i]表示的是到第i个点的概率是多少。\n  如果从一个正的方向去看，也就是算到第无穷远的点肯定是比较难的事情\n  那么就反这看。我们去算出 在每一个点挂掉的概率。这里的转移为\n  dp[i] = p*dp[i-1] + (1-p)*dp[i-2];对于不是地雷的可以这样算。\n  如果是地雷的话。那么dp[i] = (1-p)*dp[i-2] .\n  然后就是分块计算。这里的n因为可以很大.所以我就用了矩阵快速幂。也有些大佬，直接特征根方程写。\n\n<font color=#ff7f50 size=4 face=\"黑体\">这里我碰到了三个坑 输出 -0.00000 要排序 还有就是.lf输入 .f输出</font>\n\n```cpp\n//langman\n#include<iostream>\n#include<cstdio>\n#include<cmath>\n#include<cstring>\n#include<vector>\n#include<algorithm>\nusing namespace std;\n#define clr(shu,x) memset(shu,x,sizeof(shu))\n#define INF 0x3f3f3f3f\n#define pi acos(-1)\n#define loge exp(1)\n#define ll long long\n#define pb push_back\n#define ios_close ios_base::sync_with_stdio(false);cin.tie(NULL);cout.tie(NULL)\nconst int mod = 1e9+7;\nconst double eps = 1e-7;\nvector<ll>q;\nvector<double>ans;\nstruct node\n{\n  double p[2][2];\n};\nnode mut(node a,node b)\n{\n  node o;\n  clr(o.p,0);\n  for(int i = 0;i<2;i++)\n  {\n    for(int j = 0;j<2;j++)\n    {\n      for(int k = 0;k<2;k++)\n      {\n        o.p[i][j] =a.p[i][k] * b.p[k][j] + o.p[i][j];\n      }\n    }\n  }\n  return o;\n}\nnode quick(node a,ll l)\n{\n  node origin;\n  clr(origin.p,0);\n  origin.p[1][1] = origin.p[0][0] = 1.0;\n  while(l)\n  {\n    if(l&1) origin = mut(a,origin);\n    a = mut(a,a);\n    l/=2;\n  }\n  return origin;\n}\n\nint main()\n{\n  int n;\n  while(scanf(\"%d\",&n) == 1)\n  {\n    q.clear();\n    double P;\n    scanf(\"%lf\",&P);\n    for(int i = 1;i<=n;i++)\n    {\n      ll op;scanf(\"%lld\",&op);\n      q.pb(op);\n    }\n    sort(q.begin(),q.end());\n    double base = 1.0;\n    double pre = 1.0;\n    if(q[0] == '1')\n    {\n      printf(\"0.0000000\\n\");\n      continue;\n    }\n    ll pr = 1;\n    double ans = 1;\n    for(int i = 0;i<n;i++)\n    {\n      node a;\n      clr(a.p,0);\n      a.p[0][0] = P;\n      a.p[0][1] = 1-P;\n      a.p[1][0] = 1.0;\n      a = quick(a,q[i]-pr);\n      base = a.p[0][0]*pre;\n      ans -= base;\n      base = a.p[1][0]*pre;\n      base = base *(1-P);\n      //cout<< base << endl;\n      pre = base;\n      pr = q[i]+1;\n    }\n    if(ans > eps)\n    printf(\"%.7f\\n\",ans);\n    else\n    printf(\"0.0000000\\n\");\n  }\n  return 0;\n}\n```\n","source":"_posts/期望概率常见题.md","raw":"---\ntitle: 期望，概率套题\ntags: [ACM,期望,概率,dp]\ncomments: true\nmathjax: true\ndate: 2018-10-23 12:47:44\n---\n\n# 期望概率的一些水题   \n\n## Aeroplane chess \n[ hdu4405 ](http://acm.hdu.edu.cn/showproblem.php?pid=4405)\n### 描述\n >   Hzz loves aeroplane chess very much. The chess map contains N+1 grids labeled from 0 to N. Hzz starts at grid 0. For each step he throws a dice(a dice have six faces with equal probability to face up and the numbers on the faces are 1,2,3,4,5,6). When Hzz is at grid i and the dice number is x, he will moves to grid i+x. Hzz finishes the game when i+x is equal to or greater than N. \n >   There are also M flight lines on the chess map. The i-th flight line can help Hzz fly from grid Xi to Yi (0<Xi<Yi<=N) without throwing the dice. If there is another flight line from Yi, Hzz can take the flight line continuously. It is granted that there is no two or more flight lines start from the same grid. \n >   Please help Hzz calculate the expected dice throwing times to finish the game. \n\n### input\n> There are multiple test cases. \nEach test case contains several lines. \nThe first line contains two integers N(1≤N≤100000) and M(0≤M≤1000). \nThen M lines follow, each line contains two integers Xi,Yi(1≤Xi<Yi≤N).   \nThe input end with N=0, M=0. \n\n### output\n> For each test case in the input, you should output a line indicating the expected dice throwing times. Output should be rounded to 4 digits after decimal point. \n\n### sample input\n```\n2 0\n8 3\n2 4\n4 5\n7 8\n0 0\n```\n\n### sample output\n```\n1.1667\n2.3441\n```\n\n### 题目意思\n> 主要意思就是，有个人很爱玩飞行棋。他们在一张行为1列为n+1的棋盘上玩。然后他们有一个色子，色子有六个面，面上分别是1，2...，然后他们从0出发。其中这个棋盘上有m条飞机道，飞机道有两个口a,b(b>a);然后只要到了a那么它就会直接飞到b不用花费其他东西。现在就是问你从起点到终点需要丢多少次色子，求出这个期望。\n\n### 思路\n> - 首先看第一眼确定做法，期望dp.\n> - 然后就是确定dp表达式的意思。$ dp[i] $ 这个表示从第i个点到终点的期望\n> - 接着就是确定转移，以及初始状态。\n>>  1. dp[n] = 0,\n>>  2. dp[a] = dp[b] (如果有一条从a到b的飞机道).\n>>  3. dp[i] = $  \\sum_{j=1}^6  $    dp[i+j]/6  +1; \n\n### 代码\n```cpp\n// langman\n#include<bits/stdc++.h>\nusing namespace std;\n\n#define clr(shu,x) memset(shu,x,sizeof(shu))\n#define INF 0x3f3f3f3f\n#define pi acos(-1)\n#define loge exp(1)\n#define ll long long\n#define pb push_back\n#define c_fuck(x) cout<<\"Case \"<<x<<\":\"\n#define debug cout<<\"is there bug?\"<<endl\nconst int mod = 1e9+7;\nconst double eps = 1e-6;\n// 期望入门题\n// 网上说 概率dp一般是正着推 期望dp一般是倒过来退。\n// 好像有点道理\n// dp[i] 表式的是从i这个点 到第n个点所要用的期望。\ndouble dp[100010];\nint vis[100010];\nint main()\n{\n  // std::ios::sync_with_stdio(false);\n  // cin.tie(0);\n  // cout.tie(0);\n  int n,m;\n  while(scanf(\"%d%d\",&n,&m) == 2)\n  {\n    if(!m && !n) break;\n    for(int i = 0;i<=n+6;i++)\n    {\n      dp[i] = 0;\n      vis[i] = -1;\n    }\n    for(int i = 1;i<=m;i++)\n    {\n      int u,v;\n      scanf(\"%d%d\",&u,&v);\n      vis[u] = v;\n    }\n    for(int i = n-1;i>=0;i--)\n    {\n      if(vis[i] != -1)\n      {\n        dp[i] = dp[vis[i]];\n      }\n      else\n      {\n        for(int j = 1;j<=6;j++)\n        {\n          dp[i] += dp[i+j]/6.0;\n        }\n        dp[i]+=1;\n      }\n    }\n    printf(\"%.4lf\\n\",dp[0]);\n  }\n  return 0;\n}\n```\n \n## Where is the canteen\n[poj-3744](http://poj.org/problem?id=3744)\n### description\n> YYF is a couragous scout. Now he is on a dangerous mission which is to penetrate into the enemy's base. After overcoming a series difficulties, YYF is now at the start of enemy's famous \"mine road\". This is a very long road, on which there are numbers of mines. At first, YYF is at step one. For each step after that, YYF will walk one step with a probability of p, or jump two step with a probality of 1-p. Here is the task, given the place of each mine, please calculate the probality that YYF can go through the \"mine road\" safely.\n\n### input\n\n> The input contains many test cases ended with EOF.\nEach test case contains two lines.\nThe First line of each test case is N (1 ≤ N ≤ 10) and p (0.25 ≤ p ≤ 0.75) seperated by a single blank, standing for the number of mines and the probability to walk one step.\nThe Second line of each test case is N integer standing for the place of N mines. Each integer is in the range of [1, 100000000].\n\n### output\n\n> For each test case, output the probabilty in a single line with the precision to 7 digits after the decimal point.\n\n### Sample input\n```\n1 0.5\n2\n2 0.5\n2 4\n\n```\n### Sample output\n```\n0.5000000\n0.2500000\n```\n### 题面意思\n\n> 这个题的意思是，有个人走路，路很长，不知道多长。然后他每次在一个点有p的概率走一步，1-p的概率走两步，然后这条路上有很多地雷，踩上就gg.现在问你活着走下去的概率是多少\n\n### 思路\n\n> 这个就是概率dp。\n> 那么第一点就是确定表达式。dp[i]表示的是到第i个点的概率是多少。\n  如果从一个正的方向去看，也就是算到第无穷远的点肯定是比较难的事情\n  那么就反这看。我们去算出 在每一个点挂掉的概率。这里的转移为\n  dp[i] = p*dp[i-1] + (1-p)*dp[i-2];对于不是地雷的可以这样算。\n  如果是地雷的话。那么dp[i] = (1-p)*dp[i-2] .\n  然后就是分块计算。这里的n因为可以很大.所以我就用了矩阵快速幂。也有些大佬，直接特征根方程写。\n\n<font color=#ff7f50 size=4 face=\"黑体\">这里我碰到了三个坑 输出 -0.00000 要排序 还有就是.lf输入 .f输出</font>\n\n```cpp\n//langman\n#include<iostream>\n#include<cstdio>\n#include<cmath>\n#include<cstring>\n#include<vector>\n#include<algorithm>\nusing namespace std;\n#define clr(shu,x) memset(shu,x,sizeof(shu))\n#define INF 0x3f3f3f3f\n#define pi acos(-1)\n#define loge exp(1)\n#define ll long long\n#define pb push_back\n#define ios_close ios_base::sync_with_stdio(false);cin.tie(NULL);cout.tie(NULL)\nconst int mod = 1e9+7;\nconst double eps = 1e-7;\nvector<ll>q;\nvector<double>ans;\nstruct node\n{\n  double p[2][2];\n};\nnode mut(node a,node b)\n{\n  node o;\n  clr(o.p,0);\n  for(int i = 0;i<2;i++)\n  {\n    for(int j = 0;j<2;j++)\n    {\n      for(int k = 0;k<2;k++)\n      {\n        o.p[i][j] =a.p[i][k] * b.p[k][j] + o.p[i][j];\n      }\n    }\n  }\n  return o;\n}\nnode quick(node a,ll l)\n{\n  node origin;\n  clr(origin.p,0);\n  origin.p[1][1] = origin.p[0][0] = 1.0;\n  while(l)\n  {\n    if(l&1) origin = mut(a,origin);\n    a = mut(a,a);\n    l/=2;\n  }\n  return origin;\n}\n\nint main()\n{\n  int n;\n  while(scanf(\"%d\",&n) == 1)\n  {\n    q.clear();\n    double P;\n    scanf(\"%lf\",&P);\n    for(int i = 1;i<=n;i++)\n    {\n      ll op;scanf(\"%lld\",&op);\n      q.pb(op);\n    }\n    sort(q.begin(),q.end());\n    double base = 1.0;\n    double pre = 1.0;\n    if(q[0] == '1')\n    {\n      printf(\"0.0000000\\n\");\n      continue;\n    }\n    ll pr = 1;\n    double ans = 1;\n    for(int i = 0;i<n;i++)\n    {\n      node a;\n      clr(a.p,0);\n      a.p[0][0] = P;\n      a.p[0][1] = 1-P;\n      a.p[1][0] = 1.0;\n      a = quick(a,q[i]-pr);\n      base = a.p[0][0]*pre;\n      ans -= base;\n      base = a.p[1][0]*pre;\n      base = base *(1-P);\n      //cout<< base << endl;\n      pre = base;\n      pr = q[i]+1;\n    }\n    if(ans > eps)\n    printf(\"%.7f\\n\",ans);\n    else\n    printf(\"0.0000000\\n\");\n  }\n  return 0;\n}\n```\n","slug":"期望概率常见题","published":1,"updated":"2018-12-01T06:26:09.836Z","layout":"post","photos":[],"link":"","_id":"cjtravwr9000b34ugh7cjrj43","content":"<h1 id=\"期望概率的一些水题\"><a class=\"markdownIt-Anchor\" href=\"#期望概率的一些水题\"></a> 期望概率的一些水题</h1>\n<h2 id=\"aeroplane-chess\"><a class=\"markdownIt-Anchor\" href=\"#aeroplane-chess\"></a> Aeroplane chess</h2>\n<p><a href=\"http://acm.hdu.edu.cn/showproblem.php?pid=4405\" target=\"_blank\" rel=\"noopener\"> hdu4405 </a></p>\n<h3 id=\"描述\"><a class=\"markdownIt-Anchor\" href=\"#描述\"></a> 描述</h3>\n<blockquote>\n<p>Hzz loves aeroplane chess very much. The chess map contains N+1 grids labeled from 0 to N. Hzz starts at grid 0. For each step he throws a dice(a dice have six faces with equal probability to face up and the numbers on the faces are 1,2,3,4,5,6). When Hzz is at grid i and the dice number is x, he will moves to grid i+x. Hzz finishes the game when i+x is equal to or greater than N.<br>\nThere are also M flight lines on the chess map. The i-th flight line can help Hzz fly from grid Xi to Yi (0&lt;Xi&lt;Yi&lt;=N) without throwing the dice. If there is another flight line from Yi, Hzz can take the flight line continuously. It is granted that there is no two or more flight lines start from the same grid.<br>\nPlease help Hzz calculate the expected dice throwing times to finish the game.</p>\n</blockquote>\n<h3 id=\"input\"><a class=\"markdownIt-Anchor\" href=\"#input\"></a> input</h3>\n<blockquote>\n<p>There are multiple test cases.<br>\nEach test case contains several lines.<br>\nThe first line contains two integers N(1≤N≤100000) and M(0≤M≤1000).<br>\nThen M lines follow, each line contains two integers Xi,Yi(1≤Xi&lt;Yi≤N).<br>\nThe input end with N=0, M=0.</p>\n</blockquote>\n<h3 id=\"output\"><a class=\"markdownIt-Anchor\" href=\"#output\"></a> output</h3>\n<blockquote>\n<p>For each test case in the input, you should output a line indicating the expected dice throwing times. Output should be rounded to 4 digits after decimal point.</p>\n</blockquote>\n<h3 id=\"sample-input\"><a class=\"markdownIt-Anchor\" href=\"#sample-input\"></a> sample input</h3>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">2 0</span><br><span class=\"line\">8 3</span><br><span class=\"line\">2 4</span><br><span class=\"line\">4 5</span><br><span class=\"line\">7 8</span><br><span class=\"line\">0 0</span><br></pre></td></tr></table></figure>\n<h3 id=\"sample-output\"><a class=\"markdownIt-Anchor\" href=\"#sample-output\"></a> sample output</h3>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">1.1667</span><br><span class=\"line\">2.3441</span><br></pre></td></tr></table></figure>\n<h3 id=\"题目意思\"><a class=\"markdownIt-Anchor\" href=\"#题目意思\"></a> 题目意思</h3>\n<blockquote>\n<p>主要意思就是，有个人很爱玩飞行棋。他们在一张行为1列为n+1的棋盘上玩。然后他们有一个色子，色子有六个面，面上分别是1，2…，然后他们从0出发。其中这个棋盘上有m条飞机道，飞机道有两个口a,b(b&gt;a);然后只要到了a那么它就会直接飞到b不用花费其他东西。现在就是问你从起点到终点需要丢多少次色子，求出这个期望。</p>\n</blockquote>\n<h3 id=\"思路\"><a class=\"markdownIt-Anchor\" href=\"#思路\"></a> 思路</h3>\n<blockquote>\n<ul>\n<li>首先看第一眼确定做法，期望dp.</li>\n<li>然后就是确定dp表达式的意思。$ dp[i] $ 这个表示从第i个点到终点的期望</li>\n<li>接着就是确定转移，以及初始状态。</li>\n</ul>\n<blockquote>\n<ol>\n<li>dp[n] = 0,</li>\n<li>dp[a] = dp[b] (如果有一条从a到b的飞机道).</li>\n<li>dp[i] = $  \\sum_{j=1}^6  $    dp[i+j]/6  +1;</li>\n</ol>\n</blockquote>\n</blockquote>\n<h3 id=\"代码\"><a class=\"markdownIt-Anchor\" href=\"#代码\"></a> 代码</h3>\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// langman</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span><span class=\"meta-string\">&lt;bits/stdc++.h&gt;</span></span></span><br><span class=\"line\"><span class=\"keyword\">using</span> <span class=\"keyword\">namespace</span> <span class=\"built_in\">std</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> clr(shu,x) memset(shu,x,sizeof(shu))</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> INF 0x3f3f3f3f</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> pi acos(-1)</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> loge exp(1)</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> ll long long</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> pb push_back</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> c_fuck(x) cout&lt;&lt;<span class=\"meta-string\">\"Case \"</span>&lt;&lt;x&lt;&lt;<span class=\"meta-string\">\":\"</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> debug cout&lt;&lt;<span class=\"meta-string\">\"is there bug?\"</span>&lt;&lt;endl</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> <span class=\"keyword\">int</span> mod = <span class=\"number\">1e9</span>+<span class=\"number\">7</span>;</span><br><span class=\"line\"><span class=\"keyword\">const</span> <span class=\"keyword\">double</span> eps = <span class=\"number\">1e-6</span>;</span><br><span class=\"line\"><span class=\"comment\">// 期望入门题</span></span><br><span class=\"line\"><span class=\"comment\">// 网上说 概率dp一般是正着推 期望dp一般是倒过来退。</span></span><br><span class=\"line\"><span class=\"comment\">// 好像有点道理</span></span><br><span class=\"line\"><span class=\"comment\">// dp[i] 表式的是从i这个点 到第n个点所要用的期望。</span></span><br><span class=\"line\"><span class=\"keyword\">double</span> dp[<span class=\"number\">100010</span>];</span><br><span class=\"line\"><span class=\"keyword\">int</span> vis[<span class=\"number\">100010</span>];</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">  <span class=\"comment\">// std::ios::sync_with_stdio(false);</span></span><br><span class=\"line\">  <span class=\"comment\">// cin.tie(0);</span></span><br><span class=\"line\">  <span class=\"comment\">// cout.tie(0);</span></span><br><span class=\"line\">  <span class=\"keyword\">int</span> n,m;</span><br><span class=\"line\">  <span class=\"keyword\">while</span>(<span class=\"built_in\">scanf</span>(<span class=\"string\">\"%d%d\"</span>,&amp;n,&amp;m) == <span class=\"number\">2</span>)</span><br><span class=\"line\">  &#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(!m &amp;&amp; !n) <span class=\"keyword\">break</span>;</span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>;i&lt;=n+<span class=\"number\">6</span>;i++)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">      dp[i] = <span class=\"number\">0</span>;</span><br><span class=\"line\">      vis[i] = <span class=\"number\">-1</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i = <span class=\"number\">1</span>;i&lt;=m;i++)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">      <span class=\"keyword\">int</span> u,v;</span><br><span class=\"line\">      <span class=\"built_in\">scanf</span>(<span class=\"string\">\"%d%d\"</span>,&amp;u,&amp;v);</span><br><span class=\"line\">      vis[u] = v;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i = n<span class=\"number\">-1</span>;i&gt;=<span class=\"number\">0</span>;i--)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">      <span class=\"keyword\">if</span>(vis[i] != <span class=\"number\">-1</span>)</span><br><span class=\"line\">      &#123;</span><br><span class=\"line\">        dp[i] = dp[vis[i]];</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">      <span class=\"keyword\">else</span></span><br><span class=\"line\">      &#123;</span><br><span class=\"line\">        <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> j = <span class=\"number\">1</span>;j&lt;=<span class=\"number\">6</span>;j++)</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">          dp[i] += dp[i+j]/<span class=\"number\">6.0</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        dp[i]+=<span class=\"number\">1</span>;</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"built_in\">printf</span>(<span class=\"string\">\"%.4lf\\n\"</span>,dp[<span class=\"number\">0</span>]);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h2 id=\"where-is-the-canteen\"><a class=\"markdownIt-Anchor\" href=\"#where-is-the-canteen\"></a> Where is the canteen</h2>\n<p><a href=\"http://poj.org/problem?id=3744\" target=\"_blank\" rel=\"noopener\">poj-3744</a></p>\n<h3 id=\"description\"><a class=\"markdownIt-Anchor\" href=\"#description\"></a> description</h3>\n<blockquote>\n<p>YYF is a couragous scout. Now he is on a dangerous mission which is to penetrate into the enemy’s base. After overcoming a series difficulties, YYF is now at the start of enemy’s famous “mine road”. This is a very long road, on which there are numbers of mines. At first, YYF is at step one. For each step after that, YYF will walk one step with a probability of p, or jump two step with a probality of 1-p. Here is the task, given the place of each mine, please calculate the probality that YYF can go through the “mine road” safely.</p>\n</blockquote>\n<h3 id=\"input-2\"><a class=\"markdownIt-Anchor\" href=\"#input-2\"></a> input</h3>\n<blockquote>\n<p>The input contains many test cases ended with EOF.<br>\nEach test case contains two lines.<br>\nThe First line of each test case is N (1 ≤ N ≤ 10) and p (0.25 ≤ p ≤ 0.75) seperated by a single blank, standing for the number of mines and the probability to walk one step.<br>\nThe Second line of each test case is N integer standing for the place of N mines. Each integer is in the range of [1, 100000000].</p>\n</blockquote>\n<h3 id=\"output-2\"><a class=\"markdownIt-Anchor\" href=\"#output-2\"></a> output</h3>\n<blockquote>\n<p>For each test case, output the probabilty in a single line with the precision to 7 digits after the decimal point.</p>\n</blockquote>\n<h3 id=\"sample-input-2\"><a class=\"markdownIt-Anchor\" href=\"#sample-input-2\"></a> Sample input</h3>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">1 0.5</span><br><span class=\"line\">2</span><br><span class=\"line\">2 0.5</span><br><span class=\"line\">2 4</span><br></pre></td></tr></table></figure>\n<h3 id=\"sample-output-2\"><a class=\"markdownIt-Anchor\" href=\"#sample-output-2\"></a> Sample output</h3>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">0.5000000</span><br><span class=\"line\">0.2500000</span><br></pre></td></tr></table></figure>\n<h3 id=\"题面意思\"><a class=\"markdownIt-Anchor\" href=\"#题面意思\"></a> 题面意思</h3>\n<blockquote>\n<p>这个题的意思是，有个人走路，路很长，不知道多长。然后他每次在一个点有p的概率走一步，1-p的概率走两步，然后这条路上有很多地雷，踩上就gg.现在问你活着走下去的概率是多少</p>\n</blockquote>\n<h3 id=\"思路-2\"><a class=\"markdownIt-Anchor\" href=\"#思路-2\"></a> 思路</h3>\n<blockquote>\n<p>这个就是概率dp。<br>\n那么第一点就是确定表达式。dp[i]表示的是到第i个点的概率是多少。<br>\n如果从一个正的方向去看，也就是算到第无穷远的点肯定是比较难的事情<br>\n那么就反这看。我们去算出 在每一个点挂掉的概率。这里的转移为<br>\ndp[i] = p*dp[i-1] + (1-p)*dp[i-2];对于不是地雷的可以这样算。<br>\n如果是地雷的话。那么dp[i] = (1-p)*dp[i-2] .<br>\n然后就是分块计算。这里的n因为可以很大.所以我就用了矩阵快速幂。也有些大佬，直接特征根方程写。</p>\n</blockquote>\n<p><font color=\"#ff7f50\" size=\"4\" face=\"黑体\">这里我碰到了三个坑 输出 -0.00000 要排序 还有就是.lf输入 .f输出</font></p>\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//langman</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span><span class=\"meta-string\">&lt;iostream&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span><span class=\"meta-string\">&lt;cstdio&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span><span class=\"meta-string\">&lt;cmath&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span><span class=\"meta-string\">&lt;cstring&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span><span class=\"meta-string\">&lt;vector&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span><span class=\"meta-string\">&lt;algorithm&gt;</span></span></span><br><span class=\"line\"><span class=\"keyword\">using</span> <span class=\"keyword\">namespace</span> <span class=\"built_in\">std</span>;</span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> clr(shu,x) memset(shu,x,sizeof(shu))</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> INF 0x3f3f3f3f</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> pi acos(-1)</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> loge exp(1)</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> ll long long</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> pb push_back</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> ios_close ios_base::sync_with_stdio(false);cin.tie(NULL);cout.tie(NULL)</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> <span class=\"keyword\">int</span> mod = <span class=\"number\">1e9</span>+<span class=\"number\">7</span>;</span><br><span class=\"line\"><span class=\"keyword\">const</span> <span class=\"keyword\">double</span> eps = <span class=\"number\">1e-7</span>;</span><br><span class=\"line\"><span class=\"built_in\">vector</span>&lt;ll&gt;q;</span><br><span class=\"line\"><span class=\"built_in\">vector</span>&lt;<span class=\"keyword\">double</span>&gt;ans;</span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">struct</span> <span class=\"title\">node</span></span></span><br><span class=\"line\"><span class=\"class\">&#123;</span></span><br><span class=\"line\">  <span class=\"keyword\">double</span> p[<span class=\"number\">2</span>][<span class=\"number\">2</span>];</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"><span class=\"function\">node <span class=\"title\">mut</span><span class=\"params\">(node a,node b)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">  node o;</span><br><span class=\"line\">  clr(o.p,<span class=\"number\">0</span>);</span><br><span class=\"line\">  <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>;i&lt;<span class=\"number\">2</span>;i++)</span><br><span class=\"line\">  &#123;</span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> j = <span class=\"number\">0</span>;j&lt;<span class=\"number\">2</span>;j++)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">      <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> k = <span class=\"number\">0</span>;k&lt;<span class=\"number\">2</span>;k++)</span><br><span class=\"line\">      &#123;</span><br><span class=\"line\">        o.p[i][j] =a.p[i][k] * b.p[k][j] + o.p[i][j];</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> o;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"function\">node <span class=\"title\">quick</span><span class=\"params\">(node a,ll l)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">  node origin;</span><br><span class=\"line\">  clr(origin.p,<span class=\"number\">0</span>);</span><br><span class=\"line\">  origin.p[<span class=\"number\">1</span>][<span class=\"number\">1</span>] = origin.p[<span class=\"number\">0</span>][<span class=\"number\">0</span>] = <span class=\"number\">1.0</span>;</span><br><span class=\"line\">  <span class=\"keyword\">while</span>(l)</span><br><span class=\"line\">  &#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(l&amp;<span class=\"number\">1</span>) origin = mut(a,origin);</span><br><span class=\"line\">    a = mut(a,a);</span><br><span class=\"line\">    l/=<span class=\"number\">2</span>;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> origin;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">int</span> n;</span><br><span class=\"line\">  <span class=\"keyword\">while</span>(<span class=\"built_in\">scanf</span>(<span class=\"string\">\"%d\"</span>,&amp;n) == <span class=\"number\">1</span>)</span><br><span class=\"line\">  &#123;</span><br><span class=\"line\">    q.clear();</span><br><span class=\"line\">    <span class=\"keyword\">double</span> P;</span><br><span class=\"line\">    <span class=\"built_in\">scanf</span>(<span class=\"string\">\"%lf\"</span>,&amp;P);</span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i = <span class=\"number\">1</span>;i&lt;=n;i++)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">      ll op;<span class=\"built_in\">scanf</span>(<span class=\"string\">\"%lld\"</span>,&amp;op);</span><br><span class=\"line\">      q.pb(op);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    sort(q.begin(),q.end());</span><br><span class=\"line\">    <span class=\"keyword\">double</span> base = <span class=\"number\">1.0</span>;</span><br><span class=\"line\">    <span class=\"keyword\">double</span> pre = <span class=\"number\">1.0</span>;</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(q[<span class=\"number\">0</span>] == <span class=\"string\">'1'</span>)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">      <span class=\"built_in\">printf</span>(<span class=\"string\">\"0.0000000\\n\"</span>);</span><br><span class=\"line\">      <span class=\"keyword\">continue</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    ll pr = <span class=\"number\">1</span>;</span><br><span class=\"line\">    <span class=\"keyword\">double</span> ans = <span class=\"number\">1</span>;</span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>;i&lt;n;i++)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">      node a;</span><br><span class=\"line\">      clr(a.p,<span class=\"number\">0</span>);</span><br><span class=\"line\">      a.p[<span class=\"number\">0</span>][<span class=\"number\">0</span>] = P;</span><br><span class=\"line\">      a.p[<span class=\"number\">0</span>][<span class=\"number\">1</span>] = <span class=\"number\">1</span>-P;</span><br><span class=\"line\">      a.p[<span class=\"number\">1</span>][<span class=\"number\">0</span>] = <span class=\"number\">1.0</span>;</span><br><span class=\"line\">      a = quick(a,q[i]-pr);</span><br><span class=\"line\">      base = a.p[<span class=\"number\">0</span>][<span class=\"number\">0</span>]*pre;</span><br><span class=\"line\">      ans -= base;</span><br><span class=\"line\">      base = a.p[<span class=\"number\">1</span>][<span class=\"number\">0</span>]*pre;</span><br><span class=\"line\">      base = base *(<span class=\"number\">1</span>-P);</span><br><span class=\"line\">      <span class=\"comment\">//cout&lt;&lt; base &lt;&lt; endl;</span></span><br><span class=\"line\">      pre = base;</span><br><span class=\"line\">      pr = q[i]+<span class=\"number\">1</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(ans &gt; eps)</span><br><span class=\"line\">    <span class=\"built_in\">printf</span>(<span class=\"string\">\"%.7f\\n\"</span>,ans);</span><br><span class=\"line\">    <span class=\"keyword\">else</span></span><br><span class=\"line\">    <span class=\"built_in\">printf</span>(<span class=\"string\">\"0.0000000\\n\"</span>);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n","site":{"data":{}},"excerpt":"","more":"<h1 id=\"期望概率的一些水题\"><a class=\"markdownIt-Anchor\" href=\"#期望概率的一些水题\"></a> 期望概率的一些水题</h1>\n<h2 id=\"aeroplane-chess\"><a class=\"markdownIt-Anchor\" href=\"#aeroplane-chess\"></a> Aeroplane chess</h2>\n<p><a href=\"http://acm.hdu.edu.cn/showproblem.php?pid=4405\" target=\"_blank\" rel=\"noopener\"> hdu4405 </a></p>\n<h3 id=\"描述\"><a class=\"markdownIt-Anchor\" href=\"#描述\"></a> 描述</h3>\n<blockquote>\n<p>Hzz loves aeroplane chess very much. The chess map contains N+1 grids labeled from 0 to N. Hzz starts at grid 0. For each step he throws a dice(a dice have six faces with equal probability to face up and the numbers on the faces are 1,2,3,4,5,6). When Hzz is at grid i and the dice number is x, he will moves to grid i+x. Hzz finishes the game when i+x is equal to or greater than N.<br>\nThere are also M flight lines on the chess map. The i-th flight line can help Hzz fly from grid Xi to Yi (0&lt;Xi&lt;Yi&lt;=N) without throwing the dice. If there is another flight line from Yi, Hzz can take the flight line continuously. It is granted that there is no two or more flight lines start from the same grid.<br>\nPlease help Hzz calculate the expected dice throwing times to finish the game.</p>\n</blockquote>\n<h3 id=\"input\"><a class=\"markdownIt-Anchor\" href=\"#input\"></a> input</h3>\n<blockquote>\n<p>There are multiple test cases.<br>\nEach test case contains several lines.<br>\nThe first line contains two integers N(1≤N≤100000) and M(0≤M≤1000).<br>\nThen M lines follow, each line contains two integers Xi,Yi(1≤Xi&lt;Yi≤N).<br>\nThe input end with N=0, M=0.</p>\n</blockquote>\n<h3 id=\"output\"><a class=\"markdownIt-Anchor\" href=\"#output\"></a> output</h3>\n<blockquote>\n<p>For each test case in the input, you should output a line indicating the expected dice throwing times. Output should be rounded to 4 digits after decimal point.</p>\n</blockquote>\n<h3 id=\"sample-input\"><a class=\"markdownIt-Anchor\" href=\"#sample-input\"></a> sample input</h3>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">2 0</span><br><span class=\"line\">8 3</span><br><span class=\"line\">2 4</span><br><span class=\"line\">4 5</span><br><span class=\"line\">7 8</span><br><span class=\"line\">0 0</span><br></pre></td></tr></table></figure>\n<h3 id=\"sample-output\"><a class=\"markdownIt-Anchor\" href=\"#sample-output\"></a> sample output</h3>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">1.1667</span><br><span class=\"line\">2.3441</span><br></pre></td></tr></table></figure>\n<h3 id=\"题目意思\"><a class=\"markdownIt-Anchor\" href=\"#题目意思\"></a> 题目意思</h3>\n<blockquote>\n<p>主要意思就是，有个人很爱玩飞行棋。他们在一张行为1列为n+1的棋盘上玩。然后他们有一个色子，色子有六个面，面上分别是1，2…，然后他们从0出发。其中这个棋盘上有m条飞机道，飞机道有两个口a,b(b&gt;a);然后只要到了a那么它就会直接飞到b不用花费其他东西。现在就是问你从起点到终点需要丢多少次色子，求出这个期望。</p>\n</blockquote>\n<h3 id=\"思路\"><a class=\"markdownIt-Anchor\" href=\"#思路\"></a> 思路</h3>\n<blockquote>\n<ul>\n<li>首先看第一眼确定做法，期望dp.</li>\n<li>然后就是确定dp表达式的意思。$ dp[i] $ 这个表示从第i个点到终点的期望</li>\n<li>接着就是确定转移，以及初始状态。</li>\n</ul>\n<blockquote>\n<ol>\n<li>dp[n] = 0,</li>\n<li>dp[a] = dp[b] (如果有一条从a到b的飞机道).</li>\n<li>dp[i] = $  \\sum_{j=1}^6  $    dp[i+j]/6  +1;</li>\n</ol>\n</blockquote>\n</blockquote>\n<h3 id=\"代码\"><a class=\"markdownIt-Anchor\" href=\"#代码\"></a> 代码</h3>\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// langman</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span><span class=\"meta-string\">&lt;bits/stdc++.h&gt;</span></span></span><br><span class=\"line\"><span class=\"keyword\">using</span> <span class=\"keyword\">namespace</span> <span class=\"built_in\">std</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> clr(shu,x) memset(shu,x,sizeof(shu))</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> INF 0x3f3f3f3f</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> pi acos(-1)</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> loge exp(1)</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> ll long long</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> pb push_back</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> c_fuck(x) cout&lt;&lt;<span class=\"meta-string\">\"Case \"</span>&lt;&lt;x&lt;&lt;<span class=\"meta-string\">\":\"</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> debug cout&lt;&lt;<span class=\"meta-string\">\"is there bug?\"</span>&lt;&lt;endl</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> <span class=\"keyword\">int</span> mod = <span class=\"number\">1e9</span>+<span class=\"number\">7</span>;</span><br><span class=\"line\"><span class=\"keyword\">const</span> <span class=\"keyword\">double</span> eps = <span class=\"number\">1e-6</span>;</span><br><span class=\"line\"><span class=\"comment\">// 期望入门题</span></span><br><span class=\"line\"><span class=\"comment\">// 网上说 概率dp一般是正着推 期望dp一般是倒过来退。</span></span><br><span class=\"line\"><span class=\"comment\">// 好像有点道理</span></span><br><span class=\"line\"><span class=\"comment\">// dp[i] 表式的是从i这个点 到第n个点所要用的期望。</span></span><br><span class=\"line\"><span class=\"keyword\">double</span> dp[<span class=\"number\">100010</span>];</span><br><span class=\"line\"><span class=\"keyword\">int</span> vis[<span class=\"number\">100010</span>];</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">  <span class=\"comment\">// std::ios::sync_with_stdio(false);</span></span><br><span class=\"line\">  <span class=\"comment\">// cin.tie(0);</span></span><br><span class=\"line\">  <span class=\"comment\">// cout.tie(0);</span></span><br><span class=\"line\">  <span class=\"keyword\">int</span> n,m;</span><br><span class=\"line\">  <span class=\"keyword\">while</span>(<span class=\"built_in\">scanf</span>(<span class=\"string\">\"%d%d\"</span>,&amp;n,&amp;m) == <span class=\"number\">2</span>)</span><br><span class=\"line\">  &#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(!m &amp;&amp; !n) <span class=\"keyword\">break</span>;</span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>;i&lt;=n+<span class=\"number\">6</span>;i++)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">      dp[i] = <span class=\"number\">0</span>;</span><br><span class=\"line\">      vis[i] = <span class=\"number\">-1</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i = <span class=\"number\">1</span>;i&lt;=m;i++)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">      <span class=\"keyword\">int</span> u,v;</span><br><span class=\"line\">      <span class=\"built_in\">scanf</span>(<span class=\"string\">\"%d%d\"</span>,&amp;u,&amp;v);</span><br><span class=\"line\">      vis[u] = v;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i = n<span class=\"number\">-1</span>;i&gt;=<span class=\"number\">0</span>;i--)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">      <span class=\"keyword\">if</span>(vis[i] != <span class=\"number\">-1</span>)</span><br><span class=\"line\">      &#123;</span><br><span class=\"line\">        dp[i] = dp[vis[i]];</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">      <span class=\"keyword\">else</span></span><br><span class=\"line\">      &#123;</span><br><span class=\"line\">        <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> j = <span class=\"number\">1</span>;j&lt;=<span class=\"number\">6</span>;j++)</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">          dp[i] += dp[i+j]/<span class=\"number\">6.0</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        dp[i]+=<span class=\"number\">1</span>;</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"built_in\">printf</span>(<span class=\"string\">\"%.4lf\\n\"</span>,dp[<span class=\"number\">0</span>]);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h2 id=\"where-is-the-canteen\"><a class=\"markdownIt-Anchor\" href=\"#where-is-the-canteen\"></a> Where is the canteen</h2>\n<p><a href=\"http://poj.org/problem?id=3744\" target=\"_blank\" rel=\"noopener\">poj-3744</a></p>\n<h3 id=\"description\"><a class=\"markdownIt-Anchor\" href=\"#description\"></a> description</h3>\n<blockquote>\n<p>YYF is a couragous scout. Now he is on a dangerous mission which is to penetrate into the enemy’s base. After overcoming a series difficulties, YYF is now at the start of enemy’s famous “mine road”. This is a very long road, on which there are numbers of mines. At first, YYF is at step one. For each step after that, YYF will walk one step with a probability of p, or jump two step with a probality of 1-p. Here is the task, given the place of each mine, please calculate the probality that YYF can go through the “mine road” safely.</p>\n</blockquote>\n<h3 id=\"input-2\"><a class=\"markdownIt-Anchor\" href=\"#input-2\"></a> input</h3>\n<blockquote>\n<p>The input contains many test cases ended with EOF.<br>\nEach test case contains two lines.<br>\nThe First line of each test case is N (1 ≤ N ≤ 10) and p (0.25 ≤ p ≤ 0.75) seperated by a single blank, standing for the number of mines and the probability to walk one step.<br>\nThe Second line of each test case is N integer standing for the place of N mines. Each integer is in the range of [1, 100000000].</p>\n</blockquote>\n<h3 id=\"output-2\"><a class=\"markdownIt-Anchor\" href=\"#output-2\"></a> output</h3>\n<blockquote>\n<p>For each test case, output the probabilty in a single line with the precision to 7 digits after the decimal point.</p>\n</blockquote>\n<h3 id=\"sample-input-2\"><a class=\"markdownIt-Anchor\" href=\"#sample-input-2\"></a> Sample input</h3>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">1 0.5</span><br><span class=\"line\">2</span><br><span class=\"line\">2 0.5</span><br><span class=\"line\">2 4</span><br></pre></td></tr></table></figure>\n<h3 id=\"sample-output-2\"><a class=\"markdownIt-Anchor\" href=\"#sample-output-2\"></a> Sample output</h3>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">0.5000000</span><br><span class=\"line\">0.2500000</span><br></pre></td></tr></table></figure>\n<h3 id=\"题面意思\"><a class=\"markdownIt-Anchor\" href=\"#题面意思\"></a> 题面意思</h3>\n<blockquote>\n<p>这个题的意思是，有个人走路，路很长，不知道多长。然后他每次在一个点有p的概率走一步，1-p的概率走两步，然后这条路上有很多地雷，踩上就gg.现在问你活着走下去的概率是多少</p>\n</blockquote>\n<h3 id=\"思路-2\"><a class=\"markdownIt-Anchor\" href=\"#思路-2\"></a> 思路</h3>\n<blockquote>\n<p>这个就是概率dp。<br>\n那么第一点就是确定表达式。dp[i]表示的是到第i个点的概率是多少。<br>\n如果从一个正的方向去看，也就是算到第无穷远的点肯定是比较难的事情<br>\n那么就反这看。我们去算出 在每一个点挂掉的概率。这里的转移为<br>\ndp[i] = p*dp[i-1] + (1-p)*dp[i-2];对于不是地雷的可以这样算。<br>\n如果是地雷的话。那么dp[i] = (1-p)*dp[i-2] .<br>\n然后就是分块计算。这里的n因为可以很大.所以我就用了矩阵快速幂。也有些大佬，直接特征根方程写。</p>\n</blockquote>\n<p><font color=\"#ff7f50\" size=\"4\" face=\"黑体\">这里我碰到了三个坑 输出 -0.00000 要排序 还有就是.lf输入 .f输出</font></p>\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//langman</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span><span class=\"meta-string\">&lt;iostream&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span><span class=\"meta-string\">&lt;cstdio&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span><span class=\"meta-string\">&lt;cmath&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span><span class=\"meta-string\">&lt;cstring&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span><span class=\"meta-string\">&lt;vector&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span><span class=\"meta-string\">&lt;algorithm&gt;</span></span></span><br><span class=\"line\"><span class=\"keyword\">using</span> <span class=\"keyword\">namespace</span> <span class=\"built_in\">std</span>;</span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> clr(shu,x) memset(shu,x,sizeof(shu))</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> INF 0x3f3f3f3f</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> pi acos(-1)</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> loge exp(1)</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> ll long long</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> pb push_back</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> ios_close ios_base::sync_with_stdio(false);cin.tie(NULL);cout.tie(NULL)</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> <span class=\"keyword\">int</span> mod = <span class=\"number\">1e9</span>+<span class=\"number\">7</span>;</span><br><span class=\"line\"><span class=\"keyword\">const</span> <span class=\"keyword\">double</span> eps = <span class=\"number\">1e-7</span>;</span><br><span class=\"line\"><span class=\"built_in\">vector</span>&lt;ll&gt;q;</span><br><span class=\"line\"><span class=\"built_in\">vector</span>&lt;<span class=\"keyword\">double</span>&gt;ans;</span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">struct</span> <span class=\"title\">node</span></span></span><br><span class=\"line\"><span class=\"class\">&#123;</span></span><br><span class=\"line\">  <span class=\"keyword\">double</span> p[<span class=\"number\">2</span>][<span class=\"number\">2</span>];</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"><span class=\"function\">node <span class=\"title\">mut</span><span class=\"params\">(node a,node b)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">  node o;</span><br><span class=\"line\">  clr(o.p,<span class=\"number\">0</span>);</span><br><span class=\"line\">  <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>;i&lt;<span class=\"number\">2</span>;i++)</span><br><span class=\"line\">  &#123;</span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> j = <span class=\"number\">0</span>;j&lt;<span class=\"number\">2</span>;j++)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">      <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> k = <span class=\"number\">0</span>;k&lt;<span class=\"number\">2</span>;k++)</span><br><span class=\"line\">      &#123;</span><br><span class=\"line\">        o.p[i][j] =a.p[i][k] * b.p[k][j] + o.p[i][j];</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> o;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"function\">node <span class=\"title\">quick</span><span class=\"params\">(node a,ll l)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">  node origin;</span><br><span class=\"line\">  clr(origin.p,<span class=\"number\">0</span>);</span><br><span class=\"line\">  origin.p[<span class=\"number\">1</span>][<span class=\"number\">1</span>] = origin.p[<span class=\"number\">0</span>][<span class=\"number\">0</span>] = <span class=\"number\">1.0</span>;</span><br><span class=\"line\">  <span class=\"keyword\">while</span>(l)</span><br><span class=\"line\">  &#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(l&amp;<span class=\"number\">1</span>) origin = mut(a,origin);</span><br><span class=\"line\">    a = mut(a,a);</span><br><span class=\"line\">    l/=<span class=\"number\">2</span>;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> origin;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">int</span> n;</span><br><span class=\"line\">  <span class=\"keyword\">while</span>(<span class=\"built_in\">scanf</span>(<span class=\"string\">\"%d\"</span>,&amp;n) == <span class=\"number\">1</span>)</span><br><span class=\"line\">  &#123;</span><br><span class=\"line\">    q.clear();</span><br><span class=\"line\">    <span class=\"keyword\">double</span> P;</span><br><span class=\"line\">    <span class=\"built_in\">scanf</span>(<span class=\"string\">\"%lf\"</span>,&amp;P);</span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i = <span class=\"number\">1</span>;i&lt;=n;i++)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">      ll op;<span class=\"built_in\">scanf</span>(<span class=\"string\">\"%lld\"</span>,&amp;op);</span><br><span class=\"line\">      q.pb(op);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    sort(q.begin(),q.end());</span><br><span class=\"line\">    <span class=\"keyword\">double</span> base = <span class=\"number\">1.0</span>;</span><br><span class=\"line\">    <span class=\"keyword\">double</span> pre = <span class=\"number\">1.0</span>;</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(q[<span class=\"number\">0</span>] == <span class=\"string\">'1'</span>)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">      <span class=\"built_in\">printf</span>(<span class=\"string\">\"0.0000000\\n\"</span>);</span><br><span class=\"line\">      <span class=\"keyword\">continue</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    ll pr = <span class=\"number\">1</span>;</span><br><span class=\"line\">    <span class=\"keyword\">double</span> ans = <span class=\"number\">1</span>;</span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>;i&lt;n;i++)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">      node a;</span><br><span class=\"line\">      clr(a.p,<span class=\"number\">0</span>);</span><br><span class=\"line\">      a.p[<span class=\"number\">0</span>][<span class=\"number\">0</span>] = P;</span><br><span class=\"line\">      a.p[<span class=\"number\">0</span>][<span class=\"number\">1</span>] = <span class=\"number\">1</span>-P;</span><br><span class=\"line\">      a.p[<span class=\"number\">1</span>][<span class=\"number\">0</span>] = <span class=\"number\">1.0</span>;</span><br><span class=\"line\">      a = quick(a,q[i]-pr);</span><br><span class=\"line\">      base = a.p[<span class=\"number\">0</span>][<span class=\"number\">0</span>]*pre;</span><br><span class=\"line\">      ans -= base;</span><br><span class=\"line\">      base = a.p[<span class=\"number\">1</span>][<span class=\"number\">0</span>]*pre;</span><br><span class=\"line\">      base = base *(<span class=\"number\">1</span>-P);</span><br><span class=\"line\">      <span class=\"comment\">//cout&lt;&lt; base &lt;&lt; endl;</span></span><br><span class=\"line\">      pre = base;</span><br><span class=\"line\">      pr = q[i]+<span class=\"number\">1</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(ans &gt; eps)</span><br><span class=\"line\">    <span class=\"built_in\">printf</span>(<span class=\"string\">\"%.7f\\n\"</span>,ans);</span><br><span class=\"line\">    <span class=\"keyword\">else</span></span><br><span class=\"line\">    <span class=\"built_in\">printf</span>(<span class=\"string\">\"0.0000000\\n\"</span>);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n"},{"title":"面试常见问题[计网]","date":"2019-03-19T08:29:28.000Z","_content":"\n\n### 计算机网络\n\n#### TCP和UDP有什么区别？\n> TCP和UDP是OSI模型中的运输层中的协议。TCP提供可靠的通信传输，而UDP则常被用于让广播和细节控制交给应用的通信传输。\n两者的区别大致如下：\n\n+ TCP面向连接，UDP面向非连接即发送数据前不需要建立链接\n+ TCP提供可靠的服务（数据传输），UDP无法保证\n+ TCP面向字节流，UDP面向报文\n+ TCP数据传输慢，UDP数据传输快\n\n#### tcp的三次握手，4次挥手\n在TCP/IP协议中，TCP协议提供可靠的连接服务，连接是通过三次握手进行初始化的。三次握手的目的是同步连接双方的序列号和确认号并交换 TCP窗口大小信息[这个和传输速度相关]。\n三次握手是\n+ 客户端向服务端发送连接请求\n+ 服务端向客户端发送收到\n+ 客户端向服务端发送确认的\n四次挥手\n+ 客户端向服务端发送关闭请求\n+ 服务端收到关闭请求，然后客户端向服务端发送的通道关闭\n+ 服务端向客户端发送一个关闭的请求\n+ 客户端收到关闭请求，然后服务端关闭向客户端发送的通道。\n\n#### https协议\n|行为|干啥的|\n|-------|------|\n|GET|对服务器资源的简单请求\n|POST|用于发送包含用户提交数据的请求\n|HEAD|类似于GET请求，不过返回的响应中没有具体内容，用于获取报头\n|PUT|传说中请求文档的一个版本\n|DELETE|发出一个删除指定文档的请求\n|TRACE|发送一个请求副本，以跟踪其处理进程\n|OPTIONS|返回所有可用的方法，检查服务器支持哪些方法\n|CONNECT|用于ssl隧道的基于代理的请求\n\n#### http中get和post的区别\n\n从原理性看：\n\n根据HTTP规范，GET用于信息获取，而且应该是安全和幂等的\n根据HTTP规范，POST请求表示可能修改服务器上资源的请求\n从表面上看：\n\nGET请求的数据会附在URL后面，POST的数据放在HTTP包体\nPOST安全性比GET安全性高","source":"_posts/面试常见问题-计算机网络.md","raw":"---\ntitle: 面试常见问题[计网]\ndate: 2019-03-19 16:29:28\ntags: [工作]\n---\n\n\n### 计算机网络\n\n#### TCP和UDP有什么区别？\n> TCP和UDP是OSI模型中的运输层中的协议。TCP提供可靠的通信传输，而UDP则常被用于让广播和细节控制交给应用的通信传输。\n两者的区别大致如下：\n\n+ TCP面向连接，UDP面向非连接即发送数据前不需要建立链接\n+ TCP提供可靠的服务（数据传输），UDP无法保证\n+ TCP面向字节流，UDP面向报文\n+ TCP数据传输慢，UDP数据传输快\n\n#### tcp的三次握手，4次挥手\n在TCP/IP协议中，TCP协议提供可靠的连接服务，连接是通过三次握手进行初始化的。三次握手的目的是同步连接双方的序列号和确认号并交换 TCP窗口大小信息[这个和传输速度相关]。\n三次握手是\n+ 客户端向服务端发送连接请求\n+ 服务端向客户端发送收到\n+ 客户端向服务端发送确认的\n四次挥手\n+ 客户端向服务端发送关闭请求\n+ 服务端收到关闭请求，然后客户端向服务端发送的通道关闭\n+ 服务端向客户端发送一个关闭的请求\n+ 客户端收到关闭请求，然后服务端关闭向客户端发送的通道。\n\n#### https协议\n|行为|干啥的|\n|-------|------|\n|GET|对服务器资源的简单请求\n|POST|用于发送包含用户提交数据的请求\n|HEAD|类似于GET请求，不过返回的响应中没有具体内容，用于获取报头\n|PUT|传说中请求文档的一个版本\n|DELETE|发出一个删除指定文档的请求\n|TRACE|发送一个请求副本，以跟踪其处理进程\n|OPTIONS|返回所有可用的方法，检查服务器支持哪些方法\n|CONNECT|用于ssl隧道的基于代理的请求\n\n#### http中get和post的区别\n\n从原理性看：\n\n根据HTTP规范，GET用于信息获取，而且应该是安全和幂等的\n根据HTTP规范，POST请求表示可能修改服务器上资源的请求\n从表面上看：\n\nGET请求的数据会附在URL后面，POST的数据放在HTTP包体\nPOST安全性比GET安全性高","slug":"面试常见问题-计算机网络","published":1,"updated":"2019-03-21T13:53:03.032Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjtravwrb000d34ug9fdz0eao","content":"<h3 id=\"计算机网络\"><a class=\"markdownIt-Anchor\" href=\"#计算机网络\"></a> 计算机网络</h3>\n<h4 id=\"tcp和udp有什么区别\"><a class=\"markdownIt-Anchor\" href=\"#tcp和udp有什么区别\"></a> TCP和UDP有什么区别？</h4>\n<blockquote>\n<p>TCP和UDP是OSI模型中的运输层中的协议。TCP提供可靠的通信传输，而UDP则常被用于让广播和细节控制交给应用的通信传输。<br>\n两者的区别大致如下：</p>\n</blockquote>\n<ul>\n<li>TCP面向连接，UDP面向非连接即发送数据前不需要建立链接</li>\n<li>TCP提供可靠的服务（数据传输），UDP无法保证</li>\n<li>TCP面向字节流，UDP面向报文</li>\n<li>TCP数据传输慢，UDP数据传输快</li>\n</ul>\n<h4 id=\"tcp的三次握手4次挥手\"><a class=\"markdownIt-Anchor\" href=\"#tcp的三次握手4次挥手\"></a> tcp的三次握手，4次挥手</h4>\n<p>在TCP/IP协议中，TCP协议提供可靠的连接服务，连接是通过三次握手进行初始化的。三次握手的目的是同步连接双方的序列号和确认号并交换 TCP窗口大小信息[这个和传输速度相关]。<br>\n三次握手是</p>\n<ul>\n<li>客户端向服务端发送连接请求</li>\n<li>服务端向客户端发送收到</li>\n<li>客户端向服务端发送确认的<br>\n四次挥手</li>\n<li>客户端向服务端发送关闭请求</li>\n<li>服务端收到关闭请求，然后客户端向服务端发送的通道关闭</li>\n<li>服务端向客户端发送一个关闭的请求</li>\n<li>客户端收到关闭请求，然后服务端关闭向客户端发送的通道。</li>\n</ul>\n<h4 id=\"https协议\"><a class=\"markdownIt-Anchor\" href=\"#https协议\"></a> https协议</h4>\n<table>\n<thead>\n<tr>\n<th>行为</th>\n<th>干啥的</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>GET</td>\n<td>对服务器资源的简单请求</td>\n</tr>\n<tr>\n<td>POST</td>\n<td>用于发送包含用户提交数据的请求</td>\n</tr>\n<tr>\n<td>HEAD</td>\n<td>类似于GET请求，不过返回的响应中没有具体内容，用于获取报头</td>\n</tr>\n<tr>\n<td>PUT</td>\n<td>传说中请求文档的一个版本</td>\n</tr>\n<tr>\n<td>DELETE</td>\n<td>发出一个删除指定文档的请求</td>\n</tr>\n<tr>\n<td>TRACE</td>\n<td>发送一个请求副本，以跟踪其处理进程</td>\n</tr>\n<tr>\n<td>OPTIONS</td>\n<td>返回所有可用的方法，检查服务器支持哪些方法</td>\n</tr>\n<tr>\n<td>CONNECT</td>\n<td>用于ssl隧道的基于代理的请求</td>\n</tr>\n</tbody>\n</table>\n<h4 id=\"http中get和post的区别\"><a class=\"markdownIt-Anchor\" href=\"#http中get和post的区别\"></a> http中get和post的区别</h4>\n<p>从原理性看：</p>\n<p>根据HTTP规范，GET用于信息获取，而且应该是安全和幂等的<br>\n根据HTTP规范，POST请求表示可能修改服务器上资源的请求<br>\n从表面上看：</p>\n<p>GET请求的数据会附在URL后面，POST的数据放在HTTP包体<br>\nPOST安全性比GET安全性高</p>\n","site":{"data":{}},"excerpt":"","more":"<h3 id=\"计算机网络\"><a class=\"markdownIt-Anchor\" href=\"#计算机网络\"></a> 计算机网络</h3>\n<h4 id=\"tcp和udp有什么区别\"><a class=\"markdownIt-Anchor\" href=\"#tcp和udp有什么区别\"></a> TCP和UDP有什么区别？</h4>\n<blockquote>\n<p>TCP和UDP是OSI模型中的运输层中的协议。TCP提供可靠的通信传输，而UDP则常被用于让广播和细节控制交给应用的通信传输。<br>\n两者的区别大致如下：</p>\n</blockquote>\n<ul>\n<li>TCP面向连接，UDP面向非连接即发送数据前不需要建立链接</li>\n<li>TCP提供可靠的服务（数据传输），UDP无法保证</li>\n<li>TCP面向字节流，UDP面向报文</li>\n<li>TCP数据传输慢，UDP数据传输快</li>\n</ul>\n<h4 id=\"tcp的三次握手4次挥手\"><a class=\"markdownIt-Anchor\" href=\"#tcp的三次握手4次挥手\"></a> tcp的三次握手，4次挥手</h4>\n<p>在TCP/IP协议中，TCP协议提供可靠的连接服务，连接是通过三次握手进行初始化的。三次握手的目的是同步连接双方的序列号和确认号并交换 TCP窗口大小信息[这个和传输速度相关]。<br>\n三次握手是</p>\n<ul>\n<li>客户端向服务端发送连接请求</li>\n<li>服务端向客户端发送收到</li>\n<li>客户端向服务端发送确认的<br>\n四次挥手</li>\n<li>客户端向服务端发送关闭请求</li>\n<li>服务端收到关闭请求，然后客户端向服务端发送的通道关闭</li>\n<li>服务端向客户端发送一个关闭的请求</li>\n<li>客户端收到关闭请求，然后服务端关闭向客户端发送的通道。</li>\n</ul>\n<h4 id=\"https协议\"><a class=\"markdownIt-Anchor\" href=\"#https协议\"></a> https协议</h4>\n<table>\n<thead>\n<tr>\n<th>行为</th>\n<th>干啥的</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>GET</td>\n<td>对服务器资源的简单请求</td>\n</tr>\n<tr>\n<td>POST</td>\n<td>用于发送包含用户提交数据的请求</td>\n</tr>\n<tr>\n<td>HEAD</td>\n<td>类似于GET请求，不过返回的响应中没有具体内容，用于获取报头</td>\n</tr>\n<tr>\n<td>PUT</td>\n<td>传说中请求文档的一个版本</td>\n</tr>\n<tr>\n<td>DELETE</td>\n<td>发出一个删除指定文档的请求</td>\n</tr>\n<tr>\n<td>TRACE</td>\n<td>发送一个请求副本，以跟踪其处理进程</td>\n</tr>\n<tr>\n<td>OPTIONS</td>\n<td>返回所有可用的方法，检查服务器支持哪些方法</td>\n</tr>\n<tr>\n<td>CONNECT</td>\n<td>用于ssl隧道的基于代理的请求</td>\n</tr>\n</tbody>\n</table>\n<h4 id=\"http中get和post的区别\"><a class=\"markdownIt-Anchor\" href=\"#http中get和post的区别\"></a> http中get和post的区别</h4>\n<p>从原理性看：</p>\n<p>根据HTTP规范，GET用于信息获取，而且应该是安全和幂等的<br>\n根据HTTP规范，POST请求表示可能修改服务器上资源的请求<br>\n从表面上看：</p>\n<p>GET请求的数据会附在URL后面，POST的数据放在HTTP包体<br>\nPOST安全性比GET安全性高</p>\n"},{"title":"莫比乌斯思想","mathjax":true,"_content":"\n###  莫比乌斯的一些想法\n\n####  首先你要知道莫比乌斯是什么\n> &ensp;这个在前期的时候，他是一种知识点，到后期，它就是一种思想，一种工具。说到底他就是一种容斥的操作\n\n#### 现在主流的莫比乌斯有两种\n\n1. 第一种\n    $ F_n = \\sum_{d|n}^n f_d $                          \n    $ f_n = \\sum_{d|n}^n u_d*F_{\\frac{n}{d}} $                \n2. 第二种\n    $F_n = \\sum_{n|d}f_d $\n    $f_n = \\sum_{n|d}u_{\\frac{d}{n}}*F_d $                \n\n> &ensp;具体的公式推导，一种常见的是你通过举一些例子推出这个公式，还有就是通过狄利克雷卷去证明这个式子，我比较菜，就不献丑了.你可以去百度看下，我的博客也不会特别去处理这些东西，能力不够，我现在对很多东西也都是会用，原理什么的不敢恭维。我写的更多在于我自己对于这些东西的思考。我是通过那些方面去思考的。\n\n#### 怎么用\n&ensp;其实上面的公式也说明了,这个 $ u_i $ 莫比乌斯函数是一定的，那我们只需要去构造 $ f_n , F_n $ 就ok了，当然了，难点也就在于这个构造的方法。  \n&ensp;不过我们这里的公式已经给你了，你去思考怎么凑便会简单一点，还有就是我们这样干的目的最终是为了容斥，这样想就会稍微简单一点吧。\n\n#### 模板\n&ensp; 放一份莫比乌斯的板子，哎呀妈呀数学真的太强大了。其实线性筛真的强大，他能处理所有的积性函数真的秀\n```cpp\nconst int MAXN = 100005;\nbool check[MAXN+10];\nint prime[MAXN+10];\nint mu[MAXN+10];\nvoid Moblus()\n{\n    clr(check,0);\n    mu[1] = 1;\n    int tot = 0;\n    for(int i = 2; i <= MAXN; i++)\n    {\n        if( !check[i] )\n        {\n            prime[tot++] = i;\n            mu[i] = -1;\n        }\n        for(int j = 0; j < tot; j++)\n        {\n            if(i * prime[j] > MAXN) break;\n            check[i * prime[j]] = true;\n            if( i % prime[j] == 0)\n            {\n                mu[i * prime[j]] = 0;\n                break;\n            }\n            else\n            {\n                mu[i * prime[j]] = -mu[i];\n            }\n        }\n    }\n}\n```\n\n \n \n\n\n","source":"_posts/莫比乌斯思路.md","raw":"---\ntitle: 莫比乌斯思想\ntags: [ACM,数论,莫比乌斯]\nmathjax: true\n---\n\n###  莫比乌斯的一些想法\n\n####  首先你要知道莫比乌斯是什么\n> &ensp;这个在前期的时候，他是一种知识点，到后期，它就是一种思想，一种工具。说到底他就是一种容斥的操作\n\n#### 现在主流的莫比乌斯有两种\n\n1. 第一种\n    $ F_n = \\sum_{d|n}^n f_d $                          \n    $ f_n = \\sum_{d|n}^n u_d*F_{\\frac{n}{d}} $                \n2. 第二种\n    $F_n = \\sum_{n|d}f_d $\n    $f_n = \\sum_{n|d}u_{\\frac{d}{n}}*F_d $                \n\n> &ensp;具体的公式推导，一种常见的是你通过举一些例子推出这个公式，还有就是通过狄利克雷卷去证明这个式子，我比较菜，就不献丑了.你可以去百度看下，我的博客也不会特别去处理这些东西，能力不够，我现在对很多东西也都是会用，原理什么的不敢恭维。我写的更多在于我自己对于这些东西的思考。我是通过那些方面去思考的。\n\n#### 怎么用\n&ensp;其实上面的公式也说明了,这个 $ u_i $ 莫比乌斯函数是一定的，那我们只需要去构造 $ f_n , F_n $ 就ok了，当然了，难点也就在于这个构造的方法。  \n&ensp;不过我们这里的公式已经给你了，你去思考怎么凑便会简单一点，还有就是我们这样干的目的最终是为了容斥，这样想就会稍微简单一点吧。\n\n#### 模板\n&ensp; 放一份莫比乌斯的板子，哎呀妈呀数学真的太强大了。其实线性筛真的强大，他能处理所有的积性函数真的秀\n```cpp\nconst int MAXN = 100005;\nbool check[MAXN+10];\nint prime[MAXN+10];\nint mu[MAXN+10];\nvoid Moblus()\n{\n    clr(check,0);\n    mu[1] = 1;\n    int tot = 0;\n    for(int i = 2; i <= MAXN; i++)\n    {\n        if( !check[i] )\n        {\n            prime[tot++] = i;\n            mu[i] = -1;\n        }\n        for(int j = 0; j < tot; j++)\n        {\n            if(i * prime[j] > MAXN) break;\n            check[i * prime[j]] = true;\n            if( i % prime[j] == 0)\n            {\n                mu[i * prime[j]] = 0;\n                break;\n            }\n            else\n            {\n                mu[i * prime[j]] = -mu[i];\n            }\n        }\n    }\n}\n```\n\n \n \n\n\n","slug":"莫比乌斯思路","published":1,"date":"2018-10-05T06:06:18.394Z","updated":"2018-10-06T07:51:26.229Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjtravwrd000g34ugzvwoj8fw","content":"<h3 id=\"莫比乌斯的一些想法\"><a class=\"markdownIt-Anchor\" href=\"#莫比乌斯的一些想法\"></a> 莫比乌斯的一些想法</h3>\n<h4 id=\"首先你要知道莫比乌斯是什么\"><a class=\"markdownIt-Anchor\" href=\"#首先你要知道莫比乌斯是什么\"></a> 首先你要知道莫比乌斯是什么</h4>\n<blockquote>\n<p> 这个在前期的时候，他是一种知识点，到后期，它就是一种思想，一种工具。说到底他就是一种容斥的操作</p>\n</blockquote>\n<h4 id=\"现在主流的莫比乌斯有两种\"><a class=\"markdownIt-Anchor\" href=\"#现在主流的莫比乌斯有两种\"></a> 现在主流的莫比乌斯有两种</h4>\n<ol>\n<li>第一种<br>\n$ F_n = \\sum_{d|n}^n f_d $<br>\n$ f_n = \\sum_{d|n}^n u_d*F_{\\frac{n}{d}} $</li>\n<li>第二种<br>\n$F_n = \\sum_{n|d}f_d $<br>\n$f_n = \\sum_{n|d}u_{\\frac{d}{n}}*F_d $</li>\n</ol>\n<blockquote>\n<p> 具体的公式推导，一种常见的是你通过举一些例子推出这个公式，还有就是通过狄利克雷卷去证明这个式子，我比较菜，就不献丑了.你可以去百度看下，我的博客也不会特别去处理这些东西，能力不够，我现在对很多东西也都是会用，原理什么的不敢恭维。我写的更多在于我自己对于这些东西的思考。我是通过那些方面去思考的。</p>\n</blockquote>\n<h4 id=\"怎么用\"><a class=\"markdownIt-Anchor\" href=\"#怎么用\"></a> 怎么用</h4>\n<p> 其实上面的公式也说明了,这个 $ u_i $ 莫比乌斯函数是一定的，那我们只需要去构造 $ f_n , F_n $ 就ok了，当然了，难点也就在于这个构造的方法。<br>\n 不过我们这里的公式已经给你了，你去思考怎么凑便会简单一点，还有就是我们这样干的目的最终是为了容斥，这样想就会稍微简单一点吧。</p>\n<h4 id=\"模板\"><a class=\"markdownIt-Anchor\" href=\"#模板\"></a> 模板</h4>\n<p>  放一份莫比乌斯的板子，哎呀妈呀数学真的太强大了。其实线性筛真的强大，他能处理所有的积性函数真的秀</p>\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> <span class=\"keyword\">int</span> MAXN = <span class=\"number\">100005</span>;</span><br><span class=\"line\"><span class=\"keyword\">bool</span> check[MAXN+<span class=\"number\">10</span>];</span><br><span class=\"line\"><span class=\"keyword\">int</span> prime[MAXN+<span class=\"number\">10</span>];</span><br><span class=\"line\"><span class=\"keyword\">int</span> mu[MAXN+<span class=\"number\">10</span>];</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">Moblus</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    clr(check,<span class=\"number\">0</span>);</span><br><span class=\"line\">    mu[<span class=\"number\">1</span>] = <span class=\"number\">1</span>;</span><br><span class=\"line\">    <span class=\"keyword\">int</span> tot = <span class=\"number\">0</span>;</span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i = <span class=\"number\">2</span>; i &lt;= MAXN; i++)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span>( !check[i] )</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            prime[tot++] = i;</span><br><span class=\"line\">            mu[i] = <span class=\"number\">-1</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> j = <span class=\"number\">0</span>; j &lt; tot; j++)</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            <span class=\"keyword\">if</span>(i * prime[j] &gt; MAXN) <span class=\"keyword\">break</span>;</span><br><span class=\"line\">            check[i * prime[j]] = <span class=\"literal\">true</span>;</span><br><span class=\"line\">            <span class=\"keyword\">if</span>( i % prime[j] == <span class=\"number\">0</span>)</span><br><span class=\"line\">            &#123;</span><br><span class=\"line\">                mu[i * prime[j]] = <span class=\"number\">0</span>;</span><br><span class=\"line\">                <span class=\"keyword\">break</span>;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            <span class=\"keyword\">else</span></span><br><span class=\"line\">            &#123;</span><br><span class=\"line\">                mu[i * prime[j]] = -mu[i];</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n","site":{"data":{}},"excerpt":"","more":"<h3 id=\"莫比乌斯的一些想法\"><a class=\"markdownIt-Anchor\" href=\"#莫比乌斯的一些想法\"></a> 莫比乌斯的一些想法</h3>\n<h4 id=\"首先你要知道莫比乌斯是什么\"><a class=\"markdownIt-Anchor\" href=\"#首先你要知道莫比乌斯是什么\"></a> 首先你要知道莫比乌斯是什么</h4>\n<blockquote>\n<p> 这个在前期的时候，他是一种知识点，到后期，它就是一种思想，一种工具。说到底他就是一种容斥的操作</p>\n</blockquote>\n<h4 id=\"现在主流的莫比乌斯有两种\"><a class=\"markdownIt-Anchor\" href=\"#现在主流的莫比乌斯有两种\"></a> 现在主流的莫比乌斯有两种</h4>\n<ol>\n<li>第一种<br>\n$ F_n = \\sum_{d|n}^n f_d $<br>\n$ f_n = \\sum_{d|n}^n u_d*F_{\\frac{n}{d}} $</li>\n<li>第二种<br>\n$F_n = \\sum_{n|d}f_d $<br>\n$f_n = \\sum_{n|d}u_{\\frac{d}{n}}*F_d $</li>\n</ol>\n<blockquote>\n<p> 具体的公式推导，一种常见的是你通过举一些例子推出这个公式，还有就是通过狄利克雷卷去证明这个式子，我比较菜，就不献丑了.你可以去百度看下，我的博客也不会特别去处理这些东西，能力不够，我现在对很多东西也都是会用，原理什么的不敢恭维。我写的更多在于我自己对于这些东西的思考。我是通过那些方面去思考的。</p>\n</blockquote>\n<h4 id=\"怎么用\"><a class=\"markdownIt-Anchor\" href=\"#怎么用\"></a> 怎么用</h4>\n<p> 其实上面的公式也说明了,这个 $ u_i $ 莫比乌斯函数是一定的，那我们只需要去构造 $ f_n , F_n $ 就ok了，当然了，难点也就在于这个构造的方法。<br>\n 不过我们这里的公式已经给你了，你去思考怎么凑便会简单一点，还有就是我们这样干的目的最终是为了容斥，这样想就会稍微简单一点吧。</p>\n<h4 id=\"模板\"><a class=\"markdownIt-Anchor\" href=\"#模板\"></a> 模板</h4>\n<p>  放一份莫比乌斯的板子，哎呀妈呀数学真的太强大了。其实线性筛真的强大，他能处理所有的积性函数真的秀</p>\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> <span class=\"keyword\">int</span> MAXN = <span class=\"number\">100005</span>;</span><br><span class=\"line\"><span class=\"keyword\">bool</span> check[MAXN+<span class=\"number\">10</span>];</span><br><span class=\"line\"><span class=\"keyword\">int</span> prime[MAXN+<span class=\"number\">10</span>];</span><br><span class=\"line\"><span class=\"keyword\">int</span> mu[MAXN+<span class=\"number\">10</span>];</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">Moblus</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    clr(check,<span class=\"number\">0</span>);</span><br><span class=\"line\">    mu[<span class=\"number\">1</span>] = <span class=\"number\">1</span>;</span><br><span class=\"line\">    <span class=\"keyword\">int</span> tot = <span class=\"number\">0</span>;</span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i = <span class=\"number\">2</span>; i &lt;= MAXN; i++)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span>( !check[i] )</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            prime[tot++] = i;</span><br><span class=\"line\">            mu[i] = <span class=\"number\">-1</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> j = <span class=\"number\">0</span>; j &lt; tot; j++)</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            <span class=\"keyword\">if</span>(i * prime[j] &gt; MAXN) <span class=\"keyword\">break</span>;</span><br><span class=\"line\">            check[i * prime[j]] = <span class=\"literal\">true</span>;</span><br><span class=\"line\">            <span class=\"keyword\">if</span>( i % prime[j] == <span class=\"number\">0</span>)</span><br><span class=\"line\">            &#123;</span><br><span class=\"line\">                mu[i * prime[j]] = <span class=\"number\">0</span>;</span><br><span class=\"line\">                <span class=\"keyword\">break</span>;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            <span class=\"keyword\">else</span></span><br><span class=\"line\">            &#123;</span><br><span class=\"line\">                mu[i * prime[j]] = -mu[i];</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n"},{"title":"domjudge配置流程","date":"2018-12-27T05:01:05.000Z","_content":"\n\n# domjudge配置流程\n\n对于很多的acmer来说，domjuege不是一个陌生的东西，很多的比赛里面，用到的系统不是domjudge就是pc2，就我个人来说，感觉domjudge用的好像更多点，受老师的嘱咐，最近把domjudge的基础流程走了一遍。\n> 因为博主的实力不太够，我是刚退役，就会点acm的题，很多知识都是小白，所以这个可以说是从零开始的，很多都是建立在我的认知上的，如有不对，还请谅解\n\n####  domjudge是什么呢？\n > 一些没怎么打过现场赛的可能对这个东西还是比较陌生。这个简单的说就是一个开源的在线判题系统，他很多东西都帮你集成好了，你利用这个平台，可以搭建一些小的比赛，网络赛很多是放在别的学校的oj上的，但是现场赛，不能上网，只能局域网访问，这个时候来一个domjudge这种类型的就很好。基本所有的功能它都有。\n\n## 怎么配\ndomjudge的配置分为两步，这两步理论上是可以独立开来的。  \n第一步是配domjudge的服务端，第二步是配置donjudge的判题端。\n\n### 准备工作\n我这里用的服务端和判题端都是在 `ubuntu 18.04`下面进行操作的。而且我看网上的很多文档也是这样写的。\n\n#### 1. 安装依赖包和环境：\n```shell\nsudo apt-get upgrade && sudo apt-get update\n```\n\n```shell\nsudo apt install gcc g++ make zip unzip mariadb-server \\\n        apache2 php php-cli libapache2-mod-php php-zip \\\n        php-gd php-curl php-mysql php-json php-xml php-mbstring \\\n        acl bsdmainutils ntp phpmyadmin python-pygments \\\n        libcgroup-dev linuxdoc-tools linuxdoc-tools-text \\\n        groff texlive-latex-recommended texlive-latex-extra \\\n        texlive-fonts-recommended texlive-lang-european\n```\n\n安装时选择 `apache2`\n\n```shell\nsudo apt install libcurl4-gnutls-dev libjsoncpp-dev libmagic-dev\n```\n\n```shell\nsudo phpenmod json\n```\n\n#### 2. 编译domjudge\n```shell\ncd Downloads   \nwget https://www.domjudge.org/releases/domjudge-6.0.3.tar.gz      \ntar -zxvf domjudge-6.0.3.tar.gz   \n```\n这里也可以通过上[官网](https://www.domjudge.org)进行下载，下载和解压的地址，要记住。\n\n```shell\ncd domjudge-6.0.3\n./configure --prefix=$HOME/domjudge --with-baseurl=127.0.0.1\nmake domserver && sudo make install-domserver\nmake judgehost && sudo make install-judgehost\nmake docs && sudo make install-docs\n```\n那个127.0.0.1表示的是你的默认端口，后面两句分别是安装服务端和判题端。\n\n----\n\n### domjudge服务端\n\n#### 1. 配置数据库\n```shell\ncd ~/domjudge/domserver\nsudo bin/dj_setup_database -u root install\n```\n这里有个点在于 ~ 对应的是主目录\n\n#### 2. 配置web服务器\n这个提示写在前面:\n注意先不要直接复制跑代码，要把`ln`命令中的`username`换成你的实际用户名.\n不然你就要去把那个文件删除，从新去添加。\n```shell\ncd ~/domjudge/domserver\nsudo ln -s /home/username/domjudge/domserver/etc/apache.conf /etc/apache2/conf-available/domjudge.conf\nsudo a2enmod rewrite\nsudo a2enconf domjudge\nsudo systemctl reload apache2\n```\n这个时候你可以通过连接上`http://127.0.0.1/domjudge`.通过默认用户名`admin`和密码`admin`登录后台。\n\n#### 3. 配置mysql\n编辑`/etc/mysql/my.cnf`,追加以下内容：\n> 这里口头以'/'开始就表示是以根目录开始，这里记得别用vi，没有vim记得更新，vi是真的难用，不接受反驳。啦啦啦。\n```\n[mysql]\nmax_connections = 1000\nmax_allowed_packet = 16MB\ninnodb_log_file_size = 48MB\n```\n其中 max_allowed_packet 数值改成两倍于题目测试数据文件的大小，innodb_log_file_size 数值改成十倍于题目测试数据文件的大小。这里我不是很清楚用处，目前还没有碰到这些问题。\n\n```shell\nsudo systemctl restart mysql\n```\n\n#### 4. 配置php\n编辑`~/domjudge/domserver/etc/apache.conf`,取消以下几行内容前的注释:\n```\n<IfModule mod_php7.c>\nphp_value max_file_uploads      100\nphp_value upload_max_filesize   128M\nphp_value post_max_size         128M\nphp_value memory_limit          512M\n</IfModule>\n```\n编辑`/etc/php/7.2/apache2/php.ini`,搜索`date.timezone`关键字,取消前面的注释将值设为你们的地址，举例来说`Asia/Shanghai`.这里的是否有格式要求我就不清楚了。\n\n```shell\nsudo systemctl restart apache2\n```\n\n#### 5. 配置apache\n编辑`/etc/apache2/apache2.conf`，搜索`KeepAlive`关键字，并将其值设为`off`,并加一行\n`MaxClients 1000`\n```shell\nsudo systemctl restart apache2\n```\n不知道干嘛用的。\n\n> 现在怎么说呢，这个服务端算是配好了，至于后面的一些加题，加队，加人的操作，在后面会给出来。后面配置这些文件的方案都是可视化的，在集成的网站上你会通过一个像用户的操作，去进行更改，这个在后面再说。\n\n-------\n\n## judgehost配置\n这里的判题系统，怎么说呢，和我一开始的想法是不一样的，一开始我是认为，服务器去找判题机，这样每次配置的时候都是很烦的一件事，后来弄清楚，这里的原理是这样，这里的judgehost的身份相当于是一个用户，judgehost去向服务端发送请求，通过这个就可以让这些东西建立链接。所以我们服务端配好后，就不用去管一些奇奇怪怪的东西了，接着去配判题系统就可以了。\n\n#### 1. 添加用户 \n这个就看你一台主机想配几个判题机了。一般来说，现在的电脑都不会只配置一个判题机吧，我这里就默认4个了。\n```shell\nuseradd -d /nonexistent -U -M -s /bin/false domjudge-run-0\nuseradd -d /nonexistent -U -M -s /bin/false domjudge-run-1\nuseradd -d /nonexistent -U -M -s /bin/false domjudge-run-2\nuseradd -d /nonexistent -U -M -s /bin/false domjudge-run-3\ngroupadd domjudge-run\n```\n对于多核判题，每次判题记得要运行`~/domjudge/judgehost/bin`里面的`create_cgroups`,记得开权限，怎么执行，就是 `sudo ./create_cgroups`，不然会报错。\n  \n#### 2.配置 sudoers\n这里的作用应该是给domjudge_run权限。\n```shell\nsudo cp $HOME/domjudge/judgehost/etc/sudoers-domjudge /etc/sudoers.d/\n```\n#### 3.修改rest密码\n这里的用处在于，建立链接的时候，让服务端辨识。  \n找到`~/domjudge/judgehost/etc/restapi.secret`,这个文件的一个样例：\n```\ndefault\thttp://localhost/domjudge/api\tjudgehost\tDgj9COHDKa5bSEmT\n```\n其中将那个`localhost`换成你服务器的IP地址，不知道的话，用`ifconfig`看下.\n后面的`judgehost` 是用户名，`Dgj9COHDKa5bSEmT`是密码。这个也是要修改的。\n\n打开你服务端所安装的电脑的目录`~/domjudge/domserver/etc/restapi.secret`\n你会发现这两个格式是相同的，你把判题端的用户名和密码换成和客户端的一样就可以了。\n\n#### 4.构建 chroot 环境\n这里的用处是他把你的判题环境也集成好了，你只要选择安装一下就可以，但是它那里面是默认源，可能有点不太行，推荐用阿里源，用了两次没啥问题。使用 vim 等文本编辑器编辑`~/domjudge/judgehost/dj_make_chroot`脚本，搜索 mirror 这个关键字，并更改搜索到的 ubuntu 的 mirror 为国内源,`http://mirrors.aliyun.com/ubuntu/`然后运行脚本\n```shell\n./dj_make_chroot\n```\n这个时候就要下载很多东西，慢慢等。\n\n#### 5.设置cgruop\n使用 vim 等文本编辑器编辑 /etc/default/grub 这个文件，对其中的这一行做如下修改：\n```\nGRUB_CMDLINE_LINUX_DEFAULT=\"quiet cgroup_enable=memory swapaccount=1\"\n```\n然后执行\n```shell\nupdate-grub\n```\n#### 6.重启计算机\n`reboot`指令就行。\n\n#### 7.开判题\n```shell\ncd ~/domjudge/judgehost/bin\nsudo ./create_cgroups\n```\n然后开一个窗口\n```shell\nsudo ./judgedaemon -n 0\n```\n这个就意味着0号在跑了，我们一共在前面设置了4个，如果想再开一个，就直接再开个控制台，把0换1,2,3.\n\n到这个地方，基本上，基础的就配好了，接着你就可以通过默认用户和密码登录，尝试交题。如果出错，那我就不知道了。\n\n\n----\n## 管理员方面。\n要先创建比赛，加入题目，加入队伍，加入用户，用户与队伍通过一个外健来对应，而你创建比赛后，比赛里面的题目可以通过调用来处理，\n这里我还不是很清楚，然后队伍的批量导入是需要一定的格式的。","source":"_posts/domjudge配置流程.md","raw":"---\ntitle: domjudge配置流程 \ntags: [ACM,oj,服务器]\ndate: 2018-12-27 13:01:05\n---\n\n\n# domjudge配置流程\n\n对于很多的acmer来说，domjuege不是一个陌生的东西，很多的比赛里面，用到的系统不是domjudge就是pc2，就我个人来说，感觉domjudge用的好像更多点，受老师的嘱咐，最近把domjudge的基础流程走了一遍。\n> 因为博主的实力不太够，我是刚退役，就会点acm的题，很多知识都是小白，所以这个可以说是从零开始的，很多都是建立在我的认知上的，如有不对，还请谅解\n\n####  domjudge是什么呢？\n > 一些没怎么打过现场赛的可能对这个东西还是比较陌生。这个简单的说就是一个开源的在线判题系统，他很多东西都帮你集成好了，你利用这个平台，可以搭建一些小的比赛，网络赛很多是放在别的学校的oj上的，但是现场赛，不能上网，只能局域网访问，这个时候来一个domjudge这种类型的就很好。基本所有的功能它都有。\n\n## 怎么配\ndomjudge的配置分为两步，这两步理论上是可以独立开来的。  \n第一步是配domjudge的服务端，第二步是配置donjudge的判题端。\n\n### 准备工作\n我这里用的服务端和判题端都是在 `ubuntu 18.04`下面进行操作的。而且我看网上的很多文档也是这样写的。\n\n#### 1. 安装依赖包和环境：\n```shell\nsudo apt-get upgrade && sudo apt-get update\n```\n\n```shell\nsudo apt install gcc g++ make zip unzip mariadb-server \\\n        apache2 php php-cli libapache2-mod-php php-zip \\\n        php-gd php-curl php-mysql php-json php-xml php-mbstring \\\n        acl bsdmainutils ntp phpmyadmin python-pygments \\\n        libcgroup-dev linuxdoc-tools linuxdoc-tools-text \\\n        groff texlive-latex-recommended texlive-latex-extra \\\n        texlive-fonts-recommended texlive-lang-european\n```\n\n安装时选择 `apache2`\n\n```shell\nsudo apt install libcurl4-gnutls-dev libjsoncpp-dev libmagic-dev\n```\n\n```shell\nsudo phpenmod json\n```\n\n#### 2. 编译domjudge\n```shell\ncd Downloads   \nwget https://www.domjudge.org/releases/domjudge-6.0.3.tar.gz      \ntar -zxvf domjudge-6.0.3.tar.gz   \n```\n这里也可以通过上[官网](https://www.domjudge.org)进行下载，下载和解压的地址，要记住。\n\n```shell\ncd domjudge-6.0.3\n./configure --prefix=$HOME/domjudge --with-baseurl=127.0.0.1\nmake domserver && sudo make install-domserver\nmake judgehost && sudo make install-judgehost\nmake docs && sudo make install-docs\n```\n那个127.0.0.1表示的是你的默认端口，后面两句分别是安装服务端和判题端。\n\n----\n\n### domjudge服务端\n\n#### 1. 配置数据库\n```shell\ncd ~/domjudge/domserver\nsudo bin/dj_setup_database -u root install\n```\n这里有个点在于 ~ 对应的是主目录\n\n#### 2. 配置web服务器\n这个提示写在前面:\n注意先不要直接复制跑代码，要把`ln`命令中的`username`换成你的实际用户名.\n不然你就要去把那个文件删除，从新去添加。\n```shell\ncd ~/domjudge/domserver\nsudo ln -s /home/username/domjudge/domserver/etc/apache.conf /etc/apache2/conf-available/domjudge.conf\nsudo a2enmod rewrite\nsudo a2enconf domjudge\nsudo systemctl reload apache2\n```\n这个时候你可以通过连接上`http://127.0.0.1/domjudge`.通过默认用户名`admin`和密码`admin`登录后台。\n\n#### 3. 配置mysql\n编辑`/etc/mysql/my.cnf`,追加以下内容：\n> 这里口头以'/'开始就表示是以根目录开始，这里记得别用vi，没有vim记得更新，vi是真的难用，不接受反驳。啦啦啦。\n```\n[mysql]\nmax_connections = 1000\nmax_allowed_packet = 16MB\ninnodb_log_file_size = 48MB\n```\n其中 max_allowed_packet 数值改成两倍于题目测试数据文件的大小，innodb_log_file_size 数值改成十倍于题目测试数据文件的大小。这里我不是很清楚用处，目前还没有碰到这些问题。\n\n```shell\nsudo systemctl restart mysql\n```\n\n#### 4. 配置php\n编辑`~/domjudge/domserver/etc/apache.conf`,取消以下几行内容前的注释:\n```\n<IfModule mod_php7.c>\nphp_value max_file_uploads      100\nphp_value upload_max_filesize   128M\nphp_value post_max_size         128M\nphp_value memory_limit          512M\n</IfModule>\n```\n编辑`/etc/php/7.2/apache2/php.ini`,搜索`date.timezone`关键字,取消前面的注释将值设为你们的地址，举例来说`Asia/Shanghai`.这里的是否有格式要求我就不清楚了。\n\n```shell\nsudo systemctl restart apache2\n```\n\n#### 5. 配置apache\n编辑`/etc/apache2/apache2.conf`，搜索`KeepAlive`关键字，并将其值设为`off`,并加一行\n`MaxClients 1000`\n```shell\nsudo systemctl restart apache2\n```\n不知道干嘛用的。\n\n> 现在怎么说呢，这个服务端算是配好了，至于后面的一些加题，加队，加人的操作，在后面会给出来。后面配置这些文件的方案都是可视化的，在集成的网站上你会通过一个像用户的操作，去进行更改，这个在后面再说。\n\n-------\n\n## judgehost配置\n这里的判题系统，怎么说呢，和我一开始的想法是不一样的，一开始我是认为，服务器去找判题机，这样每次配置的时候都是很烦的一件事，后来弄清楚，这里的原理是这样，这里的judgehost的身份相当于是一个用户，judgehost去向服务端发送请求，通过这个就可以让这些东西建立链接。所以我们服务端配好后，就不用去管一些奇奇怪怪的东西了，接着去配判题系统就可以了。\n\n#### 1. 添加用户 \n这个就看你一台主机想配几个判题机了。一般来说，现在的电脑都不会只配置一个判题机吧，我这里就默认4个了。\n```shell\nuseradd -d /nonexistent -U -M -s /bin/false domjudge-run-0\nuseradd -d /nonexistent -U -M -s /bin/false domjudge-run-1\nuseradd -d /nonexistent -U -M -s /bin/false domjudge-run-2\nuseradd -d /nonexistent -U -M -s /bin/false domjudge-run-3\ngroupadd domjudge-run\n```\n对于多核判题，每次判题记得要运行`~/domjudge/judgehost/bin`里面的`create_cgroups`,记得开权限，怎么执行，就是 `sudo ./create_cgroups`，不然会报错。\n  \n#### 2.配置 sudoers\n这里的作用应该是给domjudge_run权限。\n```shell\nsudo cp $HOME/domjudge/judgehost/etc/sudoers-domjudge /etc/sudoers.d/\n```\n#### 3.修改rest密码\n这里的用处在于，建立链接的时候，让服务端辨识。  \n找到`~/domjudge/judgehost/etc/restapi.secret`,这个文件的一个样例：\n```\ndefault\thttp://localhost/domjudge/api\tjudgehost\tDgj9COHDKa5bSEmT\n```\n其中将那个`localhost`换成你服务器的IP地址，不知道的话，用`ifconfig`看下.\n后面的`judgehost` 是用户名，`Dgj9COHDKa5bSEmT`是密码。这个也是要修改的。\n\n打开你服务端所安装的电脑的目录`~/domjudge/domserver/etc/restapi.secret`\n你会发现这两个格式是相同的，你把判题端的用户名和密码换成和客户端的一样就可以了。\n\n#### 4.构建 chroot 环境\n这里的用处是他把你的判题环境也集成好了，你只要选择安装一下就可以，但是它那里面是默认源，可能有点不太行，推荐用阿里源，用了两次没啥问题。使用 vim 等文本编辑器编辑`~/domjudge/judgehost/dj_make_chroot`脚本，搜索 mirror 这个关键字，并更改搜索到的 ubuntu 的 mirror 为国内源,`http://mirrors.aliyun.com/ubuntu/`然后运行脚本\n```shell\n./dj_make_chroot\n```\n这个时候就要下载很多东西，慢慢等。\n\n#### 5.设置cgruop\n使用 vim 等文本编辑器编辑 /etc/default/grub 这个文件，对其中的这一行做如下修改：\n```\nGRUB_CMDLINE_LINUX_DEFAULT=\"quiet cgroup_enable=memory swapaccount=1\"\n```\n然后执行\n```shell\nupdate-grub\n```\n#### 6.重启计算机\n`reboot`指令就行。\n\n#### 7.开判题\n```shell\ncd ~/domjudge/judgehost/bin\nsudo ./create_cgroups\n```\n然后开一个窗口\n```shell\nsudo ./judgedaemon -n 0\n```\n这个就意味着0号在跑了，我们一共在前面设置了4个，如果想再开一个，就直接再开个控制台，把0换1,2,3.\n\n到这个地方，基本上，基础的就配好了，接着你就可以通过默认用户和密码登录，尝试交题。如果出错，那我就不知道了。\n\n\n----\n## 管理员方面。\n要先创建比赛，加入题目，加入队伍，加入用户，用户与队伍通过一个外健来对应，而你创建比赛后，比赛里面的题目可以通过调用来处理，\n这里我还不是很清楚，然后队伍的批量导入是需要一定的格式的。","slug":"domjudge配置流程","published":1,"updated":"2019-01-03T15:28:05.468Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjtravwv6001834ugtpcmt7kt","content":"<h1 id=\"domjudge配置流程\"><a class=\"markdownIt-Anchor\" href=\"#domjudge配置流程\"></a> domjudge配置流程</h1>\n<p>对于很多的acmer来说，domjuege不是一个陌生的东西，很多的比赛里面，用到的系统不是domjudge就是pc2，就我个人来说，感觉domjudge用的好像更多点，受老师的嘱咐，最近把domjudge的基础流程走了一遍。</p>\n<blockquote>\n<p>因为博主的实力不太够，我是刚退役，就会点acm的题，很多知识都是小白，所以这个可以说是从零开始的，很多都是建立在我的认知上的，如有不对，还请谅解</p>\n</blockquote>\n<h4 id=\"domjudge是什么呢\"><a class=\"markdownIt-Anchor\" href=\"#domjudge是什么呢\"></a> domjudge是什么呢？</h4>\n<blockquote>\n<p>一些没怎么打过现场赛的可能对这个东西还是比较陌生。这个简单的说就是一个开源的在线判题系统，他很多东西都帮你集成好了，你利用这个平台，可以搭建一些小的比赛，网络赛很多是放在别的学校的oj上的，但是现场赛，不能上网，只能局域网访问，这个时候来一个domjudge这种类型的就很好。基本所有的功能它都有。</p>\n</blockquote>\n<h2 id=\"怎么配\"><a class=\"markdownIt-Anchor\" href=\"#怎么配\"></a> 怎么配</h2>\n<p>domjudge的配置分为两步，这两步理论上是可以独立开来的。<br>\n第一步是配domjudge的服务端，第二步是配置donjudge的判题端。</p>\n<h3 id=\"准备工作\"><a class=\"markdownIt-Anchor\" href=\"#准备工作\"></a> 准备工作</h3>\n<p>我这里用的服务端和判题端都是在 <code>ubuntu 18.04</code>下面进行操作的。而且我看网上的很多文档也是这样写的。</p>\n<h4 id=\"1-安装依赖包和环境\"><a class=\"markdownIt-Anchor\" href=\"#1-安装依赖包和环境\"></a> 1. 安装依赖包和环境：</h4>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sudo apt-get upgrade &amp;&amp; sudo apt-get update</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sudo apt install gcc g++ make zip unzip mariadb-server \\</span><br><span class=\"line\">        apache2 php php-cli libapache2-mod-php php-zip \\</span><br><span class=\"line\">        php-gd php-curl php-mysql php-json php-xml php-mbstring \\</span><br><span class=\"line\">        acl bsdmainutils ntp phpmyadmin python-pygments \\</span><br><span class=\"line\">        libcgroup-dev linuxdoc-tools linuxdoc-tools-text \\</span><br><span class=\"line\">        groff texlive-latex-recommended texlive-latex-extra \\</span><br><span class=\"line\">        texlive-fonts-recommended texlive-lang-european</span><br></pre></td></tr></table></figure>\n<p>安装时选择 <code>apache2</code></p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sudo apt install libcurl4-gnutls-dev libjsoncpp-dev libmagic-dev</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sudo phpenmod json</span><br></pre></td></tr></table></figure>\n<h4 id=\"2-编译domjudge\"><a class=\"markdownIt-Anchor\" href=\"#2-编译domjudge\"></a> 2. 编译domjudge</h4>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">cd Downloads   </span><br><span class=\"line\">wget https://www.domjudge.org/releases/domjudge-6.0.3.tar.gz      </span><br><span class=\"line\">tar -zxvf domjudge-6.0.3.tar.gz</span><br></pre></td></tr></table></figure>\n<p>这里也可以通过上<a href=\"https://www.domjudge.org\" target=\"_blank\" rel=\"noopener\">官网</a>进行下载，下载和解压的地址，要记住。</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">cd domjudge-6.0.3</span><br><span class=\"line\">./configure --prefix=$HOME/domjudge --with-baseurl=127.0.0.1</span><br><span class=\"line\">make domserver &amp;&amp; sudo make install-domserver</span><br><span class=\"line\">make judgehost &amp;&amp; sudo make install-judgehost</span><br><span class=\"line\">make docs &amp;&amp; sudo make install-docs</span><br></pre></td></tr></table></figure>\n<p>那个127.0.0.1表示的是你的默认端口，后面两句分别是安装服务端和判题端。</p>\n<hr>\n<h3 id=\"domjudge服务端\"><a class=\"markdownIt-Anchor\" href=\"#domjudge服务端\"></a> domjudge服务端</h3>\n<h4 id=\"1-配置数据库\"><a class=\"markdownIt-Anchor\" href=\"#1-配置数据库\"></a> 1. 配置数据库</h4>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">cd ~/domjudge/domserver</span><br><span class=\"line\">sudo bin/dj_setup_database -u root install</span><br></pre></td></tr></table></figure>\n<p>这里有个点在于 ~ 对应的是主目录</p>\n<h4 id=\"2-配置web服务器\"><a class=\"markdownIt-Anchor\" href=\"#2-配置web服务器\"></a> 2. 配置web服务器</h4>\n<p>这个提示写在前面:<br>\n注意先不要直接复制跑代码，要把<code>ln</code>命令中的<code>username</code>换成你的实际用户名.<br>\n不然你就要去把那个文件删除，从新去添加。</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">cd ~/domjudge/domserver</span><br><span class=\"line\">sudo ln -s /home/username/domjudge/domserver/etc/apache.conf /etc/apache2/conf-available/domjudge.conf</span><br><span class=\"line\">sudo a2enmod rewrite</span><br><span class=\"line\">sudo a2enconf domjudge</span><br><span class=\"line\">sudo systemctl reload apache2</span><br></pre></td></tr></table></figure>\n<p>这个时候你可以通过连接上<code>http://127.0.0.1/domjudge</code>.通过默认用户名<code>admin</code>和密码<code>admin</code>登录后台。</p>\n<h4 id=\"3-配置mysql\"><a class=\"markdownIt-Anchor\" href=\"#3-配置mysql\"></a> 3. 配置mysql</h4>\n<p>编辑<code>/etc/mysql/my.cnf</code>,追加以下内容：</p>\n<blockquote>\n<p>这里口头以’/'开始就表示是以根目录开始，这里记得别用vi，没有vim记得更新，vi是真的难用，不接受反驳。啦啦啦。</p>\n</blockquote>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[mysql]</span><br><span class=\"line\">max_connections = 1000</span><br><span class=\"line\">max_allowed_packet = 16MB</span><br><span class=\"line\">innodb_log_file_size = 48MB</span><br></pre></td></tr></table></figure>\n<p>其中 max_allowed_packet 数值改成两倍于题目测试数据文件的大小，innodb_log_file_size 数值改成十倍于题目测试数据文件的大小。这里我不是很清楚用处，目前还没有碰到这些问题。</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sudo systemctl restart mysql</span><br></pre></td></tr></table></figure>\n<h4 id=\"4-配置php\"><a class=\"markdownIt-Anchor\" href=\"#4-配置php\"></a> 4. 配置php</h4>\n<p>编辑<code>~/domjudge/domserver/etc/apache.conf</code>,取消以下几行内容前的注释:</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;IfModule mod_php7.c&gt;</span><br><span class=\"line\">php_value max_file_uploads      100</span><br><span class=\"line\">php_value upload_max_filesize   128M</span><br><span class=\"line\">php_value post_max_size         128M</span><br><span class=\"line\">php_value memory_limit          512M</span><br><span class=\"line\">&lt;/IfModule&gt;</span><br></pre></td></tr></table></figure>\n<p>编辑<code>/etc/php/7.2/apache2/php.ini</code>,搜索<code>date.timezone</code>关键字,取消前面的注释将值设为你们的地址，举例来说<code>Asia/Shanghai</code>.这里的是否有格式要求我就不清楚了。</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sudo systemctl restart apache2</span><br></pre></td></tr></table></figure>\n<h4 id=\"5-配置apache\"><a class=\"markdownIt-Anchor\" href=\"#5-配置apache\"></a> 5. 配置apache</h4>\n<p>编辑<code>/etc/apache2/apache2.conf</code>，搜索<code>KeepAlive</code>关键字，并将其值设为<code>off</code>,并加一行<br>\n<code>MaxClients 1000</code></p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sudo systemctl restart apache2</span><br></pre></td></tr></table></figure>\n<p>不知道干嘛用的。</p>\n<blockquote>\n<p>现在怎么说呢，这个服务端算是配好了，至于后面的一些加题，加队，加人的操作，在后面会给出来。后面配置这些文件的方案都是可视化的，在集成的网站上你会通过一个像用户的操作，去进行更改，这个在后面再说。</p>\n</blockquote>\n<hr>\n<h2 id=\"judgehost配置\"><a class=\"markdownIt-Anchor\" href=\"#judgehost配置\"></a> judgehost配置</h2>\n<p>这里的判题系统，怎么说呢，和我一开始的想法是不一样的，一开始我是认为，服务器去找判题机，这样每次配置的时候都是很烦的一件事，后来弄清楚，这里的原理是这样，这里的judgehost的身份相当于是一个用户，judgehost去向服务端发送请求，通过这个就可以让这些东西建立链接。所以我们服务端配好后，就不用去管一些奇奇怪怪的东西了，接着去配判题系统就可以了。</p>\n<h4 id=\"1-添加用户\"><a class=\"markdownIt-Anchor\" href=\"#1-添加用户\"></a> 1. 添加用户</h4>\n<p>这个就看你一台主机想配几个判题机了。一般来说，现在的电脑都不会只配置一个判题机吧，我这里就默认4个了。</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">useradd -d /nonexistent -U -M -s /bin/false domjudge-run-0</span><br><span class=\"line\">useradd -d /nonexistent -U -M -s /bin/false domjudge-run-1</span><br><span class=\"line\">useradd -d /nonexistent -U -M -s /bin/false domjudge-run-2</span><br><span class=\"line\">useradd -d /nonexistent -U -M -s /bin/false domjudge-run-3</span><br><span class=\"line\">groupadd domjudge-run</span><br></pre></td></tr></table></figure>\n<p>对于多核判题，每次判题记得要运行<code>~/domjudge/judgehost/bin</code>里面的<code>create_cgroups</code>,记得开权限，怎么执行，就是 <code>sudo ./create_cgroups</code>，不然会报错。</p>\n<h4 id=\"2配置-sudoers\"><a class=\"markdownIt-Anchor\" href=\"#2配置-sudoers\"></a> 2.配置 sudoers</h4>\n<p>这里的作用应该是给domjudge_run权限。</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sudo cp $HOME/domjudge/judgehost/etc/sudoers-domjudge /etc/sudoers.d/</span><br></pre></td></tr></table></figure>\n<h4 id=\"3修改rest密码\"><a class=\"markdownIt-Anchor\" href=\"#3修改rest密码\"></a> 3.修改rest密码</h4>\n<p>这里的用处在于，建立链接的时候，让服务端辨识。<br>\n找到<code>~/domjudge/judgehost/etc/restapi.secret</code>,这个文件的一个样例：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">default\thttp://localhost/domjudge/api\tjudgehost\tDgj9COHDKa5bSEmT</span><br></pre></td></tr></table></figure>\n<p>其中将那个<code>localhost</code>换成你服务器的IP地址，不知道的话，用<code>ifconfig</code>看下.<br>\n后面的<code>judgehost</code> 是用户名，<code>Dgj9COHDKa5bSEmT</code>是密码。这个也是要修改的。</p>\n<p>打开你服务端所安装的电脑的目录<code>~/domjudge/domserver/etc/restapi.secret</code><br>\n你会发现这两个格式是相同的，你把判题端的用户名和密码换成和客户端的一样就可以了。</p>\n<h4 id=\"4构建-chroot-环境\"><a class=\"markdownIt-Anchor\" href=\"#4构建-chroot-环境\"></a> 4.构建 chroot 环境</h4>\n<p>这里的用处是他把你的判题环境也集成好了，你只要选择安装一下就可以，但是它那里面是默认源，可能有点不太行，推荐用阿里源，用了两次没啥问题。使用 vim 等文本编辑器编辑<code>~/domjudge/judgehost/dj_make_chroot</code>脚本，搜索 mirror 这个关键字，并更改搜索到的 ubuntu 的 mirror 为国内源,<code>http://mirrors.aliyun.com/ubuntu/</code>然后运行脚本</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">./dj_make_chroot</span><br></pre></td></tr></table></figure>\n<p>这个时候就要下载很多东西，慢慢等。</p>\n<h4 id=\"5设置cgruop\"><a class=\"markdownIt-Anchor\" href=\"#5设置cgruop\"></a> 5.设置cgruop</h4>\n<p>使用 vim 等文本编辑器编辑 /etc/default/grub 这个文件，对其中的这一行做如下修改：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">GRUB_CMDLINE_LINUX_DEFAULT=&quot;quiet cgroup_enable=memory swapaccount=1&quot;</span><br></pre></td></tr></table></figure>\n<p>然后执行</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">update-grub</span><br></pre></td></tr></table></figure>\n<h4 id=\"6重启计算机\"><a class=\"markdownIt-Anchor\" href=\"#6重启计算机\"></a> 6.重启计算机</h4>\n<p><code>reboot</code>指令就行。</p>\n<h4 id=\"7开判题\"><a class=\"markdownIt-Anchor\" href=\"#7开判题\"></a> 7.开判题</h4>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">cd ~/domjudge/judgehost/bin</span><br><span class=\"line\">sudo ./create_cgroups</span><br></pre></td></tr></table></figure>\n<p>然后开一个窗口</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sudo ./judgedaemon -n 0</span><br></pre></td></tr></table></figure>\n<p>这个就意味着0号在跑了，我们一共在前面设置了4个，如果想再开一个，就直接再开个控制台，把0换1,2,3.</p>\n<p>到这个地方，基本上，基础的就配好了，接着你就可以通过默认用户和密码登录，尝试交题。如果出错，那我就不知道了。</p>\n<hr>\n<h2 id=\"管理员方面\"><a class=\"markdownIt-Anchor\" href=\"#管理员方面\"></a> 管理员方面。</h2>\n<p>要先创建比赛，加入题目，加入队伍，加入用户，用户与队伍通过一个外健来对应，而你创建比赛后，比赛里面的题目可以通过调用来处理，<br>\n这里我还不是很清楚，然后队伍的批量导入是需要一定的格式的。</p>\n","site":{"data":{}},"excerpt":"","more":"<h1 id=\"domjudge配置流程\"><a class=\"markdownIt-Anchor\" href=\"#domjudge配置流程\"></a> domjudge配置流程</h1>\n<p>对于很多的acmer来说，domjuege不是一个陌生的东西，很多的比赛里面，用到的系统不是domjudge就是pc2，就我个人来说，感觉domjudge用的好像更多点，受老师的嘱咐，最近把domjudge的基础流程走了一遍。</p>\n<blockquote>\n<p>因为博主的实力不太够，我是刚退役，就会点acm的题，很多知识都是小白，所以这个可以说是从零开始的，很多都是建立在我的认知上的，如有不对，还请谅解</p>\n</blockquote>\n<h4 id=\"domjudge是什么呢\"><a class=\"markdownIt-Anchor\" href=\"#domjudge是什么呢\"></a> domjudge是什么呢？</h4>\n<blockquote>\n<p>一些没怎么打过现场赛的可能对这个东西还是比较陌生。这个简单的说就是一个开源的在线判题系统，他很多东西都帮你集成好了，你利用这个平台，可以搭建一些小的比赛，网络赛很多是放在别的学校的oj上的，但是现场赛，不能上网，只能局域网访问，这个时候来一个domjudge这种类型的就很好。基本所有的功能它都有。</p>\n</blockquote>\n<h2 id=\"怎么配\"><a class=\"markdownIt-Anchor\" href=\"#怎么配\"></a> 怎么配</h2>\n<p>domjudge的配置分为两步，这两步理论上是可以独立开来的。<br>\n第一步是配domjudge的服务端，第二步是配置donjudge的判题端。</p>\n<h3 id=\"准备工作\"><a class=\"markdownIt-Anchor\" href=\"#准备工作\"></a> 准备工作</h3>\n<p>我这里用的服务端和判题端都是在 <code>ubuntu 18.04</code>下面进行操作的。而且我看网上的很多文档也是这样写的。</p>\n<h4 id=\"1-安装依赖包和环境\"><a class=\"markdownIt-Anchor\" href=\"#1-安装依赖包和环境\"></a> 1. 安装依赖包和环境：</h4>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sudo apt-get upgrade &amp;&amp; sudo apt-get update</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sudo apt install gcc g++ make zip unzip mariadb-server \\</span><br><span class=\"line\">        apache2 php php-cli libapache2-mod-php php-zip \\</span><br><span class=\"line\">        php-gd php-curl php-mysql php-json php-xml php-mbstring \\</span><br><span class=\"line\">        acl bsdmainutils ntp phpmyadmin python-pygments \\</span><br><span class=\"line\">        libcgroup-dev linuxdoc-tools linuxdoc-tools-text \\</span><br><span class=\"line\">        groff texlive-latex-recommended texlive-latex-extra \\</span><br><span class=\"line\">        texlive-fonts-recommended texlive-lang-european</span><br></pre></td></tr></table></figure>\n<p>安装时选择 <code>apache2</code></p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sudo apt install libcurl4-gnutls-dev libjsoncpp-dev libmagic-dev</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sudo phpenmod json</span><br></pre></td></tr></table></figure>\n<h4 id=\"2-编译domjudge\"><a class=\"markdownIt-Anchor\" href=\"#2-编译domjudge\"></a> 2. 编译domjudge</h4>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">cd Downloads   </span><br><span class=\"line\">wget https://www.domjudge.org/releases/domjudge-6.0.3.tar.gz      </span><br><span class=\"line\">tar -zxvf domjudge-6.0.3.tar.gz</span><br></pre></td></tr></table></figure>\n<p>这里也可以通过上<a href=\"https://www.domjudge.org\" target=\"_blank\" rel=\"noopener\">官网</a>进行下载，下载和解压的地址，要记住。</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">cd domjudge-6.0.3</span><br><span class=\"line\">./configure --prefix=$HOME/domjudge --with-baseurl=127.0.0.1</span><br><span class=\"line\">make domserver &amp;&amp; sudo make install-domserver</span><br><span class=\"line\">make judgehost &amp;&amp; sudo make install-judgehost</span><br><span class=\"line\">make docs &amp;&amp; sudo make install-docs</span><br></pre></td></tr></table></figure>\n<p>那个127.0.0.1表示的是你的默认端口，后面两句分别是安装服务端和判题端。</p>\n<hr>\n<h3 id=\"domjudge服务端\"><a class=\"markdownIt-Anchor\" href=\"#domjudge服务端\"></a> domjudge服务端</h3>\n<h4 id=\"1-配置数据库\"><a class=\"markdownIt-Anchor\" href=\"#1-配置数据库\"></a> 1. 配置数据库</h4>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">cd ~/domjudge/domserver</span><br><span class=\"line\">sudo bin/dj_setup_database -u root install</span><br></pre></td></tr></table></figure>\n<p>这里有个点在于 ~ 对应的是主目录</p>\n<h4 id=\"2-配置web服务器\"><a class=\"markdownIt-Anchor\" href=\"#2-配置web服务器\"></a> 2. 配置web服务器</h4>\n<p>这个提示写在前面:<br>\n注意先不要直接复制跑代码，要把<code>ln</code>命令中的<code>username</code>换成你的实际用户名.<br>\n不然你就要去把那个文件删除，从新去添加。</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">cd ~/domjudge/domserver</span><br><span class=\"line\">sudo ln -s /home/username/domjudge/domserver/etc/apache.conf /etc/apache2/conf-available/domjudge.conf</span><br><span class=\"line\">sudo a2enmod rewrite</span><br><span class=\"line\">sudo a2enconf domjudge</span><br><span class=\"line\">sudo systemctl reload apache2</span><br></pre></td></tr></table></figure>\n<p>这个时候你可以通过连接上<code>http://127.0.0.1/domjudge</code>.通过默认用户名<code>admin</code>和密码<code>admin</code>登录后台。</p>\n<h4 id=\"3-配置mysql\"><a class=\"markdownIt-Anchor\" href=\"#3-配置mysql\"></a> 3. 配置mysql</h4>\n<p>编辑<code>/etc/mysql/my.cnf</code>,追加以下内容：</p>\n<blockquote>\n<p>这里口头以’/'开始就表示是以根目录开始，这里记得别用vi，没有vim记得更新，vi是真的难用，不接受反驳。啦啦啦。</p>\n</blockquote>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[mysql]</span><br><span class=\"line\">max_connections = 1000</span><br><span class=\"line\">max_allowed_packet = 16MB</span><br><span class=\"line\">innodb_log_file_size = 48MB</span><br></pre></td></tr></table></figure>\n<p>其中 max_allowed_packet 数值改成两倍于题目测试数据文件的大小，innodb_log_file_size 数值改成十倍于题目测试数据文件的大小。这里我不是很清楚用处，目前还没有碰到这些问题。</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sudo systemctl restart mysql</span><br></pre></td></tr></table></figure>\n<h4 id=\"4-配置php\"><a class=\"markdownIt-Anchor\" href=\"#4-配置php\"></a> 4. 配置php</h4>\n<p>编辑<code>~/domjudge/domserver/etc/apache.conf</code>,取消以下几行内容前的注释:</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;IfModule mod_php7.c&gt;</span><br><span class=\"line\">php_value max_file_uploads      100</span><br><span class=\"line\">php_value upload_max_filesize   128M</span><br><span class=\"line\">php_value post_max_size         128M</span><br><span class=\"line\">php_value memory_limit          512M</span><br><span class=\"line\">&lt;/IfModule&gt;</span><br></pre></td></tr></table></figure>\n<p>编辑<code>/etc/php/7.2/apache2/php.ini</code>,搜索<code>date.timezone</code>关键字,取消前面的注释将值设为你们的地址，举例来说<code>Asia/Shanghai</code>.这里的是否有格式要求我就不清楚了。</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sudo systemctl restart apache2</span><br></pre></td></tr></table></figure>\n<h4 id=\"5-配置apache\"><a class=\"markdownIt-Anchor\" href=\"#5-配置apache\"></a> 5. 配置apache</h4>\n<p>编辑<code>/etc/apache2/apache2.conf</code>，搜索<code>KeepAlive</code>关键字，并将其值设为<code>off</code>,并加一行<br>\n<code>MaxClients 1000</code></p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sudo systemctl restart apache2</span><br></pre></td></tr></table></figure>\n<p>不知道干嘛用的。</p>\n<blockquote>\n<p>现在怎么说呢，这个服务端算是配好了，至于后面的一些加题，加队，加人的操作，在后面会给出来。后面配置这些文件的方案都是可视化的，在集成的网站上你会通过一个像用户的操作，去进行更改，这个在后面再说。</p>\n</blockquote>\n<hr>\n<h2 id=\"judgehost配置\"><a class=\"markdownIt-Anchor\" href=\"#judgehost配置\"></a> judgehost配置</h2>\n<p>这里的判题系统，怎么说呢，和我一开始的想法是不一样的，一开始我是认为，服务器去找判题机，这样每次配置的时候都是很烦的一件事，后来弄清楚，这里的原理是这样，这里的judgehost的身份相当于是一个用户，judgehost去向服务端发送请求，通过这个就可以让这些东西建立链接。所以我们服务端配好后，就不用去管一些奇奇怪怪的东西了，接着去配判题系统就可以了。</p>\n<h4 id=\"1-添加用户\"><a class=\"markdownIt-Anchor\" href=\"#1-添加用户\"></a> 1. 添加用户</h4>\n<p>这个就看你一台主机想配几个判题机了。一般来说，现在的电脑都不会只配置一个判题机吧，我这里就默认4个了。</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">useradd -d /nonexistent -U -M -s /bin/false domjudge-run-0</span><br><span class=\"line\">useradd -d /nonexistent -U -M -s /bin/false domjudge-run-1</span><br><span class=\"line\">useradd -d /nonexistent -U -M -s /bin/false domjudge-run-2</span><br><span class=\"line\">useradd -d /nonexistent -U -M -s /bin/false domjudge-run-3</span><br><span class=\"line\">groupadd domjudge-run</span><br></pre></td></tr></table></figure>\n<p>对于多核判题，每次判题记得要运行<code>~/domjudge/judgehost/bin</code>里面的<code>create_cgroups</code>,记得开权限，怎么执行，就是 <code>sudo ./create_cgroups</code>，不然会报错。</p>\n<h4 id=\"2配置-sudoers\"><a class=\"markdownIt-Anchor\" href=\"#2配置-sudoers\"></a> 2.配置 sudoers</h4>\n<p>这里的作用应该是给domjudge_run权限。</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sudo cp $HOME/domjudge/judgehost/etc/sudoers-domjudge /etc/sudoers.d/</span><br></pre></td></tr></table></figure>\n<h4 id=\"3修改rest密码\"><a class=\"markdownIt-Anchor\" href=\"#3修改rest密码\"></a> 3.修改rest密码</h4>\n<p>这里的用处在于，建立链接的时候，让服务端辨识。<br>\n找到<code>~/domjudge/judgehost/etc/restapi.secret</code>,这个文件的一个样例：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">default\thttp://localhost/domjudge/api\tjudgehost\tDgj9COHDKa5bSEmT</span><br></pre></td></tr></table></figure>\n<p>其中将那个<code>localhost</code>换成你服务器的IP地址，不知道的话，用<code>ifconfig</code>看下.<br>\n后面的<code>judgehost</code> 是用户名，<code>Dgj9COHDKa5bSEmT</code>是密码。这个也是要修改的。</p>\n<p>打开你服务端所安装的电脑的目录<code>~/domjudge/domserver/etc/restapi.secret</code><br>\n你会发现这两个格式是相同的，你把判题端的用户名和密码换成和客户端的一样就可以了。</p>\n<h4 id=\"4构建-chroot-环境\"><a class=\"markdownIt-Anchor\" href=\"#4构建-chroot-环境\"></a> 4.构建 chroot 环境</h4>\n<p>这里的用处是他把你的判题环境也集成好了，你只要选择安装一下就可以，但是它那里面是默认源，可能有点不太行，推荐用阿里源，用了两次没啥问题。使用 vim 等文本编辑器编辑<code>~/domjudge/judgehost/dj_make_chroot</code>脚本，搜索 mirror 这个关键字，并更改搜索到的 ubuntu 的 mirror 为国内源,<code>http://mirrors.aliyun.com/ubuntu/</code>然后运行脚本</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">./dj_make_chroot</span><br></pre></td></tr></table></figure>\n<p>这个时候就要下载很多东西，慢慢等。</p>\n<h4 id=\"5设置cgruop\"><a class=\"markdownIt-Anchor\" href=\"#5设置cgruop\"></a> 5.设置cgruop</h4>\n<p>使用 vim 等文本编辑器编辑 /etc/default/grub 这个文件，对其中的这一行做如下修改：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">GRUB_CMDLINE_LINUX_DEFAULT=&quot;quiet cgroup_enable=memory swapaccount=1&quot;</span><br></pre></td></tr></table></figure>\n<p>然后执行</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">update-grub</span><br></pre></td></tr></table></figure>\n<h4 id=\"6重启计算机\"><a class=\"markdownIt-Anchor\" href=\"#6重启计算机\"></a> 6.重启计算机</h4>\n<p><code>reboot</code>指令就行。</p>\n<h4 id=\"7开判题\"><a class=\"markdownIt-Anchor\" href=\"#7开判题\"></a> 7.开判题</h4>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">cd ~/domjudge/judgehost/bin</span><br><span class=\"line\">sudo ./create_cgroups</span><br></pre></td></tr></table></figure>\n<p>然后开一个窗口</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sudo ./judgedaemon -n 0</span><br></pre></td></tr></table></figure>\n<p>这个就意味着0号在跑了，我们一共在前面设置了4个，如果想再开一个，就直接再开个控制台，把0换1,2,3.</p>\n<p>到这个地方，基本上，基础的就配好了，接着你就可以通过默认用户和密码登录，尝试交题。如果出错，那我就不知道了。</p>\n<hr>\n<h2 id=\"管理员方面\"><a class=\"markdownIt-Anchor\" href=\"#管理员方面\"></a> 管理员方面。</h2>\n<p>要先创建比赛，加入题目，加入队伍，加入用户，用户与队伍通过一个外健来对应，而你创建比赛后，比赛里面的题目可以通过调用来处理，<br>\n这里我还不是很清楚，然后队伍的批量导入是需要一定的格式的。</p>\n"},{"title":"java学习笔记","date":"2019-03-06T00:16:30.000Z","_content":"\n# java学习笔记\n\n> 之前一直都是用c++去写acm题，最近因为更上的项目是用java写的，所以也想趁这个机会去系统的学一门语言。之前还是太水了，没有很好的去了解一些问题，主要还是去用一下stl的函数。而且课上教的东西也就那么点，没啥深入的，确实也没用到过。不过语言这种东西，通一门，门门通。不过我也不是什么都写，我写的都是我之前没有去了解过的东西.\n\n## java基础\n\n### 基础环境\n[大佬们的博客](https://www.cnblogs.com/mambahyw/p/7978832.html)\n- JDK(Java Development Kit) 是 Java 语言的软件开发工具包(SDK)。在JDK的安装目录下有一个jre目录，里面有两个文件夹bin和lib，在这里可以认为bin里的就是jvm，lib中则是jvm工作所需要的类库，而jvm和 lib合起来就称为jre。\n- JRE（Java Runtime Environment，Java运行环境），包含JVM标准实现及Java核心类库。JRE是Java运行环境，并不是一个开发环境，所以没有包含任何开发工具（如编译器和调试器）\n- JVM是Java Virtual Machine（Java虚拟机）的缩写，JVM是一种用于计算设备的规范，它是一个虚构出来的计算机，是通过在实际的计算机上仿真模拟各种计算机功能来实现的。**实现跨平台的关键部分**\n\n### 堆和栈\n> 这个在我之前打acm里，就有接触过，像我们大数组都是开在全局，如果直接开在某个函数的话，可能还没开始，程序就崩了。这里主要还是和内存有关系。\n\n**jvm内存划分**\n+ 寄存器\n+ 本地方法区\n+ 方法区\n+ 栈内存\n+ 堆内存\n\n**栈内存**\n> 栈内存首先是一片内存区域，存储的都是**局部变量**，凡是定义在方法中的都是局部变量（方法外的是全局变量），for循环内部定义的也是局部变量，是先加载函数才能进行局部变量的定义，所以方法先进栈，然后再定义变量，变量有自己的作用域，一旦离开作用域，变量就会被释放。栈内存的更新速度很快，因为局部变量的生命周期都很短。(一个线程一个独立的线程栈)\n\n**堆内存**\n> 存储的是数组和**对象**（其实数组就是对象），凡是new建立的都是在堆中，堆中存放的都是实体（对象），实体用于封装数据，而且是封装多个（实体的多个属性），如果一个数据消失，这个实体也没有消失，还可以用，所以堆是不会随时释放的，但是栈不一样，栈里存放的都是单个变量，变量被释放了，那就没有了。堆里的实体虽然不会被释放，但是会被当成垃圾，Java有垃圾回收机制不定时的收取。(所有线程共享堆内存)\n\n\n### 基本数据类型与包装数据类型\n\n> 这个也是一个很奇怪的地方。我之前写代码的时候，发现在建立hashmap的时候以int总是出错，因为在c++的时候写没有问题，我一开始还以为是自己语法错了。后来发现这个是java的基础语法.不能放int要放integer\n\n基本数据类型的意义在于计算速度快  \n包装数据类型则是满足java**一切皆对象的思想**\n  \n|基本类型|二进制位数|包装器类|\n|-----|-----|-----|\n|boolean|1|Boolean|\n|byte|8|Byte|\n|char|16|Character|\n|short|16|Short|\n|int|32|Integer|\n|long|64|Long|\n|float|32|Float|\n|double|64|Double|\n----\n了解一下\n\n### 传参类型\n> 之前写c++的时候都会碰到那个传指针的操作，也就是引用传参，然后java里面没有指针。查了一下，除了基本类型是传数值，其他都是传地址。python也是一样[寒假写这个传对象真的搞死了].\n\n### java修饰符\n\n**访问修饰符**\n+ default (即缺省，什么也不写）: 在同一包内可见，不使用任何修饰符。使用对象：类、接口、变量、方法。\n+ private : 在同一类内可见。使用对象：变量、方法。 注意：不能修饰类（外部类）\n+ 对所有类可见。使用对象：类、接口、变量、方法\n+ 对同一包内的类和所有子类可见。使用对象：变量、方法。 注意：不能修饰类（外部类）。\n\n> 很奇怪的是每个java类都只能有一个public类，而且文件名和类名必须相同。\n**非访问修饰符**\n+ static 修饰符，用来修饰类方法和类变量。\n+ final 修饰符，用来修饰类、方法和变量，final 修饰的类不能够被继承，修饰的方法不能被继承类重新定义，修饰的变量为常量，是不可修改的。\n+ abstract 修饰符，用来创建抽象类和抽象方法。\n+ synchronized 和 volatile 修饰符，主要用于线程的编程。[这个我还没有去用到过,嘤嘤嘤]\n\n\n### java正则表达式\n这个听说过，在c++里面一直都是手动实现,难受，有一次要我们去做爬虫倒是了解过一点点。还有xpath这个玩意。这个东西怎么说呢，学会查文档估计就差不多了。\n[基础教程](http://www.runoob.com/java/java-regular-expressions.html)\n\n### 方法的命名规则\n\n+ 方法的名字的第一个单词应以小写字母作为开头，后面的单词则用大写字母开头写，不使用连接符。例如：addPerson。\n+ 下划线可能出现在 JUnit 测试方法名称中用以分隔名称的逻辑组件。一个典型的模式是：``test<MethodUnderTest>_<state>``，例如 ``testPop_emptyStack``。\n\n想我之前写的那个c++函数都是瞎写，变量的命名都是那啥csl 啊，shu啊，mwh啊....  \n之前写了项目里面的一个函数，就是接触到了一个叫驼峰命名法，用的是小驼峰命名。用之前的写法，好像确实是挺丢面的啊。既然确定要去搞项目了，还是规范点。看那些大佬写的代码，真的挺好看的，自己写的代码确实奇奇怪怪。\n\n方法的定义\n```java\n修饰符 返回值类型 方法名(参数类型 参数名){\n    ...\n    方法体\n    ...\n    return 返回值;\n}\n```\n### static\n这个我一直觉得挺奇怪的，c++里面好像没有用到过，这个我就了解一下。  \n\n在《java编程思想里面》介绍是\n> static方法就是没有this的方法。在static方法内部不能调用非静态方法，反过来是可以的。而且可以在没有创建任何对象的前提下，仅仅通过类本身来调用static方法。这实际上正是static方法的主要用途。\n\n看别人的介绍就是\n> 方便在**没有创建对象**的情况下来进行调用（方法/变量）\n\n+ 用在方法和变量上面就是调用问题，感觉好像就是那个c++的全局变量问题。\n\n### exception\n> 这个其实我在之前写数据库前端的时候就看到过，唉那个时候，就感觉自己的代码风格太草率了，我都是直接来的，然后就容易莫名其妙的程序卡死，一点鲁棒性都不留的。然后看别人数据库的代码都是try和catch哎呀，就很尴尬。嘤嘤嘤。\n**java里面的有关exception的**\n#### 异常和错误\n+ 检查性异常：最具代表的检查性异常是用户错误或问题引起的异常，这是程序员无法预见的。例如要打开一个不存在文件时，一个异常就发生了，这些异常在编译时不能被简单地忽略。\n+ 运行时异常： 运行时异常是可能被程序员避免的异常。与检查性异常相反，运行时异常可以在编译时被忽略。\n+ 错误： 错误不是异常，而是脱离程序员控制的问题。错误在代码中通常被忽略。例如，当栈溢出时，一个错误就发生了，它们在编译也检查不到的。\n\n#### 怎么重写\n+ 首先确定要你这个catch到的exception是存在的，其次就是再你的那个try语句里，你得确定，它是可以抛出这个你要catch的exception\n+ 也就是说分为exception类的重写，以及exception抛出的方法的重写\n```java\ntry {\n    // 所执行的语句\n    // 语句中确定要抛出下面的exception\n}\ncatch(ExceptionName1 e){\n    // 就是出错了，所该做的事\n}\ncatch(ExceptionName2 a){\n    // 抓到第二个不同的错误，应该做啥。\n}\nfinally{\n    这个是不管会不会出错，都会去执行的\n}\n\npublic stastic void test() throw ExceptionName1 e,ExceptionName2 a{\n    // 语法了解一下\n    throw new ExceptionName1 e;\n    throw new ExceptionName2 a;\n}\n```\n\n## java面向对象\n\n### 继承\n\n#### 用法**extends**和**implements**\n#### java继承类型\n> 单继承，多重继承，不同类继承同一个类[讲道理我好像没有看到过多继承存在的]\n\n#### 重写与重载\n> 也就是一种特性把，重写比较常见的就是继承下面对父类的方法的重写，重载就是对于同一个名称的方法，对于不同的参数传入方法，有不同的操作的。常见的啊。\n#### 多态\n> 这个感觉就是上面的\n#### 抽象类\n> 没啥好说的，就是不能上实例呗。\n#### 接口\n> 不是说java不能多继承吗，这里的意思就是这样，可以**implements**多个接口，相当于打标签把，接口的英文时**interface**\n#### 包\n>  这个还挺有用的，我之前用的maven创建项目，在导入其他的类文件时总是会出错，然后发现，在导入其他文件时，必须让这个文件属于一个包才可以去导入。\n\n## java常用数据结构\n> 我在c++里面经常用stl里面的vector,set,map,其他也没怎么用，在java里面好像有好多其他的数据结构。\n主要分下面几种，具体的实现思想我到时候再看看\n+ 枚举\n+ 位集合\n+ 向量\n+ 栈\n+ 字典\n+ 哈希表\n+ 属性\n### 集合框架 \n> 这个就是说了很多的那个集合之间的一些继承的问题。\n> 感觉需要知道的和常用的应该也就那些把**hashmap,treemap,hashset,treeset,sortedset,sortedmap,vector,stack,queue,iterator** 这些了解一下。\n\n## 泛型\n这个好像和我在数据结构的课上看到的那个对于不同的数据据结构进行操作。","source":"_posts/java学习笔记.md","raw":"---\ntitle: java学习笔记\ntags: [java, 笔记]\ndate: 2019-03-06 08:16:30\n---\n\n# java学习笔记\n\n> 之前一直都是用c++去写acm题，最近因为更上的项目是用java写的，所以也想趁这个机会去系统的学一门语言。之前还是太水了，没有很好的去了解一些问题，主要还是去用一下stl的函数。而且课上教的东西也就那么点，没啥深入的，确实也没用到过。不过语言这种东西，通一门，门门通。不过我也不是什么都写，我写的都是我之前没有去了解过的东西.\n\n## java基础\n\n### 基础环境\n[大佬们的博客](https://www.cnblogs.com/mambahyw/p/7978832.html)\n- JDK(Java Development Kit) 是 Java 语言的软件开发工具包(SDK)。在JDK的安装目录下有一个jre目录，里面有两个文件夹bin和lib，在这里可以认为bin里的就是jvm，lib中则是jvm工作所需要的类库，而jvm和 lib合起来就称为jre。\n- JRE（Java Runtime Environment，Java运行环境），包含JVM标准实现及Java核心类库。JRE是Java运行环境，并不是一个开发环境，所以没有包含任何开发工具（如编译器和调试器）\n- JVM是Java Virtual Machine（Java虚拟机）的缩写，JVM是一种用于计算设备的规范，它是一个虚构出来的计算机，是通过在实际的计算机上仿真模拟各种计算机功能来实现的。**实现跨平台的关键部分**\n\n### 堆和栈\n> 这个在我之前打acm里，就有接触过，像我们大数组都是开在全局，如果直接开在某个函数的话，可能还没开始，程序就崩了。这里主要还是和内存有关系。\n\n**jvm内存划分**\n+ 寄存器\n+ 本地方法区\n+ 方法区\n+ 栈内存\n+ 堆内存\n\n**栈内存**\n> 栈内存首先是一片内存区域，存储的都是**局部变量**，凡是定义在方法中的都是局部变量（方法外的是全局变量），for循环内部定义的也是局部变量，是先加载函数才能进行局部变量的定义，所以方法先进栈，然后再定义变量，变量有自己的作用域，一旦离开作用域，变量就会被释放。栈内存的更新速度很快，因为局部变量的生命周期都很短。(一个线程一个独立的线程栈)\n\n**堆内存**\n> 存储的是数组和**对象**（其实数组就是对象），凡是new建立的都是在堆中，堆中存放的都是实体（对象），实体用于封装数据，而且是封装多个（实体的多个属性），如果一个数据消失，这个实体也没有消失，还可以用，所以堆是不会随时释放的，但是栈不一样，栈里存放的都是单个变量，变量被释放了，那就没有了。堆里的实体虽然不会被释放，但是会被当成垃圾，Java有垃圾回收机制不定时的收取。(所有线程共享堆内存)\n\n\n### 基本数据类型与包装数据类型\n\n> 这个也是一个很奇怪的地方。我之前写代码的时候，发现在建立hashmap的时候以int总是出错，因为在c++的时候写没有问题，我一开始还以为是自己语法错了。后来发现这个是java的基础语法.不能放int要放integer\n\n基本数据类型的意义在于计算速度快  \n包装数据类型则是满足java**一切皆对象的思想**\n  \n|基本类型|二进制位数|包装器类|\n|-----|-----|-----|\n|boolean|1|Boolean|\n|byte|8|Byte|\n|char|16|Character|\n|short|16|Short|\n|int|32|Integer|\n|long|64|Long|\n|float|32|Float|\n|double|64|Double|\n----\n了解一下\n\n### 传参类型\n> 之前写c++的时候都会碰到那个传指针的操作，也就是引用传参，然后java里面没有指针。查了一下，除了基本类型是传数值，其他都是传地址。python也是一样[寒假写这个传对象真的搞死了].\n\n### java修饰符\n\n**访问修饰符**\n+ default (即缺省，什么也不写）: 在同一包内可见，不使用任何修饰符。使用对象：类、接口、变量、方法。\n+ private : 在同一类内可见。使用对象：变量、方法。 注意：不能修饰类（外部类）\n+ 对所有类可见。使用对象：类、接口、变量、方法\n+ 对同一包内的类和所有子类可见。使用对象：变量、方法。 注意：不能修饰类（外部类）。\n\n> 很奇怪的是每个java类都只能有一个public类，而且文件名和类名必须相同。\n**非访问修饰符**\n+ static 修饰符，用来修饰类方法和类变量。\n+ final 修饰符，用来修饰类、方法和变量，final 修饰的类不能够被继承，修饰的方法不能被继承类重新定义，修饰的变量为常量，是不可修改的。\n+ abstract 修饰符，用来创建抽象类和抽象方法。\n+ synchronized 和 volatile 修饰符，主要用于线程的编程。[这个我还没有去用到过,嘤嘤嘤]\n\n\n### java正则表达式\n这个听说过，在c++里面一直都是手动实现,难受，有一次要我们去做爬虫倒是了解过一点点。还有xpath这个玩意。这个东西怎么说呢，学会查文档估计就差不多了。\n[基础教程](http://www.runoob.com/java/java-regular-expressions.html)\n\n### 方法的命名规则\n\n+ 方法的名字的第一个单词应以小写字母作为开头，后面的单词则用大写字母开头写，不使用连接符。例如：addPerson。\n+ 下划线可能出现在 JUnit 测试方法名称中用以分隔名称的逻辑组件。一个典型的模式是：``test<MethodUnderTest>_<state>``，例如 ``testPop_emptyStack``。\n\n想我之前写的那个c++函数都是瞎写，变量的命名都是那啥csl 啊，shu啊，mwh啊....  \n之前写了项目里面的一个函数，就是接触到了一个叫驼峰命名法，用的是小驼峰命名。用之前的写法，好像确实是挺丢面的啊。既然确定要去搞项目了，还是规范点。看那些大佬写的代码，真的挺好看的，自己写的代码确实奇奇怪怪。\n\n方法的定义\n```java\n修饰符 返回值类型 方法名(参数类型 参数名){\n    ...\n    方法体\n    ...\n    return 返回值;\n}\n```\n### static\n这个我一直觉得挺奇怪的，c++里面好像没有用到过，这个我就了解一下。  \n\n在《java编程思想里面》介绍是\n> static方法就是没有this的方法。在static方法内部不能调用非静态方法，反过来是可以的。而且可以在没有创建任何对象的前提下，仅仅通过类本身来调用static方法。这实际上正是static方法的主要用途。\n\n看别人的介绍就是\n> 方便在**没有创建对象**的情况下来进行调用（方法/变量）\n\n+ 用在方法和变量上面就是调用问题，感觉好像就是那个c++的全局变量问题。\n\n### exception\n> 这个其实我在之前写数据库前端的时候就看到过，唉那个时候，就感觉自己的代码风格太草率了，我都是直接来的，然后就容易莫名其妙的程序卡死，一点鲁棒性都不留的。然后看别人数据库的代码都是try和catch哎呀，就很尴尬。嘤嘤嘤。\n**java里面的有关exception的**\n#### 异常和错误\n+ 检查性异常：最具代表的检查性异常是用户错误或问题引起的异常，这是程序员无法预见的。例如要打开一个不存在文件时，一个异常就发生了，这些异常在编译时不能被简单地忽略。\n+ 运行时异常： 运行时异常是可能被程序员避免的异常。与检查性异常相反，运行时异常可以在编译时被忽略。\n+ 错误： 错误不是异常，而是脱离程序员控制的问题。错误在代码中通常被忽略。例如，当栈溢出时，一个错误就发生了，它们在编译也检查不到的。\n\n#### 怎么重写\n+ 首先确定要你这个catch到的exception是存在的，其次就是再你的那个try语句里，你得确定，它是可以抛出这个你要catch的exception\n+ 也就是说分为exception类的重写，以及exception抛出的方法的重写\n```java\ntry {\n    // 所执行的语句\n    // 语句中确定要抛出下面的exception\n}\ncatch(ExceptionName1 e){\n    // 就是出错了，所该做的事\n}\ncatch(ExceptionName2 a){\n    // 抓到第二个不同的错误，应该做啥。\n}\nfinally{\n    这个是不管会不会出错，都会去执行的\n}\n\npublic stastic void test() throw ExceptionName1 e,ExceptionName2 a{\n    // 语法了解一下\n    throw new ExceptionName1 e;\n    throw new ExceptionName2 a;\n}\n```\n\n## java面向对象\n\n### 继承\n\n#### 用法**extends**和**implements**\n#### java继承类型\n> 单继承，多重继承，不同类继承同一个类[讲道理我好像没有看到过多继承存在的]\n\n#### 重写与重载\n> 也就是一种特性把，重写比较常见的就是继承下面对父类的方法的重写，重载就是对于同一个名称的方法，对于不同的参数传入方法，有不同的操作的。常见的啊。\n#### 多态\n> 这个感觉就是上面的\n#### 抽象类\n> 没啥好说的，就是不能上实例呗。\n#### 接口\n> 不是说java不能多继承吗，这里的意思就是这样，可以**implements**多个接口，相当于打标签把，接口的英文时**interface**\n#### 包\n>  这个还挺有用的，我之前用的maven创建项目，在导入其他的类文件时总是会出错，然后发现，在导入其他文件时，必须让这个文件属于一个包才可以去导入。\n\n## java常用数据结构\n> 我在c++里面经常用stl里面的vector,set,map,其他也没怎么用，在java里面好像有好多其他的数据结构。\n主要分下面几种，具体的实现思想我到时候再看看\n+ 枚举\n+ 位集合\n+ 向量\n+ 栈\n+ 字典\n+ 哈希表\n+ 属性\n### 集合框架 \n> 这个就是说了很多的那个集合之间的一些继承的问题。\n> 感觉需要知道的和常用的应该也就那些把**hashmap,treemap,hashset,treeset,sortedset,sortedmap,vector,stack,queue,iterator** 这些了解一下。\n\n## 泛型\n这个好像和我在数据结构的课上看到的那个对于不同的数据据结构进行操作。","slug":"java学习笔记","published":1,"updated":"2019-03-16T14:10:52.099Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjtravwv7001a34ug3le203sk","content":"<h1 id=\"java学习笔记\"><a class=\"markdownIt-Anchor\" href=\"#java学习笔记\"></a> java学习笔记</h1>\n<blockquote>\n<p>之前一直都是用c++去写acm题，最近因为更上的项目是用java写的，所以也想趁这个机会去系统的学一门语言。之前还是太水了，没有很好的去了解一些问题，主要还是去用一下stl的函数。而且课上教的东西也就那么点，没啥深入的，确实也没用到过。不过语言这种东西，通一门，门门通。不过我也不是什么都写，我写的都是我之前没有去了解过的东西.</p>\n</blockquote>\n<h2 id=\"java基础\"><a class=\"markdownIt-Anchor\" href=\"#java基础\"></a> java基础</h2>\n<h3 id=\"基础环境\"><a class=\"markdownIt-Anchor\" href=\"#基础环境\"></a> 基础环境</h3>\n<p><a href=\"https://www.cnblogs.com/mambahyw/p/7978832.html\" target=\"_blank\" rel=\"noopener\">大佬们的博客</a></p>\n<ul>\n<li>JDK(Java Development Kit) 是 Java 语言的软件开发工具包(SDK)。在JDK的安装目录下有一个jre目录，里面有两个文件夹bin和lib，在这里可以认为bin里的就是jvm，lib中则是jvm工作所需要的类库，而jvm和 lib合起来就称为jre。</li>\n<li>JRE（Java Runtime Environment，Java运行环境），包含JVM标准实现及Java核心类库。JRE是Java运行环境，并不是一个开发环境，所以没有包含任何开发工具（如编译器和调试器）</li>\n<li>JVM是Java Virtual Machine（Java虚拟机）的缩写，JVM是一种用于计算设备的规范，它是一个虚构出来的计算机，是通过在实际的计算机上仿真模拟各种计算机功能来实现的。<strong>实现跨平台的关键部分</strong></li>\n</ul>\n<h3 id=\"堆和栈\"><a class=\"markdownIt-Anchor\" href=\"#堆和栈\"></a> 堆和栈</h3>\n<blockquote>\n<p>这个在我之前打acm里，就有接触过，像我们大数组都是开在全局，如果直接开在某个函数的话，可能还没开始，程序就崩了。这里主要还是和内存有关系。</p>\n</blockquote>\n<p><strong>jvm内存划分</strong></p>\n<ul>\n<li>寄存器</li>\n<li>本地方法区</li>\n<li>方法区</li>\n<li>栈内存</li>\n<li>堆内存</li>\n</ul>\n<p><strong>栈内存</strong></p>\n<blockquote>\n<p>栈内存首先是一片内存区域，存储的都是<strong>局部变量</strong>，凡是定义在方法中的都是局部变量（方法外的是全局变量），for循环内部定义的也是局部变量，是先加载函数才能进行局部变量的定义，所以方法先进栈，然后再定义变量，变量有自己的作用域，一旦离开作用域，变量就会被释放。栈内存的更新速度很快，因为局部变量的生命周期都很短。(一个线程一个独立的线程栈)</p>\n</blockquote>\n<p><strong>堆内存</strong></p>\n<blockquote>\n<p>存储的是数组和<strong>对象</strong>（其实数组就是对象），凡是new建立的都是在堆中，堆中存放的都是实体（对象），实体用于封装数据，而且是封装多个（实体的多个属性），如果一个数据消失，这个实体也没有消失，还可以用，所以堆是不会随时释放的，但是栈不一样，栈里存放的都是单个变量，变量被释放了，那就没有了。堆里的实体虽然不会被释放，但是会被当成垃圾，Java有垃圾回收机制不定时的收取。(所有线程共享堆内存)</p>\n</blockquote>\n<h3 id=\"基本数据类型与包装数据类型\"><a class=\"markdownIt-Anchor\" href=\"#基本数据类型与包装数据类型\"></a> 基本数据类型与包装数据类型</h3>\n<blockquote>\n<p>这个也是一个很奇怪的地方。我之前写代码的时候，发现在建立hashmap的时候以int总是出错，因为在c++的时候写没有问题，我一开始还以为是自己语法错了。后来发现这个是java的基础语法.不能放int要放integer</p>\n</blockquote>\n<p>基本数据类型的意义在于计算速度快<br>\n包装数据类型则是满足java<strong>一切皆对象的思想</strong></p>\n<table>\n<thead>\n<tr>\n<th>基本类型</th>\n<th>二进制位数</th>\n<th>包装器类</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>boolean</td>\n<td>1</td>\n<td>Boolean</td>\n</tr>\n<tr>\n<td>byte</td>\n<td>8</td>\n<td>Byte</td>\n</tr>\n<tr>\n<td>char</td>\n<td>16</td>\n<td>Character</td>\n</tr>\n<tr>\n<td>short</td>\n<td>16</td>\n<td>Short</td>\n</tr>\n<tr>\n<td>int</td>\n<td>32</td>\n<td>Integer</td>\n</tr>\n<tr>\n<td>long</td>\n<td>64</td>\n<td>Long</td>\n</tr>\n<tr>\n<td>float</td>\n<td>32</td>\n<td>Float</td>\n</tr>\n<tr>\n<td>double</td>\n<td>64</td>\n<td>Double</td>\n</tr>\n</tbody>\n</table>\n<hr>\n<p>了解一下</p>\n<h3 id=\"传参类型\"><a class=\"markdownIt-Anchor\" href=\"#传参类型\"></a> 传参类型</h3>\n<blockquote>\n<p>之前写c++的时候都会碰到那个传指针的操作，也就是引用传参，然后java里面没有指针。查了一下，除了基本类型是传数值，其他都是传地址。python也是一样[寒假写这个传对象真的搞死了].</p>\n</blockquote>\n<h3 id=\"java修饰符\"><a class=\"markdownIt-Anchor\" href=\"#java修饰符\"></a> java修饰符</h3>\n<p><strong>访问修饰符</strong></p>\n<ul>\n<li>default (即缺省，什么也不写）: 在同一包内可见，不使用任何修饰符。使用对象：类、接口、变量、方法。</li>\n<li>private : 在同一类内可见。使用对象：变量、方法。 注意：不能修饰类（外部类）</li>\n<li>对所有类可见。使用对象：类、接口、变量、方法</li>\n<li>对同一包内的类和所有子类可见。使用对象：变量、方法。 注意：不能修饰类（外部类）。</li>\n</ul>\n<blockquote>\n<p>很奇怪的是每个java类都只能有一个public类，而且文件名和类名必须相同。<br>\n<strong>非访问修饰符</strong></p>\n</blockquote>\n<ul>\n<li>static 修饰符，用来修饰类方法和类变量。</li>\n<li>final 修饰符，用来修饰类、方法和变量，final 修饰的类不能够被继承，修饰的方法不能被继承类重新定义，修饰的变量为常量，是不可修改的。</li>\n<li>abstract 修饰符，用来创建抽象类和抽象方法。</li>\n<li>synchronized 和 volatile 修饰符，主要用于线程的编程。[这个我还没有去用到过,嘤嘤嘤]</li>\n</ul>\n<h3 id=\"java正则表达式\"><a class=\"markdownIt-Anchor\" href=\"#java正则表达式\"></a> java正则表达式</h3>\n<p>这个听说过，在c++里面一直都是手动实现,难受，有一次要我们去做爬虫倒是了解过一点点。还有xpath这个玩意。这个东西怎么说呢，学会查文档估计就差不多了。<br>\n<a href=\"http://www.runoob.com/java/java-regular-expressions.html\" target=\"_blank\" rel=\"noopener\">基础教程</a></p>\n<h3 id=\"方法的命名规则\"><a class=\"markdownIt-Anchor\" href=\"#方法的命名规则\"></a> 方法的命名规则</h3>\n<ul>\n<li>方法的名字的第一个单词应以小写字母作为开头，后面的单词则用大写字母开头写，不使用连接符。例如：addPerson。</li>\n<li>下划线可能出现在 JUnit 测试方法名称中用以分隔名称的逻辑组件。一个典型的模式是：<code>test&lt;MethodUnderTest&gt;_&lt;state&gt;</code>，例如 <code>testPop_emptyStack</code>。</li>\n</ul>\n<p>想我之前写的那个c++函数都是瞎写，变量的命名都是那啥csl 啊，shu啊，mwh啊…<br>\n之前写了项目里面的一个函数，就是接触到了一个叫驼峰命名法，用的是小驼峰命名。用之前的写法，好像确实是挺丢面的啊。既然确定要去搞项目了，还是规范点。看那些大佬写的代码，真的挺好看的，自己写的代码确实奇奇怪怪。</p>\n<p>方法的定义</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">修饰符 返回值类型 方法名(参数类型 参数名)&#123;</span><br><span class=\"line\">    ...</span><br><span class=\"line\">    方法体</span><br><span class=\"line\">    ...</span><br><span class=\"line\">    <span class=\"keyword\">return</span> 返回值;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"static\"><a class=\"markdownIt-Anchor\" href=\"#static\"></a> static</h3>\n<p>这个我一直觉得挺奇怪的，c++里面好像没有用到过，这个我就了解一下。</p>\n<p>在《java编程思想里面》介绍是</p>\n<blockquote>\n<p>static方法就是没有this的方法。在static方法内部不能调用非静态方法，反过来是可以的。而且可以在没有创建任何对象的前提下，仅仅通过类本身来调用static方法。这实际上正是static方法的主要用途。</p>\n</blockquote>\n<p>看别人的介绍就是</p>\n<blockquote>\n<p>方便在<strong>没有创建对象</strong>的情况下来进行调用（方法/变量）</p>\n</blockquote>\n<ul>\n<li>用在方法和变量上面就是调用问题，感觉好像就是那个c++的全局变量问题。</li>\n</ul>\n<h3 id=\"exception\"><a class=\"markdownIt-Anchor\" href=\"#exception\"></a> exception</h3>\n<blockquote>\n<p>这个其实我在之前写数据库前端的时候就看到过，唉那个时候，就感觉自己的代码风格太草率了，我都是直接来的，然后就容易莫名其妙的程序卡死，一点鲁棒性都不留的。然后看别人数据库的代码都是try和catch哎呀，就很尴尬。嘤嘤嘤。<br>\n<strong>java里面的有关exception的</strong></p>\n</blockquote>\n<h4 id=\"异常和错误\"><a class=\"markdownIt-Anchor\" href=\"#异常和错误\"></a> 异常和错误</h4>\n<ul>\n<li>检查性异常：最具代表的检查性异常是用户错误或问题引起的异常，这是程序员无法预见的。例如要打开一个不存在文件时，一个异常就发生了，这些异常在编译时不能被简单地忽略。</li>\n<li>运行时异常： 运行时异常是可能被程序员避免的异常。与检查性异常相反，运行时异常可以在编译时被忽略。</li>\n<li>错误： 错误不是异常，而是脱离程序员控制的问题。错误在代码中通常被忽略。例如，当栈溢出时，一个错误就发生了，它们在编译也检查不到的。</li>\n</ul>\n<h4 id=\"怎么重写\"><a class=\"markdownIt-Anchor\" href=\"#怎么重写\"></a> 怎么重写</h4>\n<ul>\n<li>首先确定要你这个catch到的exception是存在的，其次就是再你的那个try语句里，你得确定，它是可以抛出这个你要catch的exception</li>\n<li>也就是说分为exception类的重写，以及exception抛出的方法的重写</li>\n</ul>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">    <span class=\"comment\">// 所执行的语句</span></span><br><span class=\"line\">    <span class=\"comment\">// 语句中确定要抛出下面的exception</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">catch</span>(ExceptionName1 e)&#123;</span><br><span class=\"line\">    <span class=\"comment\">// 就是出错了，所该做的事</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">catch</span>(ExceptionName2 a)&#123;</span><br><span class=\"line\">    <span class=\"comment\">// 抓到第二个不同的错误，应该做啥。</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">finally</span>&#123;</span><br><span class=\"line\">    这个是不管会不会出错，都会去执行的</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> stastic <span class=\"keyword\">void</span> <span class=\"title\">test</span><span class=\"params\">()</span> throw ExceptionName1 e,ExceptionName2 a</span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">// 语法了解一下</span></span><br><span class=\"line\">    <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> ExceptionName1 e;</span><br><span class=\"line\">    <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> ExceptionName2 a;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h2 id=\"java面向对象\"><a class=\"markdownIt-Anchor\" href=\"#java面向对象\"></a> java面向对象</h2>\n<h3 id=\"继承\"><a class=\"markdownIt-Anchor\" href=\"#继承\"></a> 继承</h3>\n<h4 id=\"用法extends和implements\"><a class=\"markdownIt-Anchor\" href=\"#用法extends和implements\"></a> 用法<strong>extends</strong>和<strong>implements</strong></h4>\n<h4 id=\"java继承类型\"><a class=\"markdownIt-Anchor\" href=\"#java继承类型\"></a> java继承类型</h4>\n<blockquote>\n<p>单继承，多重继承，不同类继承同一个类[讲道理我好像没有看到过多继承存在的]</p>\n</blockquote>\n<h4 id=\"重写与重载\"><a class=\"markdownIt-Anchor\" href=\"#重写与重载\"></a> 重写与重载</h4>\n<blockquote>\n<p>也就是一种特性把，重写比较常见的就是继承下面对父类的方法的重写，重载就是对于同一个名称的方法，对于不同的参数传入方法，有不同的操作的。常见的啊。</p>\n</blockquote>\n<h4 id=\"多态\"><a class=\"markdownIt-Anchor\" href=\"#多态\"></a> 多态</h4>\n<blockquote>\n<p>这个感觉就是上面的</p>\n</blockquote>\n<h4 id=\"抽象类\"><a class=\"markdownIt-Anchor\" href=\"#抽象类\"></a> 抽象类</h4>\n<blockquote>\n<p>没啥好说的，就是不能上实例呗。</p>\n</blockquote>\n<h4 id=\"接口\"><a class=\"markdownIt-Anchor\" href=\"#接口\"></a> 接口</h4>\n<blockquote>\n<p>不是说java不能多继承吗，这里的意思就是这样，可以<strong>implements</strong>多个接口，相当于打标签把，接口的英文时<strong>interface</strong></p>\n</blockquote>\n<h4 id=\"包\"><a class=\"markdownIt-Anchor\" href=\"#包\"></a> 包</h4>\n<blockquote>\n<p>这个还挺有用的，我之前用的maven创建项目，在导入其他的类文件时总是会出错，然后发现，在导入其他文件时，必须让这个文件属于一个包才可以去导入。</p>\n</blockquote>\n<h2 id=\"java常用数据结构\"><a class=\"markdownIt-Anchor\" href=\"#java常用数据结构\"></a> java常用数据结构</h2>\n<blockquote>\n<p>我在c++里面经常用stl里面的vector,set,map,其他也没怎么用，在java里面好像有好多其他的数据结构。<br>\n主要分下面几种，具体的实现思想我到时候再看看</p>\n</blockquote>\n<ul>\n<li>枚举</li>\n<li>位集合</li>\n<li>向量</li>\n<li>栈</li>\n<li>字典</li>\n<li>哈希表</li>\n<li>属性</li>\n</ul>\n<h3 id=\"集合框架\"><a class=\"markdownIt-Anchor\" href=\"#集合框架\"></a> 集合框架</h3>\n<blockquote>\n<p>这个就是说了很多的那个集合之间的一些继承的问题。<br>\n感觉需要知道的和常用的应该也就那些把<strong>hashmap,treemap,hashset,treeset,sortedset,sortedmap,vector,stack,queue,iterator</strong> 这些了解一下。</p>\n</blockquote>\n<h2 id=\"泛型\"><a class=\"markdownIt-Anchor\" href=\"#泛型\"></a> 泛型</h2>\n<p>这个好像和我在数据结构的课上看到的那个对于不同的数据据结构进行操作。</p>\n","site":{"data":{}},"excerpt":"","more":"<h1 id=\"java学习笔记\"><a class=\"markdownIt-Anchor\" href=\"#java学习笔记\"></a> java学习笔记</h1>\n<blockquote>\n<p>之前一直都是用c++去写acm题，最近因为更上的项目是用java写的，所以也想趁这个机会去系统的学一门语言。之前还是太水了，没有很好的去了解一些问题，主要还是去用一下stl的函数。而且课上教的东西也就那么点，没啥深入的，确实也没用到过。不过语言这种东西，通一门，门门通。不过我也不是什么都写，我写的都是我之前没有去了解过的东西.</p>\n</blockquote>\n<h2 id=\"java基础\"><a class=\"markdownIt-Anchor\" href=\"#java基础\"></a> java基础</h2>\n<h3 id=\"基础环境\"><a class=\"markdownIt-Anchor\" href=\"#基础环境\"></a> 基础环境</h3>\n<p><a href=\"https://www.cnblogs.com/mambahyw/p/7978832.html\" target=\"_blank\" rel=\"noopener\">大佬们的博客</a></p>\n<ul>\n<li>JDK(Java Development Kit) 是 Java 语言的软件开发工具包(SDK)。在JDK的安装目录下有一个jre目录，里面有两个文件夹bin和lib，在这里可以认为bin里的就是jvm，lib中则是jvm工作所需要的类库，而jvm和 lib合起来就称为jre。</li>\n<li>JRE（Java Runtime Environment，Java运行环境），包含JVM标准实现及Java核心类库。JRE是Java运行环境，并不是一个开发环境，所以没有包含任何开发工具（如编译器和调试器）</li>\n<li>JVM是Java Virtual Machine（Java虚拟机）的缩写，JVM是一种用于计算设备的规范，它是一个虚构出来的计算机，是通过在实际的计算机上仿真模拟各种计算机功能来实现的。<strong>实现跨平台的关键部分</strong></li>\n</ul>\n<h3 id=\"堆和栈\"><a class=\"markdownIt-Anchor\" href=\"#堆和栈\"></a> 堆和栈</h3>\n<blockquote>\n<p>这个在我之前打acm里，就有接触过，像我们大数组都是开在全局，如果直接开在某个函数的话，可能还没开始，程序就崩了。这里主要还是和内存有关系。</p>\n</blockquote>\n<p><strong>jvm内存划分</strong></p>\n<ul>\n<li>寄存器</li>\n<li>本地方法区</li>\n<li>方法区</li>\n<li>栈内存</li>\n<li>堆内存</li>\n</ul>\n<p><strong>栈内存</strong></p>\n<blockquote>\n<p>栈内存首先是一片内存区域，存储的都是<strong>局部变量</strong>，凡是定义在方法中的都是局部变量（方法外的是全局变量），for循环内部定义的也是局部变量，是先加载函数才能进行局部变量的定义，所以方法先进栈，然后再定义变量，变量有自己的作用域，一旦离开作用域，变量就会被释放。栈内存的更新速度很快，因为局部变量的生命周期都很短。(一个线程一个独立的线程栈)</p>\n</blockquote>\n<p><strong>堆内存</strong></p>\n<blockquote>\n<p>存储的是数组和<strong>对象</strong>（其实数组就是对象），凡是new建立的都是在堆中，堆中存放的都是实体（对象），实体用于封装数据，而且是封装多个（实体的多个属性），如果一个数据消失，这个实体也没有消失，还可以用，所以堆是不会随时释放的，但是栈不一样，栈里存放的都是单个变量，变量被释放了，那就没有了。堆里的实体虽然不会被释放，但是会被当成垃圾，Java有垃圾回收机制不定时的收取。(所有线程共享堆内存)</p>\n</blockquote>\n<h3 id=\"基本数据类型与包装数据类型\"><a class=\"markdownIt-Anchor\" href=\"#基本数据类型与包装数据类型\"></a> 基本数据类型与包装数据类型</h3>\n<blockquote>\n<p>这个也是一个很奇怪的地方。我之前写代码的时候，发现在建立hashmap的时候以int总是出错，因为在c++的时候写没有问题，我一开始还以为是自己语法错了。后来发现这个是java的基础语法.不能放int要放integer</p>\n</blockquote>\n<p>基本数据类型的意义在于计算速度快<br>\n包装数据类型则是满足java<strong>一切皆对象的思想</strong></p>\n<table>\n<thead>\n<tr>\n<th>基本类型</th>\n<th>二进制位数</th>\n<th>包装器类</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>boolean</td>\n<td>1</td>\n<td>Boolean</td>\n</tr>\n<tr>\n<td>byte</td>\n<td>8</td>\n<td>Byte</td>\n</tr>\n<tr>\n<td>char</td>\n<td>16</td>\n<td>Character</td>\n</tr>\n<tr>\n<td>short</td>\n<td>16</td>\n<td>Short</td>\n</tr>\n<tr>\n<td>int</td>\n<td>32</td>\n<td>Integer</td>\n</tr>\n<tr>\n<td>long</td>\n<td>64</td>\n<td>Long</td>\n</tr>\n<tr>\n<td>float</td>\n<td>32</td>\n<td>Float</td>\n</tr>\n<tr>\n<td>double</td>\n<td>64</td>\n<td>Double</td>\n</tr>\n</tbody>\n</table>\n<hr>\n<p>了解一下</p>\n<h3 id=\"传参类型\"><a class=\"markdownIt-Anchor\" href=\"#传参类型\"></a> 传参类型</h3>\n<blockquote>\n<p>之前写c++的时候都会碰到那个传指针的操作，也就是引用传参，然后java里面没有指针。查了一下，除了基本类型是传数值，其他都是传地址。python也是一样[寒假写这个传对象真的搞死了].</p>\n</blockquote>\n<h3 id=\"java修饰符\"><a class=\"markdownIt-Anchor\" href=\"#java修饰符\"></a> java修饰符</h3>\n<p><strong>访问修饰符</strong></p>\n<ul>\n<li>default (即缺省，什么也不写）: 在同一包内可见，不使用任何修饰符。使用对象：类、接口、变量、方法。</li>\n<li>private : 在同一类内可见。使用对象：变量、方法。 注意：不能修饰类（外部类）</li>\n<li>对所有类可见。使用对象：类、接口、变量、方法</li>\n<li>对同一包内的类和所有子类可见。使用对象：变量、方法。 注意：不能修饰类（外部类）。</li>\n</ul>\n<blockquote>\n<p>很奇怪的是每个java类都只能有一个public类，而且文件名和类名必须相同。<br>\n<strong>非访问修饰符</strong></p>\n</blockquote>\n<ul>\n<li>static 修饰符，用来修饰类方法和类变量。</li>\n<li>final 修饰符，用来修饰类、方法和变量，final 修饰的类不能够被继承，修饰的方法不能被继承类重新定义，修饰的变量为常量，是不可修改的。</li>\n<li>abstract 修饰符，用来创建抽象类和抽象方法。</li>\n<li>synchronized 和 volatile 修饰符，主要用于线程的编程。[这个我还没有去用到过,嘤嘤嘤]</li>\n</ul>\n<h3 id=\"java正则表达式\"><a class=\"markdownIt-Anchor\" href=\"#java正则表达式\"></a> java正则表达式</h3>\n<p>这个听说过，在c++里面一直都是手动实现,难受，有一次要我们去做爬虫倒是了解过一点点。还有xpath这个玩意。这个东西怎么说呢，学会查文档估计就差不多了。<br>\n<a href=\"http://www.runoob.com/java/java-regular-expressions.html\" target=\"_blank\" rel=\"noopener\">基础教程</a></p>\n<h3 id=\"方法的命名规则\"><a class=\"markdownIt-Anchor\" href=\"#方法的命名规则\"></a> 方法的命名规则</h3>\n<ul>\n<li>方法的名字的第一个单词应以小写字母作为开头，后面的单词则用大写字母开头写，不使用连接符。例如：addPerson。</li>\n<li>下划线可能出现在 JUnit 测试方法名称中用以分隔名称的逻辑组件。一个典型的模式是：<code>test&lt;MethodUnderTest&gt;_&lt;state&gt;</code>，例如 <code>testPop_emptyStack</code>。</li>\n</ul>\n<p>想我之前写的那个c++函数都是瞎写，变量的命名都是那啥csl 啊，shu啊，mwh啊…<br>\n之前写了项目里面的一个函数，就是接触到了一个叫驼峰命名法，用的是小驼峰命名。用之前的写法，好像确实是挺丢面的啊。既然确定要去搞项目了，还是规范点。看那些大佬写的代码，真的挺好看的，自己写的代码确实奇奇怪怪。</p>\n<p>方法的定义</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">修饰符 返回值类型 方法名(参数类型 参数名)&#123;</span><br><span class=\"line\">    ...</span><br><span class=\"line\">    方法体</span><br><span class=\"line\">    ...</span><br><span class=\"line\">    <span class=\"keyword\">return</span> 返回值;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"static\"><a class=\"markdownIt-Anchor\" href=\"#static\"></a> static</h3>\n<p>这个我一直觉得挺奇怪的，c++里面好像没有用到过，这个我就了解一下。</p>\n<p>在《java编程思想里面》介绍是</p>\n<blockquote>\n<p>static方法就是没有this的方法。在static方法内部不能调用非静态方法，反过来是可以的。而且可以在没有创建任何对象的前提下，仅仅通过类本身来调用static方法。这实际上正是static方法的主要用途。</p>\n</blockquote>\n<p>看别人的介绍就是</p>\n<blockquote>\n<p>方便在<strong>没有创建对象</strong>的情况下来进行调用（方法/变量）</p>\n</blockquote>\n<ul>\n<li>用在方法和变量上面就是调用问题，感觉好像就是那个c++的全局变量问题。</li>\n</ul>\n<h3 id=\"exception\"><a class=\"markdownIt-Anchor\" href=\"#exception\"></a> exception</h3>\n<blockquote>\n<p>这个其实我在之前写数据库前端的时候就看到过，唉那个时候，就感觉自己的代码风格太草率了，我都是直接来的，然后就容易莫名其妙的程序卡死，一点鲁棒性都不留的。然后看别人数据库的代码都是try和catch哎呀，就很尴尬。嘤嘤嘤。<br>\n<strong>java里面的有关exception的</strong></p>\n</blockquote>\n<h4 id=\"异常和错误\"><a class=\"markdownIt-Anchor\" href=\"#异常和错误\"></a> 异常和错误</h4>\n<ul>\n<li>检查性异常：最具代表的检查性异常是用户错误或问题引起的异常，这是程序员无法预见的。例如要打开一个不存在文件时，一个异常就发生了，这些异常在编译时不能被简单地忽略。</li>\n<li>运行时异常： 运行时异常是可能被程序员避免的异常。与检查性异常相反，运行时异常可以在编译时被忽略。</li>\n<li>错误： 错误不是异常，而是脱离程序员控制的问题。错误在代码中通常被忽略。例如，当栈溢出时，一个错误就发生了，它们在编译也检查不到的。</li>\n</ul>\n<h4 id=\"怎么重写\"><a class=\"markdownIt-Anchor\" href=\"#怎么重写\"></a> 怎么重写</h4>\n<ul>\n<li>首先确定要你这个catch到的exception是存在的，其次就是再你的那个try语句里，你得确定，它是可以抛出这个你要catch的exception</li>\n<li>也就是说分为exception类的重写，以及exception抛出的方法的重写</li>\n</ul>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">    <span class=\"comment\">// 所执行的语句</span></span><br><span class=\"line\">    <span class=\"comment\">// 语句中确定要抛出下面的exception</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">catch</span>(ExceptionName1 e)&#123;</span><br><span class=\"line\">    <span class=\"comment\">// 就是出错了，所该做的事</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">catch</span>(ExceptionName2 a)&#123;</span><br><span class=\"line\">    <span class=\"comment\">// 抓到第二个不同的错误，应该做啥。</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">finally</span>&#123;</span><br><span class=\"line\">    这个是不管会不会出错，都会去执行的</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> stastic <span class=\"keyword\">void</span> <span class=\"title\">test</span><span class=\"params\">()</span> throw ExceptionName1 e,ExceptionName2 a</span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">// 语法了解一下</span></span><br><span class=\"line\">    <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> ExceptionName1 e;</span><br><span class=\"line\">    <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> ExceptionName2 a;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h2 id=\"java面向对象\"><a class=\"markdownIt-Anchor\" href=\"#java面向对象\"></a> java面向对象</h2>\n<h3 id=\"继承\"><a class=\"markdownIt-Anchor\" href=\"#继承\"></a> 继承</h3>\n<h4 id=\"用法extends和implements\"><a class=\"markdownIt-Anchor\" href=\"#用法extends和implements\"></a> 用法<strong>extends</strong>和<strong>implements</strong></h4>\n<h4 id=\"java继承类型\"><a class=\"markdownIt-Anchor\" href=\"#java继承类型\"></a> java继承类型</h4>\n<blockquote>\n<p>单继承，多重继承，不同类继承同一个类[讲道理我好像没有看到过多继承存在的]</p>\n</blockquote>\n<h4 id=\"重写与重载\"><a class=\"markdownIt-Anchor\" href=\"#重写与重载\"></a> 重写与重载</h4>\n<blockquote>\n<p>也就是一种特性把，重写比较常见的就是继承下面对父类的方法的重写，重载就是对于同一个名称的方法，对于不同的参数传入方法，有不同的操作的。常见的啊。</p>\n</blockquote>\n<h4 id=\"多态\"><a class=\"markdownIt-Anchor\" href=\"#多态\"></a> 多态</h4>\n<blockquote>\n<p>这个感觉就是上面的</p>\n</blockquote>\n<h4 id=\"抽象类\"><a class=\"markdownIt-Anchor\" href=\"#抽象类\"></a> 抽象类</h4>\n<blockquote>\n<p>没啥好说的，就是不能上实例呗。</p>\n</blockquote>\n<h4 id=\"接口\"><a class=\"markdownIt-Anchor\" href=\"#接口\"></a> 接口</h4>\n<blockquote>\n<p>不是说java不能多继承吗，这里的意思就是这样，可以<strong>implements</strong>多个接口，相当于打标签把，接口的英文时<strong>interface</strong></p>\n</blockquote>\n<h4 id=\"包\"><a class=\"markdownIt-Anchor\" href=\"#包\"></a> 包</h4>\n<blockquote>\n<p>这个还挺有用的，我之前用的maven创建项目，在导入其他的类文件时总是会出错，然后发现，在导入其他文件时，必须让这个文件属于一个包才可以去导入。</p>\n</blockquote>\n<h2 id=\"java常用数据结构\"><a class=\"markdownIt-Anchor\" href=\"#java常用数据结构\"></a> java常用数据结构</h2>\n<blockquote>\n<p>我在c++里面经常用stl里面的vector,set,map,其他也没怎么用，在java里面好像有好多其他的数据结构。<br>\n主要分下面几种，具体的实现思想我到时候再看看</p>\n</blockquote>\n<ul>\n<li>枚举</li>\n<li>位集合</li>\n<li>向量</li>\n<li>栈</li>\n<li>字典</li>\n<li>哈希表</li>\n<li>属性</li>\n</ul>\n<h3 id=\"集合框架\"><a class=\"markdownIt-Anchor\" href=\"#集合框架\"></a> 集合框架</h3>\n<blockquote>\n<p>这个就是说了很多的那个集合之间的一些继承的问题。<br>\n感觉需要知道的和常用的应该也就那些把<strong>hashmap,treemap,hashset,treeset,sortedset,sortedmap,vector,stack,queue,iterator</strong> 这些了解一下。</p>\n</blockquote>\n<h2 id=\"泛型\"><a class=\"markdownIt-Anchor\" href=\"#泛型\"></a> 泛型</h2>\n<p>这个好像和我在数据结构的课上看到的那个对于不同的数据据结构进行操作。</p>\n"},{"title":"java设计模式","date":"2019-03-23T05:51:29.000Z","mathjax":true,"_content":"\n### 这是啥\n> 设计模式（Design Pattern）是前辈们对代码开发经验的总结，是解决特定问题的一系列套路。它不是语法规定，而是一套用来提高代码可复用性、可维护性、可读性、稳健性以及安全性的解决方案。讲道理这个还是挺重要的。反正我看自己写的代码，感觉挺丑的。\n> 四人帮提出的一个思想，是面对对象中常用的设计原则，关键的思想在于\n+ 对接口编程而不是对实现编程。\n+ 优先使用对象组合而不是继承。\n> 主要学习是通过看[菜鸟教程](http://www.runoob.com/design-pattern/decorator-pattern.html)\n\n### 分类\n+ 创建型模式\n这些设计模式提供了一种在创建对象的同时隐藏创建逻辑的方式，而不是使用 new 运算符直接实例化对象。这使得程序在判断针对某个给定实例需要创建哪些对象时更加灵活。\n+ 结构型模式\n这些设计模式关注类和对象的组合。继承的概念被用来组合接口和定义组合对象获得新功能的方式。\n+ 行为型模型\n这些设计模式特别关注对象之间的通信。\n+ J2EE 模式\n这些设计模式特别关注表示层。这些模式是由 Sun Java Center 鉴定的。\n\n### 6大原则\n+ 开闭原则\n对扩展开放，对修改关闭。\n\n+ 里氏代换原则（Liskov Substitution Principle）\n任何基类可以出现的地方，子类一定可以出现\n\n+ 依赖倒转原则\n针对接口编程，依赖于抽象而不依赖于具体\n\n+ 接口隔离原则\n使用多个隔离的接口，比使用单个接口要好。目的在于降低类之间的耦合度\n\n+ 迪米特法则，最少知道原则\n一个实体应当尽量少地与其他实体之间发生相互作用，使得系统功能模块相对独立\n\n+ 合成复用原则\n尽量使用合成/聚合的方式，而不是使用继承\n\n> emememem 可以说很复杂了\n\n### 工厂模式\n+ 创建型模式\n+ 目的：**定义一个创建对象的接口**，让子类自己去决定实例化哪一个工厂类，工厂模式使其创建过程延迟到子类进行。\n+ 个人看法，这个好像就是说，做一个接口去实现对象的创建，目的有啥呢，一个是扩展性好，加产品加一个工厂，加一个实现类就完事了[额，感觉到后面会越来越多]，还有就是封装性？还有就是，他说是对一些比较复杂的对象有好处。\n\n### 抽象工厂模式\n+ 是围绕一个超级工厂创建其他工厂\n+ 目的：提供一个创建一系列相关或相互依赖对象的接口，而无需指定它们具体的类\n+ 个人看法，不是说对扩展开放，对修改关闭，问题这里，没有办法解决把，增加一个类，则要增加一个类，也要加一个工厂，但是这里的抽象工厂也是要进行修改才行。不过也只是要修改那个工厂制作的东西\n\n### 单例模式\n+ 只能有一个实例，并且只能自己去创建自己的实例，单例类必须给所有其他对象提供这一实例\n+ 目的在于解决一个全局使用得类频繁的创建与销毁\n+ 几种实现的方式，目的在于一个安全性的考虑\n\n#### 懒汉式模式\n+ lazy初始化\n+ 多线程不安全\n```java\npublic class xianchen\n{\n    private static xianchen instance;\n    private xianchen(){}\n    public static xianchen getinstance()\n    {\n        if(instance == null)\n            instance = new xianchen();\n        return instance;\n    }\n}\n```\n#### 懒汉式，线程安全\n+ lazy初始化\n+ 多线程安全(加了一个synchronized锁)\n> 这个synchronized是java的一种同步锁，这里旧的说同步是啥，线程同步主要的目的是防止不同的线程对同一个文件同时进行操作造成奇奇怪怪的操作。然后这里又涉及到了进程与线程，还有java的多线程，哇，好菜啊，啥都不会。\n```java\npublic class xianchen\n{\n    private static xianchen instance;\n    private xianchen(){}\n    public static synchronized xianchen getinstance()\n    {\n        if(instance == null)\n            instance = new xianchen();\n        return instance;\n    }\n}\n```\n#### 饿汉式，线程安全\n+ 没lazy初始化\n+ 它基于 classloader 机制避免了多线程的同步问题，\n```java\npublic class xianchen\n{\n    private static xianchen instance = new xianchen();\n    private xianchen(){}\n    public static xianchen getInstance()\n    {\n        return instance;\n    }\n}\n```\n#### 双检锁/双重校验锁\n+ lazy初始化\n+ 多线程安全\n```java\npublic class xianchen\n{\n    private volatile static xianchen instance;\n    private xianchen(){}\n    public static xianchen getXianchen()\n    {\n        if(instance == null )\n        {\n            synchronized(instance.class)\n            {\n                if(instance == null)\n                {\n                    instance = new xianchen();\n                }\n            }\n        }\n        return instance\n    }\n}\n```\n#### 静部内态类\n+ lazy初始化\n+ 多线程安全\n+ 对静态域进行延迟初始化,这个的目的在于，只有getinstance被显式调用的时候，才会显式装载xianchen类\n```java\npublic class xianchen\n{\n    private static class xianchenHolder\n    {\n        private static final xianchen instance = new xianchen();\n    }\n    private xianchen(){}\n    public static final xianchen getinstance()\n    {\n        return xianchenHolder.instance;\n    }\n}\n```\n\n#### 枚举\n+ 好像不太实用\n\n\n###  建造者模式\n\n+ 将一个复杂的构建与表示相分离\n+ 一些基本部件不会变，而其组合经常变化。\n+ 将变与不变分离开\n\n### 原型模式\n\n+ 用于创建重复的对象，同时又能保证性能。\n+ 常用于直接创建对象的代价比较大的时候\n\n### 适配器模式\n\n+ 作为两个互相不兼容的接口之间的桥梁\n+ 将一个类的接口转换成客户希望的另外一个接口\n+ 解决方法：继承和依赖\n\n### 桥接模式\n\n+ 将抽象和现实分离开，解决的是类继承爆炸的问题。\n+ 得理解那个抽象得意义，感觉就是把它内部的一些常用的接口给提出来，然后对这个接口进行实例的操作。\n\n### 过滤器模式\n\n+ 对于不用的类，有不同的过滤方式，比如说list<num>,和list<float>都有不同的过滤方式。就是传进来的是一个集合，但是对于里面的数据，怎么过滤出需要的元素。\n\n### 组合模式\n+ 将对象组合成树形结构已表示“部分整体”的层次结构，组合模式让单个对象和组合对象的使用具有一致性。感觉就是vector里面加vector\n\n### 装饰器模式\n+ 允许向一个现有的类添加新的功能\n+ 感觉是通过继承的方法来解决的。然后它又说子类太多很麻烦\n+ 用一个抽象类，加一个修饰类，抽象类不具体实现，修饰类去实现。\n\n\n### 外观模式\n+ 目的是隐藏系统的复杂性，向客户端提供了一个可以访问系统的接口\n+ 在客户端和复杂系统之间再加一层，这一层将调用顺序、依赖关系等处理好。\n+ 相当于那个前台\n\n### 享元模式\n+ 目的：减少创建对象的数量\n+ 加一个hashmap，看某个文件是不是出现过，没出现过就初始化，不然就从内存池里面拿出来。\n+ java里面的string\n\n### 代理模式\n+ 一个类代表另一个类的功能\n+ 增加中间层\n+ windows中的中间层\n\n### 责任链模式\n+ 为请求创建了一个接收者对象的链\n+ 目的在于将请求者和发送者解耦，好像感觉只有在多线程才会出事。\n+ 有多个对象可以处理同一个请求，具体哪个对象处理，由那个时刻处理\n\n### 命令模式\n+ 将命令分装成一个对象进行处理\n+ 感觉这个还是挺好理解的\n\n### 解释器模式\n+ 好像是说，相当于是一个解释器，像sql查询语句就是这样，对一些看起来可能不同的语言进行解析。\n\n### 迭代器模式\n+ 这个熟悉，c++中的set，map的遍历就是用这个\n\n### 中介者模式\n+ 用来降低多个对象和类之间的通信复杂度\n+ 操作时将网状结构分离成星型结构(中心论)\n+ 比如聊天室\n\n### 备忘录模式\n+ 在不破坏封装性的前提下，获得一个对象的内部状态，并在对象之外保存这个状态\n+ 像存档\n\n### 观察者模式\n+ 存在一对多的关系时，当一个被改时，被依赖的类会被通知并自动更新。\n+ 用一个集合去存这个\n\n### 状态者模式\n+ 就是类的行为是由它的状态决定的\n+ 但是这个对象，不同的状态对象还是不同的。\n\n### 空对象模式\n\n+ 继承一下，一个抽象类，一个实例类，一个啥都不去做的空类，感觉没啥用，除了体系更健全。\n\n### 策略模式\n+ 一个类的行为和算法能在运行时更改\n+ 将算法打包成类，进行替换操作。不过几个算法要差不多，分装好才行。\n\n### 模板模式\n+ 抽象类公开定义执行它的方法/模板。\n+ 它的子类可以按需要重写方法实现\n+ 好像没啥说的，就是很正常的。\n\n### 访问者模式\n+ 将数据与数据结构分离开\n+ 在被访问的类里面加一个对外提供接待访问者的接口。\n+ 感觉这个的目的就在于防止对数据本生进行操作(加一层，有用？可能自我欺骗，嘿嘿嘿)\n\n### mvc模式\n+ Model-View-Controller（模型-视图-控制器） 模式，这个好像是挺重要的一个模式，之前就听说过这个东西。用于分层开发。\n+ model 代表一个存取数据的对象\n+ view 视图代表包含数据的可视化\n+ controller 控制器作用于模型和视图上，他控制数据流向模型对象，并在数据变化时更新视图\n+ 不过咋感觉和那个适配器有点像，控制器那个\n\n### 业务代表模式\n+ 用于对表示层和业务层解耦，前端和后端分离？\n+ 业务实现向外暴露统一接口。由业务代表来具体查询和掉用业务接口执行相关业务，而客户则只需要想业务代表调用相关简化后的接口即可实现响应业务。\n+ 好像springboot里面的controler和service，集成一下，再暴露给外面。\n\n### 组合实体模式\n+ 说用在ejb持久化机制里面？？？？\n+ 先码着，四个参与者\n+ 组合实体，粗粒度对象，依赖对象，策略\n+ ememe看那个例子，感觉就是\n\n### 数据访问对象模式\n+ 用在把低级的数据访问api从高级的业务服务中分离出来。\n+ 三个组成部分\n+ 数据访问对象接口\n+ 数据访问对象实体类\n+ 模型对象/数值对象\n+ 这个感觉好像还挺重要的，对象于数据库里面一行进行对应。\n\n### 前端控制器模式\n+ 目的在于提供一个集中的请求处理机制\n+ 前端控制器： 处理应用程序所有类型请求的单个处理程序\n+ 调度器：前端控制器可能使用一个调度器对象来调度请求到相应的具体处理程序\n+ 视图是为请求而创建的对象\n\n### 拦截过滤器模式\n+ 目的是对应用程序的请求或响应做一些预处理/后处理，\n\n### 服务定位器模式\n+ 目的是利用缓存来解决在查找服务代价高的问题\n\n### 传输对象模式\n+ 用于客户端向服务器一次性传递多个带属性的数值\n+ 感觉就是相当于多一个模板从省城的作用\n\n\n## 总结\n> 哇,23个设计模式，好多啊，看的我头皮发麻，很多感觉也只是一知半解，这个还是得通过以后得面对对象编程去总结经验。这个并不是什么教学啊，这只是我的个人笔记，有想法的去看[菜鸟教程](http://www.runoob.com/design-pattern/decorator-pattern.html)\n> 这个设计模式，主要的目的是提高一个代码的规范性，可扩展性，还有就是一些常见的面对对象的一个技巧，不管怎么说，万物皆对象。","source":"_posts/java设计模式.md","raw":"---\ntitle: java设计模式\ndate: 2019-03-23 13:51:29\ntags: [\"面对对象\",\"设计模式\"]\nmathjax: true\n---\n\n### 这是啥\n> 设计模式（Design Pattern）是前辈们对代码开发经验的总结，是解决特定问题的一系列套路。它不是语法规定，而是一套用来提高代码可复用性、可维护性、可读性、稳健性以及安全性的解决方案。讲道理这个还是挺重要的。反正我看自己写的代码，感觉挺丑的。\n> 四人帮提出的一个思想，是面对对象中常用的设计原则，关键的思想在于\n+ 对接口编程而不是对实现编程。\n+ 优先使用对象组合而不是继承。\n> 主要学习是通过看[菜鸟教程](http://www.runoob.com/design-pattern/decorator-pattern.html)\n\n### 分类\n+ 创建型模式\n这些设计模式提供了一种在创建对象的同时隐藏创建逻辑的方式，而不是使用 new 运算符直接实例化对象。这使得程序在判断针对某个给定实例需要创建哪些对象时更加灵活。\n+ 结构型模式\n这些设计模式关注类和对象的组合。继承的概念被用来组合接口和定义组合对象获得新功能的方式。\n+ 行为型模型\n这些设计模式特别关注对象之间的通信。\n+ J2EE 模式\n这些设计模式特别关注表示层。这些模式是由 Sun Java Center 鉴定的。\n\n### 6大原则\n+ 开闭原则\n对扩展开放，对修改关闭。\n\n+ 里氏代换原则（Liskov Substitution Principle）\n任何基类可以出现的地方，子类一定可以出现\n\n+ 依赖倒转原则\n针对接口编程，依赖于抽象而不依赖于具体\n\n+ 接口隔离原则\n使用多个隔离的接口，比使用单个接口要好。目的在于降低类之间的耦合度\n\n+ 迪米特法则，最少知道原则\n一个实体应当尽量少地与其他实体之间发生相互作用，使得系统功能模块相对独立\n\n+ 合成复用原则\n尽量使用合成/聚合的方式，而不是使用继承\n\n> emememem 可以说很复杂了\n\n### 工厂模式\n+ 创建型模式\n+ 目的：**定义一个创建对象的接口**，让子类自己去决定实例化哪一个工厂类，工厂模式使其创建过程延迟到子类进行。\n+ 个人看法，这个好像就是说，做一个接口去实现对象的创建，目的有啥呢，一个是扩展性好，加产品加一个工厂，加一个实现类就完事了[额，感觉到后面会越来越多]，还有就是封装性？还有就是，他说是对一些比较复杂的对象有好处。\n\n### 抽象工厂模式\n+ 是围绕一个超级工厂创建其他工厂\n+ 目的：提供一个创建一系列相关或相互依赖对象的接口，而无需指定它们具体的类\n+ 个人看法，不是说对扩展开放，对修改关闭，问题这里，没有办法解决把，增加一个类，则要增加一个类，也要加一个工厂，但是这里的抽象工厂也是要进行修改才行。不过也只是要修改那个工厂制作的东西\n\n### 单例模式\n+ 只能有一个实例，并且只能自己去创建自己的实例，单例类必须给所有其他对象提供这一实例\n+ 目的在于解决一个全局使用得类频繁的创建与销毁\n+ 几种实现的方式，目的在于一个安全性的考虑\n\n#### 懒汉式模式\n+ lazy初始化\n+ 多线程不安全\n```java\npublic class xianchen\n{\n    private static xianchen instance;\n    private xianchen(){}\n    public static xianchen getinstance()\n    {\n        if(instance == null)\n            instance = new xianchen();\n        return instance;\n    }\n}\n```\n#### 懒汉式，线程安全\n+ lazy初始化\n+ 多线程安全(加了一个synchronized锁)\n> 这个synchronized是java的一种同步锁，这里旧的说同步是啥，线程同步主要的目的是防止不同的线程对同一个文件同时进行操作造成奇奇怪怪的操作。然后这里又涉及到了进程与线程，还有java的多线程，哇，好菜啊，啥都不会。\n```java\npublic class xianchen\n{\n    private static xianchen instance;\n    private xianchen(){}\n    public static synchronized xianchen getinstance()\n    {\n        if(instance == null)\n            instance = new xianchen();\n        return instance;\n    }\n}\n```\n#### 饿汉式，线程安全\n+ 没lazy初始化\n+ 它基于 classloader 机制避免了多线程的同步问题，\n```java\npublic class xianchen\n{\n    private static xianchen instance = new xianchen();\n    private xianchen(){}\n    public static xianchen getInstance()\n    {\n        return instance;\n    }\n}\n```\n#### 双检锁/双重校验锁\n+ lazy初始化\n+ 多线程安全\n```java\npublic class xianchen\n{\n    private volatile static xianchen instance;\n    private xianchen(){}\n    public static xianchen getXianchen()\n    {\n        if(instance == null )\n        {\n            synchronized(instance.class)\n            {\n                if(instance == null)\n                {\n                    instance = new xianchen();\n                }\n            }\n        }\n        return instance\n    }\n}\n```\n#### 静部内态类\n+ lazy初始化\n+ 多线程安全\n+ 对静态域进行延迟初始化,这个的目的在于，只有getinstance被显式调用的时候，才会显式装载xianchen类\n```java\npublic class xianchen\n{\n    private static class xianchenHolder\n    {\n        private static final xianchen instance = new xianchen();\n    }\n    private xianchen(){}\n    public static final xianchen getinstance()\n    {\n        return xianchenHolder.instance;\n    }\n}\n```\n\n#### 枚举\n+ 好像不太实用\n\n\n###  建造者模式\n\n+ 将一个复杂的构建与表示相分离\n+ 一些基本部件不会变，而其组合经常变化。\n+ 将变与不变分离开\n\n### 原型模式\n\n+ 用于创建重复的对象，同时又能保证性能。\n+ 常用于直接创建对象的代价比较大的时候\n\n### 适配器模式\n\n+ 作为两个互相不兼容的接口之间的桥梁\n+ 将一个类的接口转换成客户希望的另外一个接口\n+ 解决方法：继承和依赖\n\n### 桥接模式\n\n+ 将抽象和现实分离开，解决的是类继承爆炸的问题。\n+ 得理解那个抽象得意义，感觉就是把它内部的一些常用的接口给提出来，然后对这个接口进行实例的操作。\n\n### 过滤器模式\n\n+ 对于不用的类，有不同的过滤方式，比如说list<num>,和list<float>都有不同的过滤方式。就是传进来的是一个集合，但是对于里面的数据，怎么过滤出需要的元素。\n\n### 组合模式\n+ 将对象组合成树形结构已表示“部分整体”的层次结构，组合模式让单个对象和组合对象的使用具有一致性。感觉就是vector里面加vector\n\n### 装饰器模式\n+ 允许向一个现有的类添加新的功能\n+ 感觉是通过继承的方法来解决的。然后它又说子类太多很麻烦\n+ 用一个抽象类，加一个修饰类，抽象类不具体实现，修饰类去实现。\n\n\n### 外观模式\n+ 目的是隐藏系统的复杂性，向客户端提供了一个可以访问系统的接口\n+ 在客户端和复杂系统之间再加一层，这一层将调用顺序、依赖关系等处理好。\n+ 相当于那个前台\n\n### 享元模式\n+ 目的：减少创建对象的数量\n+ 加一个hashmap，看某个文件是不是出现过，没出现过就初始化，不然就从内存池里面拿出来。\n+ java里面的string\n\n### 代理模式\n+ 一个类代表另一个类的功能\n+ 增加中间层\n+ windows中的中间层\n\n### 责任链模式\n+ 为请求创建了一个接收者对象的链\n+ 目的在于将请求者和发送者解耦，好像感觉只有在多线程才会出事。\n+ 有多个对象可以处理同一个请求，具体哪个对象处理，由那个时刻处理\n\n### 命令模式\n+ 将命令分装成一个对象进行处理\n+ 感觉这个还是挺好理解的\n\n### 解释器模式\n+ 好像是说，相当于是一个解释器，像sql查询语句就是这样，对一些看起来可能不同的语言进行解析。\n\n### 迭代器模式\n+ 这个熟悉，c++中的set，map的遍历就是用这个\n\n### 中介者模式\n+ 用来降低多个对象和类之间的通信复杂度\n+ 操作时将网状结构分离成星型结构(中心论)\n+ 比如聊天室\n\n### 备忘录模式\n+ 在不破坏封装性的前提下，获得一个对象的内部状态，并在对象之外保存这个状态\n+ 像存档\n\n### 观察者模式\n+ 存在一对多的关系时，当一个被改时，被依赖的类会被通知并自动更新。\n+ 用一个集合去存这个\n\n### 状态者模式\n+ 就是类的行为是由它的状态决定的\n+ 但是这个对象，不同的状态对象还是不同的。\n\n### 空对象模式\n\n+ 继承一下，一个抽象类，一个实例类，一个啥都不去做的空类，感觉没啥用，除了体系更健全。\n\n### 策略模式\n+ 一个类的行为和算法能在运行时更改\n+ 将算法打包成类，进行替换操作。不过几个算法要差不多，分装好才行。\n\n### 模板模式\n+ 抽象类公开定义执行它的方法/模板。\n+ 它的子类可以按需要重写方法实现\n+ 好像没啥说的，就是很正常的。\n\n### 访问者模式\n+ 将数据与数据结构分离开\n+ 在被访问的类里面加一个对外提供接待访问者的接口。\n+ 感觉这个的目的就在于防止对数据本生进行操作(加一层，有用？可能自我欺骗，嘿嘿嘿)\n\n### mvc模式\n+ Model-View-Controller（模型-视图-控制器） 模式，这个好像是挺重要的一个模式，之前就听说过这个东西。用于分层开发。\n+ model 代表一个存取数据的对象\n+ view 视图代表包含数据的可视化\n+ controller 控制器作用于模型和视图上，他控制数据流向模型对象，并在数据变化时更新视图\n+ 不过咋感觉和那个适配器有点像，控制器那个\n\n### 业务代表模式\n+ 用于对表示层和业务层解耦，前端和后端分离？\n+ 业务实现向外暴露统一接口。由业务代表来具体查询和掉用业务接口执行相关业务，而客户则只需要想业务代表调用相关简化后的接口即可实现响应业务。\n+ 好像springboot里面的controler和service，集成一下，再暴露给外面。\n\n### 组合实体模式\n+ 说用在ejb持久化机制里面？？？？\n+ 先码着，四个参与者\n+ 组合实体，粗粒度对象，依赖对象，策略\n+ ememe看那个例子，感觉就是\n\n### 数据访问对象模式\n+ 用在把低级的数据访问api从高级的业务服务中分离出来。\n+ 三个组成部分\n+ 数据访问对象接口\n+ 数据访问对象实体类\n+ 模型对象/数值对象\n+ 这个感觉好像还挺重要的，对象于数据库里面一行进行对应。\n\n### 前端控制器模式\n+ 目的在于提供一个集中的请求处理机制\n+ 前端控制器： 处理应用程序所有类型请求的单个处理程序\n+ 调度器：前端控制器可能使用一个调度器对象来调度请求到相应的具体处理程序\n+ 视图是为请求而创建的对象\n\n### 拦截过滤器模式\n+ 目的是对应用程序的请求或响应做一些预处理/后处理，\n\n### 服务定位器模式\n+ 目的是利用缓存来解决在查找服务代价高的问题\n\n### 传输对象模式\n+ 用于客户端向服务器一次性传递多个带属性的数值\n+ 感觉就是相当于多一个模板从省城的作用\n\n\n## 总结\n> 哇,23个设计模式，好多啊，看的我头皮发麻，很多感觉也只是一知半解，这个还是得通过以后得面对对象编程去总结经验。这个并不是什么教学啊，这只是我的个人笔记，有想法的去看[菜鸟教程](http://www.runoob.com/design-pattern/decorator-pattern.html)\n> 这个设计模式，主要的目的是提高一个代码的规范性，可扩展性，还有就是一些常见的面对对象的一个技巧，不管怎么说，万物皆对象。","slug":"java设计模式","published":1,"updated":"2019-03-27T14:19:42.284Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjtravwv9001d34ug2rtwcsh9","content":"<h3 id=\"这是啥\"><a class=\"markdownIt-Anchor\" href=\"#这是啥\"></a> 这是啥</h3>\n<blockquote>\n<p>设计模式（Design Pattern）是前辈们对代码开发经验的总结，是解决特定问题的一系列套路。它不是语法规定，而是一套用来提高代码可复用性、可维护性、可读性、稳健性以及安全性的解决方案。讲道理这个还是挺重要的。反正我看自己写的代码，感觉挺丑的。<br>\n四人帮提出的一个思想，是面对对象中常用的设计原则，关键的思想在于</p>\n</blockquote>\n<ul>\n<li>对接口编程而不是对实现编程。</li>\n<li>优先使用对象组合而不是继承。</li>\n</ul>\n<blockquote>\n<p>主要学习是通过看<a href=\"http://www.runoob.com/design-pattern/decorator-pattern.html\" target=\"_blank\" rel=\"noopener\">菜鸟教程</a></p>\n</blockquote>\n<h3 id=\"分类\"><a class=\"markdownIt-Anchor\" href=\"#分类\"></a> 分类</h3>\n<ul>\n<li>创建型模式<br>\n这些设计模式提供了一种在创建对象的同时隐藏创建逻辑的方式，而不是使用 new 运算符直接实例化对象。这使得程序在判断针对某个给定实例需要创建哪些对象时更加灵活。</li>\n<li>结构型模式<br>\n这些设计模式关注类和对象的组合。继承的概念被用来组合接口和定义组合对象获得新功能的方式。</li>\n<li>行为型模型<br>\n这些设计模式特别关注对象之间的通信。</li>\n<li>J2EE 模式<br>\n这些设计模式特别关注表示层。这些模式是由 Sun Java Center 鉴定的。</li>\n</ul>\n<h3 id=\"6大原则\"><a class=\"markdownIt-Anchor\" href=\"#6大原则\"></a> 6大原则</h3>\n<ul>\n<li>\n<p>开闭原则<br>\n对扩展开放，对修改关闭。</p>\n</li>\n<li>\n<p>里氏代换原则（Liskov Substitution Principle）<br>\n任何基类可以出现的地方，子类一定可以出现</p>\n</li>\n<li>\n<p>依赖倒转原则<br>\n针对接口编程，依赖于抽象而不依赖于具体</p>\n</li>\n<li>\n<p>接口隔离原则<br>\n使用多个隔离的接口，比使用单个接口要好。目的在于降低类之间的耦合度</p>\n</li>\n<li>\n<p>迪米特法则，最少知道原则<br>\n一个实体应当尽量少地与其他实体之间发生相互作用，使得系统功能模块相对独立</p>\n</li>\n<li>\n<p>合成复用原则<br>\n尽量使用合成/聚合的方式，而不是使用继承</p>\n</li>\n</ul>\n<blockquote>\n<p>emememem 可以说很复杂了</p>\n</blockquote>\n<h3 id=\"工厂模式\"><a class=\"markdownIt-Anchor\" href=\"#工厂模式\"></a> 工厂模式</h3>\n<ul>\n<li>创建型模式</li>\n<li>目的：<strong>定义一个创建对象的接口</strong>，让子类自己去决定实例化哪一个工厂类，工厂模式使其创建过程延迟到子类进行。</li>\n<li>个人看法，这个好像就是说，做一个接口去实现对象的创建，目的有啥呢，一个是扩展性好，加产品加一个工厂，加一个实现类就完事了[额，感觉到后面会越来越多]，还有就是封装性？还有就是，他说是对一些比较复杂的对象有好处。</li>\n</ul>\n<h3 id=\"抽象工厂模式\"><a class=\"markdownIt-Anchor\" href=\"#抽象工厂模式\"></a> 抽象工厂模式</h3>\n<ul>\n<li>是围绕一个超级工厂创建其他工厂</li>\n<li>目的：提供一个创建一系列相关或相互依赖对象的接口，而无需指定它们具体的类</li>\n<li>个人看法，不是说对扩展开放，对修改关闭，问题这里，没有办法解决把，增加一个类，则要增加一个类，也要加一个工厂，但是这里的抽象工厂也是要进行修改才行。不过也只是要修改那个工厂制作的东西</li>\n</ul>\n<h3 id=\"单例模式\"><a class=\"markdownIt-Anchor\" href=\"#单例模式\"></a> 单例模式</h3>\n<ul>\n<li>只能有一个实例，并且只能自己去创建自己的实例，单例类必须给所有其他对象提供这一实例</li>\n<li>目的在于解决一个全局使用得类频繁的创建与销毁</li>\n<li>几种实现的方式，目的在于一个安全性的考虑</li>\n</ul>\n<h4 id=\"懒汉式模式\"><a class=\"markdownIt-Anchor\" href=\"#懒汉式模式\"></a> 懒汉式模式</h4>\n<ul>\n<li>lazy初始化</li>\n<li>多线程不安全</li>\n</ul>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">xianchen</span></span></span><br><span class=\"line\"><span class=\"class\"></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">static</span> xianchen instance;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">private</span> <span class=\"title\">xianchen</span><span class=\"params\">()</span></span>&#123;&#125;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> xianchen <span class=\"title\">getinstance</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\">    </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(instance == <span class=\"keyword\">null</span>)</span><br><span class=\"line\">            instance = <span class=\"keyword\">new</span> xianchen();</span><br><span class=\"line\">        <span class=\"keyword\">return</span> instance;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h4 id=\"懒汉式线程安全\"><a class=\"markdownIt-Anchor\" href=\"#懒汉式线程安全\"></a> 懒汉式，线程安全</h4>\n<ul>\n<li>lazy初始化</li>\n<li>多线程安全(加了一个synchronized锁)</li>\n</ul>\n<blockquote>\n<p>这个synchronized是java的一种同步锁，这里旧的说同步是啥，线程同步主要的目的是防止不同的线程对同一个文件同时进行操作造成奇奇怪怪的操作。然后这里又涉及到了进程与线程，还有java的多线程，哇，好菜啊，啥都不会。</p>\n</blockquote>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">xianchen</span></span></span><br><span class=\"line\"><span class=\"class\"></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">static</span> xianchen instance;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">private</span> <span class=\"title\">xianchen</span><span class=\"params\">()</span></span>&#123;&#125;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">synchronized</span> xianchen <span class=\"title\">getinstance</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\">    </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(instance == <span class=\"keyword\">null</span>)</span><br><span class=\"line\">            instance = <span class=\"keyword\">new</span> xianchen();</span><br><span class=\"line\">        <span class=\"keyword\">return</span> instance;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h4 id=\"饿汉式线程安全\"><a class=\"markdownIt-Anchor\" href=\"#饿汉式线程安全\"></a> 饿汉式，线程安全</h4>\n<ul>\n<li>没lazy初始化</li>\n<li>它基于 classloader 机制避免了多线程的同步问题，</li>\n</ul>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">xianchen</span></span></span><br><span class=\"line\"><span class=\"class\"></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">static</span> xianchen instance = <span class=\"keyword\">new</span> xianchen();</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">private</span> <span class=\"title\">xianchen</span><span class=\"params\">()</span></span>&#123;&#125;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> xianchen <span class=\"title\">getInstance</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\">    </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> instance;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h4 id=\"双检锁双重校验锁\"><a class=\"markdownIt-Anchor\" href=\"#双检锁双重校验锁\"></a> 双检锁/双重校验锁</h4>\n<ul>\n<li>lazy初始化</li>\n<li>多线程安全</li>\n</ul>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">xianchen</span></span></span><br><span class=\"line\"><span class=\"class\"></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">volatile</span> <span class=\"keyword\">static</span> xianchen instance;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">private</span> <span class=\"title\">xianchen</span><span class=\"params\">()</span></span>&#123;&#125;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> xianchen <span class=\"title\">getXianchen</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\">    </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(instance == <span class=\"keyword\">null</span> )</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            <span class=\"keyword\">synchronized</span>(instance.class)</span><br><span class=\"line\">            &#123;</span><br><span class=\"line\">                <span class=\"keyword\">if</span>(instance == <span class=\"keyword\">null</span>)</span><br><span class=\"line\">                &#123;</span><br><span class=\"line\">                    instance = <span class=\"keyword\">new</span> xianchen();</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> instance</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h4 id=\"静部内态类\"><a class=\"markdownIt-Anchor\" href=\"#静部内态类\"></a> 静部内态类</h4>\n<ul>\n<li>lazy初始化</li>\n<li>多线程安全</li>\n<li>对静态域进行延迟初始化,这个的目的在于，只有getinstance被显式调用的时候，才会显式装载xianchen类</li>\n</ul>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">xianchen</span></span></span><br><span class=\"line\"><span class=\"class\"></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">xianchenHolder</span></span></span><br><span class=\"line\"><span class=\"class\">    </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"keyword\">final</span> xianchen instance = <span class=\"keyword\">new</span> xianchen();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">private</span> <span class=\"title\">xianchen</span><span class=\"params\">()</span></span>&#123;&#125;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">final</span> xianchen <span class=\"title\">getinstance</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\">    </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> xianchenHolder.instance;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h4 id=\"枚举\"><a class=\"markdownIt-Anchor\" href=\"#枚举\"></a> 枚举</h4>\n<ul>\n<li>好像不太实用</li>\n</ul>\n<h3 id=\"建造者模式\"><a class=\"markdownIt-Anchor\" href=\"#建造者模式\"></a> 建造者模式</h3>\n<ul>\n<li>将一个复杂的构建与表示相分离</li>\n<li>一些基本部件不会变，而其组合经常变化。</li>\n<li>将变与不变分离开</li>\n</ul>\n<h3 id=\"原型模式\"><a class=\"markdownIt-Anchor\" href=\"#原型模式\"></a> 原型模式</h3>\n<ul>\n<li>用于创建重复的对象，同时又能保证性能。</li>\n<li>常用于直接创建对象的代价比较大的时候</li>\n</ul>\n<h3 id=\"适配器模式\"><a class=\"markdownIt-Anchor\" href=\"#适配器模式\"></a> 适配器模式</h3>\n<ul>\n<li>作为两个互相不兼容的接口之间的桥梁</li>\n<li>将一个类的接口转换成客户希望的另外一个接口</li>\n<li>解决方法：继承和依赖</li>\n</ul>\n<h3 id=\"桥接模式\"><a class=\"markdownIt-Anchor\" href=\"#桥接模式\"></a> 桥接模式</h3>\n<ul>\n<li>将抽象和现实分离开，解决的是类继承爆炸的问题。</li>\n<li>得理解那个抽象得意义，感觉就是把它内部的一些常用的接口给提出来，然后对这个接口进行实例的操作。</li>\n</ul>\n<h3 id=\"过滤器模式\"><a class=\"markdownIt-Anchor\" href=\"#过滤器模式\"></a> 过滤器模式</h3>\n<ul>\n<li>对于不用的类，有不同的过滤方式，比如说list<num>,和list<float>都有不同的过滤方式。就是传进来的是一个集合，但是对于里面的数据，怎么过滤出需要的元素。</float></num></li>\n</ul>\n<h3 id=\"组合模式\"><a class=\"markdownIt-Anchor\" href=\"#组合模式\"></a> 组合模式</h3>\n<ul>\n<li>将对象组合成树形结构已表示“部分整体”的层次结构，组合模式让单个对象和组合对象的使用具有一致性。感觉就是vector里面加vector</li>\n</ul>\n<h3 id=\"装饰器模式\"><a class=\"markdownIt-Anchor\" href=\"#装饰器模式\"></a> 装饰器模式</h3>\n<ul>\n<li>允许向一个现有的类添加新的功能</li>\n<li>感觉是通过继承的方法来解决的。然后它又说子类太多很麻烦</li>\n<li>用一个抽象类，加一个修饰类，抽象类不具体实现，修饰类去实现。</li>\n</ul>\n<h3 id=\"外观模式\"><a class=\"markdownIt-Anchor\" href=\"#外观模式\"></a> 外观模式</h3>\n<ul>\n<li>目的是隐藏系统的复杂性，向客户端提供了一个可以访问系统的接口</li>\n<li>在客户端和复杂系统之间再加一层，这一层将调用顺序、依赖关系等处理好。</li>\n<li>相当于那个前台</li>\n</ul>\n<h3 id=\"享元模式\"><a class=\"markdownIt-Anchor\" href=\"#享元模式\"></a> 享元模式</h3>\n<ul>\n<li>目的：减少创建对象的数量</li>\n<li>加一个hashmap，看某个文件是不是出现过，没出现过就初始化，不然就从内存池里面拿出来。</li>\n<li>java里面的string</li>\n</ul>\n<h3 id=\"代理模式\"><a class=\"markdownIt-Anchor\" href=\"#代理模式\"></a> 代理模式</h3>\n<ul>\n<li>一个类代表另一个类的功能</li>\n<li>增加中间层</li>\n<li>windows中的中间层</li>\n</ul>\n<h3 id=\"责任链模式\"><a class=\"markdownIt-Anchor\" href=\"#责任链模式\"></a> 责任链模式</h3>\n<ul>\n<li>为请求创建了一个接收者对象的链</li>\n<li>目的在于将请求者和发送者解耦，好像感觉只有在多线程才会出事。</li>\n<li>有多个对象可以处理同一个请求，具体哪个对象处理，由那个时刻处理</li>\n</ul>\n<h3 id=\"命令模式\"><a class=\"markdownIt-Anchor\" href=\"#命令模式\"></a> 命令模式</h3>\n<ul>\n<li>将命令分装成一个对象进行处理</li>\n<li>感觉这个还是挺好理解的</li>\n</ul>\n<h3 id=\"解释器模式\"><a class=\"markdownIt-Anchor\" href=\"#解释器模式\"></a> 解释器模式</h3>\n<ul>\n<li>好像是说，相当于是一个解释器，像sql查询语句就是这样，对一些看起来可能不同的语言进行解析。</li>\n</ul>\n<h3 id=\"迭代器模式\"><a class=\"markdownIt-Anchor\" href=\"#迭代器模式\"></a> 迭代器模式</h3>\n<ul>\n<li>这个熟悉，c++中的set，map的遍历就是用这个</li>\n</ul>\n<h3 id=\"中介者模式\"><a class=\"markdownIt-Anchor\" href=\"#中介者模式\"></a> 中介者模式</h3>\n<ul>\n<li>用来降低多个对象和类之间的通信复杂度</li>\n<li>操作时将网状结构分离成星型结构(中心论)</li>\n<li>比如聊天室</li>\n</ul>\n<h3 id=\"备忘录模式\"><a class=\"markdownIt-Anchor\" href=\"#备忘录模式\"></a> 备忘录模式</h3>\n<ul>\n<li>在不破坏封装性的前提下，获得一个对象的内部状态，并在对象之外保存这个状态</li>\n<li>像存档</li>\n</ul>\n<h3 id=\"观察者模式\"><a class=\"markdownIt-Anchor\" href=\"#观察者模式\"></a> 观察者模式</h3>\n<ul>\n<li>存在一对多的关系时，当一个被改时，被依赖的类会被通知并自动更新。</li>\n<li>用一个集合去存这个</li>\n</ul>\n<h3 id=\"状态者模式\"><a class=\"markdownIt-Anchor\" href=\"#状态者模式\"></a> 状态者模式</h3>\n<ul>\n<li>就是类的行为是由它的状态决定的</li>\n<li>但是这个对象，不同的状态对象还是不同的。</li>\n</ul>\n<h3 id=\"空对象模式\"><a class=\"markdownIt-Anchor\" href=\"#空对象模式\"></a> 空对象模式</h3>\n<ul>\n<li>继承一下，一个抽象类，一个实例类，一个啥都不去做的空类，感觉没啥用，除了体系更健全。</li>\n</ul>\n<h3 id=\"策略模式\"><a class=\"markdownIt-Anchor\" href=\"#策略模式\"></a> 策略模式</h3>\n<ul>\n<li>一个类的行为和算法能在运行时更改</li>\n<li>将算法打包成类，进行替换操作。不过几个算法要差不多，分装好才行。</li>\n</ul>\n<h3 id=\"模板模式\"><a class=\"markdownIt-Anchor\" href=\"#模板模式\"></a> 模板模式</h3>\n<ul>\n<li>抽象类公开定义执行它的方法/模板。</li>\n<li>它的子类可以按需要重写方法实现</li>\n<li>好像没啥说的，就是很正常的。</li>\n</ul>\n<h3 id=\"访问者模式\"><a class=\"markdownIt-Anchor\" href=\"#访问者模式\"></a> 访问者模式</h3>\n<ul>\n<li>将数据与数据结构分离开</li>\n<li>在被访问的类里面加一个对外提供接待访问者的接口。</li>\n<li>感觉这个的目的就在于防止对数据本生进行操作(加一层，有用？可能自我欺骗，嘿嘿嘿)</li>\n</ul>\n<h3 id=\"mvc模式\"><a class=\"markdownIt-Anchor\" href=\"#mvc模式\"></a> mvc模式</h3>\n<ul>\n<li>Model-View-Controller（模型-视图-控制器） 模式，这个好像是挺重要的一个模式，之前就听说过这个东西。用于分层开发。</li>\n<li>model 代表一个存取数据的对象</li>\n<li>view 视图代表包含数据的可视化</li>\n<li>controller 控制器作用于模型和视图上，他控制数据流向模型对象，并在数据变化时更新视图</li>\n<li>不过咋感觉和那个适配器有点像，控制器那个</li>\n</ul>\n<h3 id=\"业务代表模式\"><a class=\"markdownIt-Anchor\" href=\"#业务代表模式\"></a> 业务代表模式</h3>\n<ul>\n<li>用于对表示层和业务层解耦，前端和后端分离？</li>\n<li>业务实现向外暴露统一接口。由业务代表来具体查询和掉用业务接口执行相关业务，而客户则只需要想业务代表调用相关简化后的接口即可实现响应业务。</li>\n<li>好像springboot里面的controler和service，集成一下，再暴露给外面。</li>\n</ul>\n<h3 id=\"组合实体模式\"><a class=\"markdownIt-Anchor\" href=\"#组合实体模式\"></a> 组合实体模式</h3>\n<ul>\n<li>说用在ejb持久化机制里面？？？？</li>\n<li>先码着，四个参与者</li>\n<li>组合实体，粗粒度对象，依赖对象，策略</li>\n<li>ememe看那个例子，感觉就是</li>\n</ul>\n<h3 id=\"数据访问对象模式\"><a class=\"markdownIt-Anchor\" href=\"#数据访问对象模式\"></a> 数据访问对象模式</h3>\n<ul>\n<li>用在把低级的数据访问api从高级的业务服务中分离出来。</li>\n<li>三个组成部分</li>\n<li>数据访问对象接口</li>\n<li>数据访问对象实体类</li>\n<li>模型对象/数值对象</li>\n<li>这个感觉好像还挺重要的，对象于数据库里面一行进行对应。</li>\n</ul>\n<h3 id=\"前端控制器模式\"><a class=\"markdownIt-Anchor\" href=\"#前端控制器模式\"></a> 前端控制器模式</h3>\n<ul>\n<li>目的在于提供一个集中的请求处理机制</li>\n<li>前端控制器： 处理应用程序所有类型请求的单个处理程序</li>\n<li>调度器：前端控制器可能使用一个调度器对象来调度请求到相应的具体处理程序</li>\n<li>视图是为请求而创建的对象</li>\n</ul>\n<h3 id=\"拦截过滤器模式\"><a class=\"markdownIt-Anchor\" href=\"#拦截过滤器模式\"></a> 拦截过滤器模式</h3>\n<ul>\n<li>目的是对应用程序的请求或响应做一些预处理/后处理，</li>\n</ul>\n<h3 id=\"服务定位器模式\"><a class=\"markdownIt-Anchor\" href=\"#服务定位器模式\"></a> 服务定位器模式</h3>\n<ul>\n<li>目的是利用缓存来解决在查找服务代价高的问题</li>\n</ul>\n<h3 id=\"传输对象模式\"><a class=\"markdownIt-Anchor\" href=\"#传输对象模式\"></a> 传输对象模式</h3>\n<ul>\n<li>用于客户端向服务器一次性传递多个带属性的数值</li>\n<li>感觉就是相当于多一个模板从省城的作用</li>\n</ul>\n<h2 id=\"总结\"><a class=\"markdownIt-Anchor\" href=\"#总结\"></a> 总结</h2>\n<blockquote>\n<p>哇,23个设计模式，好多啊，看的我头皮发麻，很多感觉也只是一知半解，这个还是得通过以后得面对对象编程去总结经验。这个并不是什么教学啊，这只是我的个人笔记，有想法的去看<a href=\"http://www.runoob.com/design-pattern/decorator-pattern.html\" target=\"_blank\" rel=\"noopener\">菜鸟教程</a><br>\n这个设计模式，主要的目的是提高一个代码的规范性，可扩展性，还有就是一些常见的面对对象的一个技巧，不管怎么说，万物皆对象。</p>\n</blockquote>\n","site":{"data":{}},"excerpt":"","more":"<h3 id=\"这是啥\"><a class=\"markdownIt-Anchor\" href=\"#这是啥\"></a> 这是啥</h3>\n<blockquote>\n<p>设计模式（Design Pattern）是前辈们对代码开发经验的总结，是解决特定问题的一系列套路。它不是语法规定，而是一套用来提高代码可复用性、可维护性、可读性、稳健性以及安全性的解决方案。讲道理这个还是挺重要的。反正我看自己写的代码，感觉挺丑的。<br>\n四人帮提出的一个思想，是面对对象中常用的设计原则，关键的思想在于</p>\n</blockquote>\n<ul>\n<li>对接口编程而不是对实现编程。</li>\n<li>优先使用对象组合而不是继承。</li>\n</ul>\n<blockquote>\n<p>主要学习是通过看<a href=\"http://www.runoob.com/design-pattern/decorator-pattern.html\" target=\"_blank\" rel=\"noopener\">菜鸟教程</a></p>\n</blockquote>\n<h3 id=\"分类\"><a class=\"markdownIt-Anchor\" href=\"#分类\"></a> 分类</h3>\n<ul>\n<li>创建型模式<br>\n这些设计模式提供了一种在创建对象的同时隐藏创建逻辑的方式，而不是使用 new 运算符直接实例化对象。这使得程序在判断针对某个给定实例需要创建哪些对象时更加灵活。</li>\n<li>结构型模式<br>\n这些设计模式关注类和对象的组合。继承的概念被用来组合接口和定义组合对象获得新功能的方式。</li>\n<li>行为型模型<br>\n这些设计模式特别关注对象之间的通信。</li>\n<li>J2EE 模式<br>\n这些设计模式特别关注表示层。这些模式是由 Sun Java Center 鉴定的。</li>\n</ul>\n<h3 id=\"6大原则\"><a class=\"markdownIt-Anchor\" href=\"#6大原则\"></a> 6大原则</h3>\n<ul>\n<li>\n<p>开闭原则<br>\n对扩展开放，对修改关闭。</p>\n</li>\n<li>\n<p>里氏代换原则（Liskov Substitution Principle）<br>\n任何基类可以出现的地方，子类一定可以出现</p>\n</li>\n<li>\n<p>依赖倒转原则<br>\n针对接口编程，依赖于抽象而不依赖于具体</p>\n</li>\n<li>\n<p>接口隔离原则<br>\n使用多个隔离的接口，比使用单个接口要好。目的在于降低类之间的耦合度</p>\n</li>\n<li>\n<p>迪米特法则，最少知道原则<br>\n一个实体应当尽量少地与其他实体之间发生相互作用，使得系统功能模块相对独立</p>\n</li>\n<li>\n<p>合成复用原则<br>\n尽量使用合成/聚合的方式，而不是使用继承</p>\n</li>\n</ul>\n<blockquote>\n<p>emememem 可以说很复杂了</p>\n</blockquote>\n<h3 id=\"工厂模式\"><a class=\"markdownIt-Anchor\" href=\"#工厂模式\"></a> 工厂模式</h3>\n<ul>\n<li>创建型模式</li>\n<li>目的：<strong>定义一个创建对象的接口</strong>，让子类自己去决定实例化哪一个工厂类，工厂模式使其创建过程延迟到子类进行。</li>\n<li>个人看法，这个好像就是说，做一个接口去实现对象的创建，目的有啥呢，一个是扩展性好，加产品加一个工厂，加一个实现类就完事了[额，感觉到后面会越来越多]，还有就是封装性？还有就是，他说是对一些比较复杂的对象有好处。</li>\n</ul>\n<h3 id=\"抽象工厂模式\"><a class=\"markdownIt-Anchor\" href=\"#抽象工厂模式\"></a> 抽象工厂模式</h3>\n<ul>\n<li>是围绕一个超级工厂创建其他工厂</li>\n<li>目的：提供一个创建一系列相关或相互依赖对象的接口，而无需指定它们具体的类</li>\n<li>个人看法，不是说对扩展开放，对修改关闭，问题这里，没有办法解决把，增加一个类，则要增加一个类，也要加一个工厂，但是这里的抽象工厂也是要进行修改才行。不过也只是要修改那个工厂制作的东西</li>\n</ul>\n<h3 id=\"单例模式\"><a class=\"markdownIt-Anchor\" href=\"#单例模式\"></a> 单例模式</h3>\n<ul>\n<li>只能有一个实例，并且只能自己去创建自己的实例，单例类必须给所有其他对象提供这一实例</li>\n<li>目的在于解决一个全局使用得类频繁的创建与销毁</li>\n<li>几种实现的方式，目的在于一个安全性的考虑</li>\n</ul>\n<h4 id=\"懒汉式模式\"><a class=\"markdownIt-Anchor\" href=\"#懒汉式模式\"></a> 懒汉式模式</h4>\n<ul>\n<li>lazy初始化</li>\n<li>多线程不安全</li>\n</ul>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">xianchen</span></span></span><br><span class=\"line\"><span class=\"class\"></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">static</span> xianchen instance;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">private</span> <span class=\"title\">xianchen</span><span class=\"params\">()</span></span>&#123;&#125;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> xianchen <span class=\"title\">getinstance</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\">    </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(instance == <span class=\"keyword\">null</span>)</span><br><span class=\"line\">            instance = <span class=\"keyword\">new</span> xianchen();</span><br><span class=\"line\">        <span class=\"keyword\">return</span> instance;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h4 id=\"懒汉式线程安全\"><a class=\"markdownIt-Anchor\" href=\"#懒汉式线程安全\"></a> 懒汉式，线程安全</h4>\n<ul>\n<li>lazy初始化</li>\n<li>多线程安全(加了一个synchronized锁)</li>\n</ul>\n<blockquote>\n<p>这个synchronized是java的一种同步锁，这里旧的说同步是啥，线程同步主要的目的是防止不同的线程对同一个文件同时进行操作造成奇奇怪怪的操作。然后这里又涉及到了进程与线程，还有java的多线程，哇，好菜啊，啥都不会。</p>\n</blockquote>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">xianchen</span></span></span><br><span class=\"line\"><span class=\"class\"></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">static</span> xianchen instance;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">private</span> <span class=\"title\">xianchen</span><span class=\"params\">()</span></span>&#123;&#125;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">synchronized</span> xianchen <span class=\"title\">getinstance</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\">    </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(instance == <span class=\"keyword\">null</span>)</span><br><span class=\"line\">            instance = <span class=\"keyword\">new</span> xianchen();</span><br><span class=\"line\">        <span class=\"keyword\">return</span> instance;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h4 id=\"饿汉式线程安全\"><a class=\"markdownIt-Anchor\" href=\"#饿汉式线程安全\"></a> 饿汉式，线程安全</h4>\n<ul>\n<li>没lazy初始化</li>\n<li>它基于 classloader 机制避免了多线程的同步问题，</li>\n</ul>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">xianchen</span></span></span><br><span class=\"line\"><span class=\"class\"></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">static</span> xianchen instance = <span class=\"keyword\">new</span> xianchen();</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">private</span> <span class=\"title\">xianchen</span><span class=\"params\">()</span></span>&#123;&#125;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> xianchen <span class=\"title\">getInstance</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\">    </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> instance;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h4 id=\"双检锁双重校验锁\"><a class=\"markdownIt-Anchor\" href=\"#双检锁双重校验锁\"></a> 双检锁/双重校验锁</h4>\n<ul>\n<li>lazy初始化</li>\n<li>多线程安全</li>\n</ul>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">xianchen</span></span></span><br><span class=\"line\"><span class=\"class\"></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">volatile</span> <span class=\"keyword\">static</span> xianchen instance;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">private</span> <span class=\"title\">xianchen</span><span class=\"params\">()</span></span>&#123;&#125;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> xianchen <span class=\"title\">getXianchen</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\">    </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(instance == <span class=\"keyword\">null</span> )</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            <span class=\"keyword\">synchronized</span>(instance.class)</span><br><span class=\"line\">            &#123;</span><br><span class=\"line\">                <span class=\"keyword\">if</span>(instance == <span class=\"keyword\">null</span>)</span><br><span class=\"line\">                &#123;</span><br><span class=\"line\">                    instance = <span class=\"keyword\">new</span> xianchen();</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> instance</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h4 id=\"静部内态类\"><a class=\"markdownIt-Anchor\" href=\"#静部内态类\"></a> 静部内态类</h4>\n<ul>\n<li>lazy初始化</li>\n<li>多线程安全</li>\n<li>对静态域进行延迟初始化,这个的目的在于，只有getinstance被显式调用的时候，才会显式装载xianchen类</li>\n</ul>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">xianchen</span></span></span><br><span class=\"line\"><span class=\"class\"></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">xianchenHolder</span></span></span><br><span class=\"line\"><span class=\"class\">    </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"keyword\">final</span> xianchen instance = <span class=\"keyword\">new</span> xianchen();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">private</span> <span class=\"title\">xianchen</span><span class=\"params\">()</span></span>&#123;&#125;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">final</span> xianchen <span class=\"title\">getinstance</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\">    </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> xianchenHolder.instance;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h4 id=\"枚举\"><a class=\"markdownIt-Anchor\" href=\"#枚举\"></a> 枚举</h4>\n<ul>\n<li>好像不太实用</li>\n</ul>\n<h3 id=\"建造者模式\"><a class=\"markdownIt-Anchor\" href=\"#建造者模式\"></a> 建造者模式</h3>\n<ul>\n<li>将一个复杂的构建与表示相分离</li>\n<li>一些基本部件不会变，而其组合经常变化。</li>\n<li>将变与不变分离开</li>\n</ul>\n<h3 id=\"原型模式\"><a class=\"markdownIt-Anchor\" href=\"#原型模式\"></a> 原型模式</h3>\n<ul>\n<li>用于创建重复的对象，同时又能保证性能。</li>\n<li>常用于直接创建对象的代价比较大的时候</li>\n</ul>\n<h3 id=\"适配器模式\"><a class=\"markdownIt-Anchor\" href=\"#适配器模式\"></a> 适配器模式</h3>\n<ul>\n<li>作为两个互相不兼容的接口之间的桥梁</li>\n<li>将一个类的接口转换成客户希望的另外一个接口</li>\n<li>解决方法：继承和依赖</li>\n</ul>\n<h3 id=\"桥接模式\"><a class=\"markdownIt-Anchor\" href=\"#桥接模式\"></a> 桥接模式</h3>\n<ul>\n<li>将抽象和现实分离开，解决的是类继承爆炸的问题。</li>\n<li>得理解那个抽象得意义，感觉就是把它内部的一些常用的接口给提出来，然后对这个接口进行实例的操作。</li>\n</ul>\n<h3 id=\"过滤器模式\"><a class=\"markdownIt-Anchor\" href=\"#过滤器模式\"></a> 过滤器模式</h3>\n<ul>\n<li>对于不用的类，有不同的过滤方式，比如说list<num>,和list<float>都有不同的过滤方式。就是传进来的是一个集合，但是对于里面的数据，怎么过滤出需要的元素。</float></num></li>\n</ul>\n<h3 id=\"组合模式\"><a class=\"markdownIt-Anchor\" href=\"#组合模式\"></a> 组合模式</h3>\n<ul>\n<li>将对象组合成树形结构已表示“部分整体”的层次结构，组合模式让单个对象和组合对象的使用具有一致性。感觉就是vector里面加vector</li>\n</ul>\n<h3 id=\"装饰器模式\"><a class=\"markdownIt-Anchor\" href=\"#装饰器模式\"></a> 装饰器模式</h3>\n<ul>\n<li>允许向一个现有的类添加新的功能</li>\n<li>感觉是通过继承的方法来解决的。然后它又说子类太多很麻烦</li>\n<li>用一个抽象类，加一个修饰类，抽象类不具体实现，修饰类去实现。</li>\n</ul>\n<h3 id=\"外观模式\"><a class=\"markdownIt-Anchor\" href=\"#外观模式\"></a> 外观模式</h3>\n<ul>\n<li>目的是隐藏系统的复杂性，向客户端提供了一个可以访问系统的接口</li>\n<li>在客户端和复杂系统之间再加一层，这一层将调用顺序、依赖关系等处理好。</li>\n<li>相当于那个前台</li>\n</ul>\n<h3 id=\"享元模式\"><a class=\"markdownIt-Anchor\" href=\"#享元模式\"></a> 享元模式</h3>\n<ul>\n<li>目的：减少创建对象的数量</li>\n<li>加一个hashmap，看某个文件是不是出现过，没出现过就初始化，不然就从内存池里面拿出来。</li>\n<li>java里面的string</li>\n</ul>\n<h3 id=\"代理模式\"><a class=\"markdownIt-Anchor\" href=\"#代理模式\"></a> 代理模式</h3>\n<ul>\n<li>一个类代表另一个类的功能</li>\n<li>增加中间层</li>\n<li>windows中的中间层</li>\n</ul>\n<h3 id=\"责任链模式\"><a class=\"markdownIt-Anchor\" href=\"#责任链模式\"></a> 责任链模式</h3>\n<ul>\n<li>为请求创建了一个接收者对象的链</li>\n<li>目的在于将请求者和发送者解耦，好像感觉只有在多线程才会出事。</li>\n<li>有多个对象可以处理同一个请求，具体哪个对象处理，由那个时刻处理</li>\n</ul>\n<h3 id=\"命令模式\"><a class=\"markdownIt-Anchor\" href=\"#命令模式\"></a> 命令模式</h3>\n<ul>\n<li>将命令分装成一个对象进行处理</li>\n<li>感觉这个还是挺好理解的</li>\n</ul>\n<h3 id=\"解释器模式\"><a class=\"markdownIt-Anchor\" href=\"#解释器模式\"></a> 解释器模式</h3>\n<ul>\n<li>好像是说，相当于是一个解释器，像sql查询语句就是这样，对一些看起来可能不同的语言进行解析。</li>\n</ul>\n<h3 id=\"迭代器模式\"><a class=\"markdownIt-Anchor\" href=\"#迭代器模式\"></a> 迭代器模式</h3>\n<ul>\n<li>这个熟悉，c++中的set，map的遍历就是用这个</li>\n</ul>\n<h3 id=\"中介者模式\"><a class=\"markdownIt-Anchor\" href=\"#中介者模式\"></a> 中介者模式</h3>\n<ul>\n<li>用来降低多个对象和类之间的通信复杂度</li>\n<li>操作时将网状结构分离成星型结构(中心论)</li>\n<li>比如聊天室</li>\n</ul>\n<h3 id=\"备忘录模式\"><a class=\"markdownIt-Anchor\" href=\"#备忘录模式\"></a> 备忘录模式</h3>\n<ul>\n<li>在不破坏封装性的前提下，获得一个对象的内部状态，并在对象之外保存这个状态</li>\n<li>像存档</li>\n</ul>\n<h3 id=\"观察者模式\"><a class=\"markdownIt-Anchor\" href=\"#观察者模式\"></a> 观察者模式</h3>\n<ul>\n<li>存在一对多的关系时，当一个被改时，被依赖的类会被通知并自动更新。</li>\n<li>用一个集合去存这个</li>\n</ul>\n<h3 id=\"状态者模式\"><a class=\"markdownIt-Anchor\" href=\"#状态者模式\"></a> 状态者模式</h3>\n<ul>\n<li>就是类的行为是由它的状态决定的</li>\n<li>但是这个对象，不同的状态对象还是不同的。</li>\n</ul>\n<h3 id=\"空对象模式\"><a class=\"markdownIt-Anchor\" href=\"#空对象模式\"></a> 空对象模式</h3>\n<ul>\n<li>继承一下，一个抽象类，一个实例类，一个啥都不去做的空类，感觉没啥用，除了体系更健全。</li>\n</ul>\n<h3 id=\"策略模式\"><a class=\"markdownIt-Anchor\" href=\"#策略模式\"></a> 策略模式</h3>\n<ul>\n<li>一个类的行为和算法能在运行时更改</li>\n<li>将算法打包成类，进行替换操作。不过几个算法要差不多，分装好才行。</li>\n</ul>\n<h3 id=\"模板模式\"><a class=\"markdownIt-Anchor\" href=\"#模板模式\"></a> 模板模式</h3>\n<ul>\n<li>抽象类公开定义执行它的方法/模板。</li>\n<li>它的子类可以按需要重写方法实现</li>\n<li>好像没啥说的，就是很正常的。</li>\n</ul>\n<h3 id=\"访问者模式\"><a class=\"markdownIt-Anchor\" href=\"#访问者模式\"></a> 访问者模式</h3>\n<ul>\n<li>将数据与数据结构分离开</li>\n<li>在被访问的类里面加一个对外提供接待访问者的接口。</li>\n<li>感觉这个的目的就在于防止对数据本生进行操作(加一层，有用？可能自我欺骗，嘿嘿嘿)</li>\n</ul>\n<h3 id=\"mvc模式\"><a class=\"markdownIt-Anchor\" href=\"#mvc模式\"></a> mvc模式</h3>\n<ul>\n<li>Model-View-Controller（模型-视图-控制器） 模式，这个好像是挺重要的一个模式，之前就听说过这个东西。用于分层开发。</li>\n<li>model 代表一个存取数据的对象</li>\n<li>view 视图代表包含数据的可视化</li>\n<li>controller 控制器作用于模型和视图上，他控制数据流向模型对象，并在数据变化时更新视图</li>\n<li>不过咋感觉和那个适配器有点像，控制器那个</li>\n</ul>\n<h3 id=\"业务代表模式\"><a class=\"markdownIt-Anchor\" href=\"#业务代表模式\"></a> 业务代表模式</h3>\n<ul>\n<li>用于对表示层和业务层解耦，前端和后端分离？</li>\n<li>业务实现向外暴露统一接口。由业务代表来具体查询和掉用业务接口执行相关业务，而客户则只需要想业务代表调用相关简化后的接口即可实现响应业务。</li>\n<li>好像springboot里面的controler和service，集成一下，再暴露给外面。</li>\n</ul>\n<h3 id=\"组合实体模式\"><a class=\"markdownIt-Anchor\" href=\"#组合实体模式\"></a> 组合实体模式</h3>\n<ul>\n<li>说用在ejb持久化机制里面？？？？</li>\n<li>先码着，四个参与者</li>\n<li>组合实体，粗粒度对象，依赖对象，策略</li>\n<li>ememe看那个例子，感觉就是</li>\n</ul>\n<h3 id=\"数据访问对象模式\"><a class=\"markdownIt-Anchor\" href=\"#数据访问对象模式\"></a> 数据访问对象模式</h3>\n<ul>\n<li>用在把低级的数据访问api从高级的业务服务中分离出来。</li>\n<li>三个组成部分</li>\n<li>数据访问对象接口</li>\n<li>数据访问对象实体类</li>\n<li>模型对象/数值对象</li>\n<li>这个感觉好像还挺重要的，对象于数据库里面一行进行对应。</li>\n</ul>\n<h3 id=\"前端控制器模式\"><a class=\"markdownIt-Anchor\" href=\"#前端控制器模式\"></a> 前端控制器模式</h3>\n<ul>\n<li>目的在于提供一个集中的请求处理机制</li>\n<li>前端控制器： 处理应用程序所有类型请求的单个处理程序</li>\n<li>调度器：前端控制器可能使用一个调度器对象来调度请求到相应的具体处理程序</li>\n<li>视图是为请求而创建的对象</li>\n</ul>\n<h3 id=\"拦截过滤器模式\"><a class=\"markdownIt-Anchor\" href=\"#拦截过滤器模式\"></a> 拦截过滤器模式</h3>\n<ul>\n<li>目的是对应用程序的请求或响应做一些预处理/后处理，</li>\n</ul>\n<h3 id=\"服务定位器模式\"><a class=\"markdownIt-Anchor\" href=\"#服务定位器模式\"></a> 服务定位器模式</h3>\n<ul>\n<li>目的是利用缓存来解决在查找服务代价高的问题</li>\n</ul>\n<h3 id=\"传输对象模式\"><a class=\"markdownIt-Anchor\" href=\"#传输对象模式\"></a> 传输对象模式</h3>\n<ul>\n<li>用于客户端向服务器一次性传递多个带属性的数值</li>\n<li>感觉就是相当于多一个模板从省城的作用</li>\n</ul>\n<h2 id=\"总结\"><a class=\"markdownIt-Anchor\" href=\"#总结\"></a> 总结</h2>\n<blockquote>\n<p>哇,23个设计模式，好多啊，看的我头皮发麻，很多感觉也只是一知半解，这个还是得通过以后得面对对象编程去总结经验。这个并不是什么教学啊，这只是我的个人笔记，有想法的去看<a href=\"http://www.runoob.com/design-pattern/decorator-pattern.html\" target=\"_blank\" rel=\"noopener\">菜鸟教程</a><br>\n这个设计模式，主要的目的是提高一个代码的规范性，可扩展性，还有就是一些常见的面对对象的一个技巧，不管怎么说，万物皆对象。</p>\n</blockquote>\n"},{"title":"面试常见问题[数据结构]","date":"2019-03-21T13:52:45.000Z","_content":"\n> 可以说除了大体的设计，上课学的数据结构忘光光了。发现现在面试都是这种问题，我就自己复习一遍把\n\n## 线性表\n\n### 数组\n> 没啥好说的 \n\n### 链表\n> 开空间的话可以有两种方法\n```c++\nint *p; p = new int[10];\nint *p; p = (int *)malloc(sizeof(int)*10);\n```\n> **几种内存分配的函数**\n<1>alloca是向栈申请内存,因此无需释放.\n<2>malloc分配的内存是位于堆中的,并且没有初始化内存的内容,因此基本上malloc之后,调用函数memset来初始化这部分的内存空间.\n<3>calloc则将初始化这部分的内存,设置为0.\n<4>realloc则对malloc申请的内存进行大小的调整.\n\n> **堆，栈，静态存储区的 区别**\n> 对于堆区、栈区和静态存储区它们之间最大的不同在于，栈的生命周期很短暂。但是堆区和静态存储区的生命周期相当于与程序的生命同时存在（如果您不在程序运行中间将堆内存delete的话），我们将这种变量或数据成为全局变量或数据。但是，对于堆区的内存空间使用更加灵活，因为它允许你在不需要它的时候，随时将它释放掉，而静态存储区将一直存在于程序的整个生命周期中。\n#### 单链表\n只能向一个方向走呗\n#### 双向链表\n两个方向呗\n#### 循环链表\n没啥好说的\n\n## 栈与队列\n\n### stack\n满足后进先出\n### queue\n满足先进先出\n\n## 树\n只有父节点的东西\n\n### 二叉树\n每个节点最多只有两个子节点\n\n> **三种遍历方式**\n+ 先序遍历 中左右\n+ 中序遍历 左中右\n+ 后序遍历 左右中\n\n### 平衡二叉树\n就是对节点加入了左右旋的操作，目的在于控制深度\n\n### 堆\n这个就是满足 \n$a_i >= a_{2*i}$ 和  $a_i >= a_{2*i}+1$  \n的一种数据结构，可以用线性表来实现，保证这个就行，然后就是满足了O(1)查找，O(log(n))更新。\n\n### 红黑树\n这个还是我第一次看到这个\n+ （1）每个节点或者是黑色，或者是红色。\n+ （2）根节点是黑色。\n+ （3）每个叶子节点（NIL）是黑色。 [注意：这里叶子节点，是指为空(NIL或NULL)的叶子节点！]\n+ （4）如果一个节点是红色的，则它的子节点必须是黑色的。\n+ （5）从一个节点到该节点的子孙节点的所有路径上包含相同数目的黑节点。\n\n#### 左旋\n这里的左旋很简单，就是把现在节点的右节点变成现节点，把原来右节点的左儿子变成原来的右节点。\n#### 右旋\n差不多把，左儿子变爸爸，左儿子的右孙子变成爸爸的左儿子\n#### 添加\n> 这个还是挺麻烦的。要考虑很多情况，主要思想就是\n+ 按二叉树的方式，插进去。\n+ 节点变红\n+ 开始调整。关键思想就是**将红色的节点移到根节点；然后，将根节点设为黑色**\n#### 删除\n>  这个怎么说呢，感觉上就是分情况讨论为主。\n\n### b树\n这个就是平衡多路查找树\n> B 树是为了磁盘或其它存储设备而设计的一种多叉平衡二叉树，他好在啥，好像是在硬盘i/o方面有一定的好处。\n\n#### 性质\n+ 根节点至少有两个子节点\n+ 每个节点有M-1个key，并且以升序排列\n+ 位于M-1和M key的子节点的值位于M-1 和M key对应的Value之间\n+ 其它节点至少有M/2个子节点\n\n#### 插入删除\n> 这个就比那些奇奇怪怪的东西好多了，他的关键思想就是，找到位置，插进去。塞不下了，就飞到父亲节点那去，父亲节点满了就分裂嘛。删除的思想就是找到中序遍历的比根节点第一个大的点，替上去，下面再进行修改。\n\n### b+树\n相对那个b树来说多了几个性质\n+ 有k个子节点的节点有k个关键码\n+ 非叶子节点只有索引的功能\n+ 树的所有叶节点构成一个有序链表，可以按照关键码排序的次序遍历。\n\n#### 插入删除方面\n> 相对b树来说主要的问题就是，b树有个节点上浮的过程，但是b+不是，只是把那个复制一个上去。\n\n#### 应用\n文件存储系统以及数据库系统  \n局部性原理，程序运行期间所需要的数据很集中。\n\n\n\n\n","source":"_posts/面试常见问题-数据结构.md","raw":"---\ntitle: '面试常见问题[数据结构]'\ndate: 2019-03-21 21:52:45\ntags:\n---\n\n> 可以说除了大体的设计，上课学的数据结构忘光光了。发现现在面试都是这种问题，我就自己复习一遍把\n\n## 线性表\n\n### 数组\n> 没啥好说的 \n\n### 链表\n> 开空间的话可以有两种方法\n```c++\nint *p; p = new int[10];\nint *p; p = (int *)malloc(sizeof(int)*10);\n```\n> **几种内存分配的函数**\n<1>alloca是向栈申请内存,因此无需释放.\n<2>malloc分配的内存是位于堆中的,并且没有初始化内存的内容,因此基本上malloc之后,调用函数memset来初始化这部分的内存空间.\n<3>calloc则将初始化这部分的内存,设置为0.\n<4>realloc则对malloc申请的内存进行大小的调整.\n\n> **堆，栈，静态存储区的 区别**\n> 对于堆区、栈区和静态存储区它们之间最大的不同在于，栈的生命周期很短暂。但是堆区和静态存储区的生命周期相当于与程序的生命同时存在（如果您不在程序运行中间将堆内存delete的话），我们将这种变量或数据成为全局变量或数据。但是，对于堆区的内存空间使用更加灵活，因为它允许你在不需要它的时候，随时将它释放掉，而静态存储区将一直存在于程序的整个生命周期中。\n#### 单链表\n只能向一个方向走呗\n#### 双向链表\n两个方向呗\n#### 循环链表\n没啥好说的\n\n## 栈与队列\n\n### stack\n满足后进先出\n### queue\n满足先进先出\n\n## 树\n只有父节点的东西\n\n### 二叉树\n每个节点最多只有两个子节点\n\n> **三种遍历方式**\n+ 先序遍历 中左右\n+ 中序遍历 左中右\n+ 后序遍历 左右中\n\n### 平衡二叉树\n就是对节点加入了左右旋的操作，目的在于控制深度\n\n### 堆\n这个就是满足 \n$a_i >= a_{2*i}$ 和  $a_i >= a_{2*i}+1$  \n的一种数据结构，可以用线性表来实现，保证这个就行，然后就是满足了O(1)查找，O(log(n))更新。\n\n### 红黑树\n这个还是我第一次看到这个\n+ （1）每个节点或者是黑色，或者是红色。\n+ （2）根节点是黑色。\n+ （3）每个叶子节点（NIL）是黑色。 [注意：这里叶子节点，是指为空(NIL或NULL)的叶子节点！]\n+ （4）如果一个节点是红色的，则它的子节点必须是黑色的。\n+ （5）从一个节点到该节点的子孙节点的所有路径上包含相同数目的黑节点。\n\n#### 左旋\n这里的左旋很简单，就是把现在节点的右节点变成现节点，把原来右节点的左儿子变成原来的右节点。\n#### 右旋\n差不多把，左儿子变爸爸，左儿子的右孙子变成爸爸的左儿子\n#### 添加\n> 这个还是挺麻烦的。要考虑很多情况，主要思想就是\n+ 按二叉树的方式，插进去。\n+ 节点变红\n+ 开始调整。关键思想就是**将红色的节点移到根节点；然后，将根节点设为黑色**\n#### 删除\n>  这个怎么说呢，感觉上就是分情况讨论为主。\n\n### b树\n这个就是平衡多路查找树\n> B 树是为了磁盘或其它存储设备而设计的一种多叉平衡二叉树，他好在啥，好像是在硬盘i/o方面有一定的好处。\n\n#### 性质\n+ 根节点至少有两个子节点\n+ 每个节点有M-1个key，并且以升序排列\n+ 位于M-1和M key的子节点的值位于M-1 和M key对应的Value之间\n+ 其它节点至少有M/2个子节点\n\n#### 插入删除\n> 这个就比那些奇奇怪怪的东西好多了，他的关键思想就是，找到位置，插进去。塞不下了，就飞到父亲节点那去，父亲节点满了就分裂嘛。删除的思想就是找到中序遍历的比根节点第一个大的点，替上去，下面再进行修改。\n\n### b+树\n相对那个b树来说多了几个性质\n+ 有k个子节点的节点有k个关键码\n+ 非叶子节点只有索引的功能\n+ 树的所有叶节点构成一个有序链表，可以按照关键码排序的次序遍历。\n\n#### 插入删除方面\n> 相对b树来说主要的问题就是，b树有个节点上浮的过程，但是b+不是，只是把那个复制一个上去。\n\n#### 应用\n文件存储系统以及数据库系统  \n局部性原理，程序运行期间所需要的数据很集中。\n\n\n\n\n","slug":"面试常见问题-数据结构","published":1,"updated":"2019-03-27T14:43:10.293Z","_id":"cjtravwvb001e34uggqyobixy","comments":1,"layout":"post","photos":[],"link":"","content":"<blockquote>\n<p>可以说除了大体的设计，上课学的数据结构忘光光了。发现现在面试都是这种问题，我就自己复习一遍把</p>\n</blockquote>\n<h2 id=\"线性表\"><a class=\"markdownIt-Anchor\" href=\"#线性表\"></a> 线性表</h2>\n<h3 id=\"数组\"><a class=\"markdownIt-Anchor\" href=\"#数组\"></a> 数组</h3>\n<blockquote>\n<p>没啥好说的</p>\n</blockquote>\n<h3 id=\"链表\"><a class=\"markdownIt-Anchor\" href=\"#链表\"></a> 链表</h3>\n<blockquote>\n<p>开空间的话可以有两种方法</p>\n</blockquote>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">int</span> *p; p = <span class=\"keyword\">new</span> <span class=\"keyword\">int</span>[<span class=\"number\">10</span>];</span><br><span class=\"line\"><span class=\"keyword\">int</span> *p; p = (<span class=\"keyword\">int</span> *)<span class=\"built_in\">malloc</span>(<span class=\"keyword\">sizeof</span>(<span class=\"keyword\">int</span>)*<span class=\"number\">10</span>);</span><br></pre></td></tr></table></figure>\n<blockquote>\n<p><strong>几种内存分配的函数</strong><br>\n&lt;1&gt;alloca是向栈申请内存,因此无需释放.<br>\n&lt;2&gt;malloc分配的内存是位于堆中的,并且没有初始化内存的内容,因此基本上malloc之后,调用函数memset来初始化这部分的内存空间.<br>\n&lt;3&gt;calloc则将初始化这部分的内存,设置为0.<br>\n&lt;4&gt;realloc则对malloc申请的内存进行大小的调整.</p>\n</blockquote>\n<blockquote>\n<p><strong>堆，栈，静态存储区的 区别</strong><br>\n对于堆区、栈区和静态存储区它们之间最大的不同在于，栈的生命周期很短暂。但是堆区和静态存储区的生命周期相当于与程序的生命同时存在（如果您不在程序运行中间将堆内存delete的话），我们将这种变量或数据成为全局变量或数据。但是，对于堆区的内存空间使用更加灵活，因为它允许你在不需要它的时候，随时将它释放掉，而静态存储区将一直存在于程序的整个生命周期中。</p>\n</blockquote>\n<h4 id=\"单链表\"><a class=\"markdownIt-Anchor\" href=\"#单链表\"></a> 单链表</h4>\n<p>只能向一个方向走呗</p>\n<h4 id=\"双向链表\"><a class=\"markdownIt-Anchor\" href=\"#双向链表\"></a> 双向链表</h4>\n<p>两个方向呗</p>\n<h4 id=\"循环链表\"><a class=\"markdownIt-Anchor\" href=\"#循环链表\"></a> 循环链表</h4>\n<p>没啥好说的</p>\n<h2 id=\"栈与队列\"><a class=\"markdownIt-Anchor\" href=\"#栈与队列\"></a> 栈与队列</h2>\n<h3 id=\"stack\"><a class=\"markdownIt-Anchor\" href=\"#stack\"></a> stack</h3>\n<p>满足后进先出</p>\n<h3 id=\"queue\"><a class=\"markdownIt-Anchor\" href=\"#queue\"></a> queue</h3>\n<p>满足先进先出</p>\n<h2 id=\"树\"><a class=\"markdownIt-Anchor\" href=\"#树\"></a> 树</h2>\n<p>只有父节点的东西</p>\n<h3 id=\"二叉树\"><a class=\"markdownIt-Anchor\" href=\"#二叉树\"></a> 二叉树</h3>\n<p>每个节点最多只有两个子节点</p>\n<blockquote>\n<p><strong>三种遍历方式</strong></p>\n</blockquote>\n<ul>\n<li>先序遍历 中左右</li>\n<li>中序遍历 左中右</li>\n<li>后序遍历 左右中</li>\n</ul>\n<h3 id=\"平衡二叉树\"><a class=\"markdownIt-Anchor\" href=\"#平衡二叉树\"></a> 平衡二叉树</h3>\n<p>就是对节点加入了左右旋的操作，目的在于控制深度</p>\n<h3 id=\"堆\"><a class=\"markdownIt-Anchor\" href=\"#堆\"></a> 堆</h3>\n<p>这个就是满足<br>\n<span class=\"katex\"><span class=\"katex-mathml\"><math><semantics><mrow><msub><mi>a</mi><mi>i</mi></msub><mo>&gt;</mo><mo>=</mo><msub><mi>a</mi><mrow><mn>2</mn><mo>∗</mo><mi>i</mi></mrow></msub></mrow><annotation encoding=\"application/x-tex\">a_i &gt;= a_{2*i}</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"strut\" style=\"height:0.5391em;\"></span><span class=\"strut bottom\" style=\"height:0.6891em;vertical-align:-0.15em;\"></span><span class=\"base\"><span class=\"mord\"><span class=\"mord mathit\">a</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.31166399999999994em;\"><span style=\"top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathit mtight\">i</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"></span></span></span></span></span><span class=\"mord rule\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">&gt;</span><span class=\"mrel\">=</span><span class=\"mord rule\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mord\"><span class=\"mord mathit\">a</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.31166399999999994em;\"><span style=\"top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mtight\">2</span><span class=\"mbin mtight\">∗</span><span class=\"mord mathit mtight\">i</span></span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"></span></span></span></span></span></span></span></span> 和  <span class=\"katex\"><span class=\"katex-mathml\"><math><semantics><mrow><msub><mi>a</mi><mi>i</mi></msub><mo>&gt;</mo><mo>=</mo><msub><mi>a</mi><mrow><mn>2</mn><mo>∗</mo><mi>i</mi></mrow></msub><mo>+</mo><mn>1</mn></mrow><annotation encoding=\"application/x-tex\">a_i &gt;= a_{2*i}+1</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"strut\" style=\"height:0.64444em;\"></span><span class=\"strut bottom\" style=\"height:0.79444em;vertical-align:-0.15em;\"></span><span class=\"base\"><span class=\"mord\"><span class=\"mord mathit\">a</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.31166399999999994em;\"><span style=\"top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathit mtight\">i</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"></span></span></span></span></span><span class=\"mord rule\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">&gt;</span><span class=\"mrel\">=</span><span class=\"mord rule\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mord\"><span class=\"mord mathit\">a</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.31166399999999994em;\"><span style=\"top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mtight\">2</span><span class=\"mbin mtight\">∗</span><span class=\"mord mathit mtight\">i</span></span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"></span></span></span></span></span><span class=\"mord rule\" style=\"margin-right:0.2222222222222222em;\"></span><span class=\"mbin\">+</span><span class=\"mord rule\" style=\"margin-right:0.2222222222222222em;\"></span><span class=\"mord\">1</span></span></span></span><br>\n的一种数据结构，可以用线性表来实现，保证这个就行，然后就是满足了O(1)查找，O(log(n))更新。</p>\n<h3 id=\"红黑树\"><a class=\"markdownIt-Anchor\" href=\"#红黑树\"></a> 红黑树</h3>\n<p>这个还是我第一次看到这个</p>\n<ul>\n<li>（1）每个节点或者是黑色，或者是红色。</li>\n<li>（2）根节点是黑色。</li>\n<li>（3）每个叶子节点（NIL）是黑色。 [注意：这里叶子节点，是指为空(NIL或NULL)的叶子节点！]</li>\n<li>（4）如果一个节点是红色的，则它的子节点必须是黑色的。</li>\n<li>（5）从一个节点到该节点的子孙节点的所有路径上包含相同数目的黑节点。</li>\n</ul>\n<h4 id=\"左旋\"><a class=\"markdownIt-Anchor\" href=\"#左旋\"></a> 左旋</h4>\n<p>这里的左旋很简单，就是把现在节点的右节点变成现节点，把原来右节点的左儿子变成原来的右节点。</p>\n<h4 id=\"右旋\"><a class=\"markdownIt-Anchor\" href=\"#右旋\"></a> 右旋</h4>\n<p>差不多把，左儿子变爸爸，左儿子的右孙子变成爸爸的左儿子</p>\n<h4 id=\"添加\"><a class=\"markdownIt-Anchor\" href=\"#添加\"></a> 添加</h4>\n<blockquote>\n<p>这个还是挺麻烦的。要考虑很多情况，主要思想就是</p>\n</blockquote>\n<ul>\n<li>按二叉树的方式，插进去。</li>\n<li>节点变红</li>\n<li>开始调整。关键思想就是<strong>将红色的节点移到根节点；然后，将根节点设为黑色</strong></li>\n</ul>\n<h4 id=\"删除\"><a class=\"markdownIt-Anchor\" href=\"#删除\"></a> 删除</h4>\n<blockquote>\n<p>这个怎么说呢，感觉上就是分情况讨论为主。</p>\n</blockquote>\n<h3 id=\"b树\"><a class=\"markdownIt-Anchor\" href=\"#b树\"></a> b树</h3>\n<p>这个就是平衡多路查找树</p>\n<blockquote>\n<p>B 树是为了磁盘或其它存储设备而设计的一种多叉平衡二叉树，他好在啥，好像是在硬盘i/o方面有一定的好处。</p>\n</blockquote>\n<h4 id=\"性质\"><a class=\"markdownIt-Anchor\" href=\"#性质\"></a> 性质</h4>\n<ul>\n<li>根节点至少有两个子节点</li>\n<li>每个节点有M-1个key，并且以升序排列</li>\n<li>位于M-1和M key的子节点的值位于M-1 和M key对应的Value之间</li>\n<li>其它节点至少有M/2个子节点</li>\n</ul>\n<h4 id=\"插入删除\"><a class=\"markdownIt-Anchor\" href=\"#插入删除\"></a> 插入删除</h4>\n<blockquote>\n<p>这个就比那些奇奇怪怪的东西好多了，他的关键思想就是，找到位置，插进去。塞不下了，就飞到父亲节点那去，父亲节点满了就分裂嘛。删除的思想就是找到中序遍历的比根节点第一个大的点，替上去，下面再进行修改。</p>\n</blockquote>\n<h3 id=\"b树-2\"><a class=\"markdownIt-Anchor\" href=\"#b树-2\"></a> b+树</h3>\n<p>相对那个b树来说多了几个性质</p>\n<ul>\n<li>有k个子节点的节点有k个关键码</li>\n<li>非叶子节点只有索引的功能</li>\n<li>树的所有叶节点构成一个有序链表，可以按照关键码排序的次序遍历。</li>\n</ul>\n<h4 id=\"插入删除方面\"><a class=\"markdownIt-Anchor\" href=\"#插入删除方面\"></a> 插入删除方面</h4>\n<blockquote>\n<p>相对b树来说主要的问题就是，b树有个节点上浮的过程，但是b+不是，只是把那个复制一个上去。</p>\n</blockquote>\n<h4 id=\"应用\"><a class=\"markdownIt-Anchor\" href=\"#应用\"></a> 应用</h4>\n<p>文件存储系统以及数据库系统<br>\n局部性原理，程序运行期间所需要的数据很集中。</p>\n","site":{"data":{}},"excerpt":"","more":"<blockquote>\n<p>可以说除了大体的设计，上课学的数据结构忘光光了。发现现在面试都是这种问题，我就自己复习一遍把</p>\n</blockquote>\n<h2 id=\"线性表\"><a class=\"markdownIt-Anchor\" href=\"#线性表\"></a> 线性表</h2>\n<h3 id=\"数组\"><a class=\"markdownIt-Anchor\" href=\"#数组\"></a> 数组</h3>\n<blockquote>\n<p>没啥好说的</p>\n</blockquote>\n<h3 id=\"链表\"><a class=\"markdownIt-Anchor\" href=\"#链表\"></a> 链表</h3>\n<blockquote>\n<p>开空间的话可以有两种方法</p>\n</blockquote>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">int</span> *p; p = <span class=\"keyword\">new</span> <span class=\"keyword\">int</span>[<span class=\"number\">10</span>];</span><br><span class=\"line\"><span class=\"keyword\">int</span> *p; p = (<span class=\"keyword\">int</span> *)<span class=\"built_in\">malloc</span>(<span class=\"keyword\">sizeof</span>(<span class=\"keyword\">int</span>)*<span class=\"number\">10</span>);</span><br></pre></td></tr></table></figure>\n<blockquote>\n<p><strong>几种内存分配的函数</strong><br>\n&lt;1&gt;alloca是向栈申请内存,因此无需释放.<br>\n&lt;2&gt;malloc分配的内存是位于堆中的,并且没有初始化内存的内容,因此基本上malloc之后,调用函数memset来初始化这部分的内存空间.<br>\n&lt;3&gt;calloc则将初始化这部分的内存,设置为0.<br>\n&lt;4&gt;realloc则对malloc申请的内存进行大小的调整.</p>\n</blockquote>\n<blockquote>\n<p><strong>堆，栈，静态存储区的 区别</strong><br>\n对于堆区、栈区和静态存储区它们之间最大的不同在于，栈的生命周期很短暂。但是堆区和静态存储区的生命周期相当于与程序的生命同时存在（如果您不在程序运行中间将堆内存delete的话），我们将这种变量或数据成为全局变量或数据。但是，对于堆区的内存空间使用更加灵活，因为它允许你在不需要它的时候，随时将它释放掉，而静态存储区将一直存在于程序的整个生命周期中。</p>\n</blockquote>\n<h4 id=\"单链表\"><a class=\"markdownIt-Anchor\" href=\"#单链表\"></a> 单链表</h4>\n<p>只能向一个方向走呗</p>\n<h4 id=\"双向链表\"><a class=\"markdownIt-Anchor\" href=\"#双向链表\"></a> 双向链表</h4>\n<p>两个方向呗</p>\n<h4 id=\"循环链表\"><a class=\"markdownIt-Anchor\" href=\"#循环链表\"></a> 循环链表</h4>\n<p>没啥好说的</p>\n<h2 id=\"栈与队列\"><a class=\"markdownIt-Anchor\" href=\"#栈与队列\"></a> 栈与队列</h2>\n<h3 id=\"stack\"><a class=\"markdownIt-Anchor\" href=\"#stack\"></a> stack</h3>\n<p>满足后进先出</p>\n<h3 id=\"queue\"><a class=\"markdownIt-Anchor\" href=\"#queue\"></a> queue</h3>\n<p>满足先进先出</p>\n<h2 id=\"树\"><a class=\"markdownIt-Anchor\" href=\"#树\"></a> 树</h2>\n<p>只有父节点的东西</p>\n<h3 id=\"二叉树\"><a class=\"markdownIt-Anchor\" href=\"#二叉树\"></a> 二叉树</h3>\n<p>每个节点最多只有两个子节点</p>\n<blockquote>\n<p><strong>三种遍历方式</strong></p>\n</blockquote>\n<ul>\n<li>先序遍历 中左右</li>\n<li>中序遍历 左中右</li>\n<li>后序遍历 左右中</li>\n</ul>\n<h3 id=\"平衡二叉树\"><a class=\"markdownIt-Anchor\" href=\"#平衡二叉树\"></a> 平衡二叉树</h3>\n<p>就是对节点加入了左右旋的操作，目的在于控制深度</p>\n<h3 id=\"堆\"><a class=\"markdownIt-Anchor\" href=\"#堆\"></a> 堆</h3>\n<p>这个就是满足<br>\n<span class=\"katex\"><span class=\"katex-mathml\"><math><semantics><mrow><msub><mi>a</mi><mi>i</mi></msub><mo>&gt;</mo><mo>=</mo><msub><mi>a</mi><mrow><mn>2</mn><mo>∗</mo><mi>i</mi></mrow></msub></mrow><annotation encoding=\"application/x-tex\">a_i &gt;= a_{2*i}</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"strut\" style=\"height:0.5391em;\"></span><span class=\"strut bottom\" style=\"height:0.6891em;vertical-align:-0.15em;\"></span><span class=\"base\"><span class=\"mord\"><span class=\"mord mathit\">a</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.31166399999999994em;\"><span style=\"top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathit mtight\">i</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"></span></span></span></span></span><span class=\"mord rule\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">&gt;</span><span class=\"mrel\">=</span><span class=\"mord rule\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mord\"><span class=\"mord mathit\">a</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.31166399999999994em;\"><span style=\"top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mtight\">2</span><span class=\"mbin mtight\">∗</span><span class=\"mord mathit mtight\">i</span></span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"></span></span></span></span></span></span></span></span> 和  <span class=\"katex\"><span class=\"katex-mathml\"><math><semantics><mrow><msub><mi>a</mi><mi>i</mi></msub><mo>&gt;</mo><mo>=</mo><msub><mi>a</mi><mrow><mn>2</mn><mo>∗</mo><mi>i</mi></mrow></msub><mo>+</mo><mn>1</mn></mrow><annotation encoding=\"application/x-tex\">a_i &gt;= a_{2*i}+1</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"strut\" style=\"height:0.64444em;\"></span><span class=\"strut bottom\" style=\"height:0.79444em;vertical-align:-0.15em;\"></span><span class=\"base\"><span class=\"mord\"><span class=\"mord mathit\">a</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.31166399999999994em;\"><span style=\"top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathit mtight\">i</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"></span></span></span></span></span><span class=\"mord rule\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">&gt;</span><span class=\"mrel\">=</span><span class=\"mord rule\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mord\"><span class=\"mord mathit\">a</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.31166399999999994em;\"><span style=\"top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mtight\">2</span><span class=\"mbin mtight\">∗</span><span class=\"mord mathit mtight\">i</span></span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"></span></span></span></span></span><span class=\"mord rule\" style=\"margin-right:0.2222222222222222em;\"></span><span class=\"mbin\">+</span><span class=\"mord rule\" style=\"margin-right:0.2222222222222222em;\"></span><span class=\"mord\">1</span></span></span></span><br>\n的一种数据结构，可以用线性表来实现，保证这个就行，然后就是满足了O(1)查找，O(log(n))更新。</p>\n<h3 id=\"红黑树\"><a class=\"markdownIt-Anchor\" href=\"#红黑树\"></a> 红黑树</h3>\n<p>这个还是我第一次看到这个</p>\n<ul>\n<li>（1）每个节点或者是黑色，或者是红色。</li>\n<li>（2）根节点是黑色。</li>\n<li>（3）每个叶子节点（NIL）是黑色。 [注意：这里叶子节点，是指为空(NIL或NULL)的叶子节点！]</li>\n<li>（4）如果一个节点是红色的，则它的子节点必须是黑色的。</li>\n<li>（5）从一个节点到该节点的子孙节点的所有路径上包含相同数目的黑节点。</li>\n</ul>\n<h4 id=\"左旋\"><a class=\"markdownIt-Anchor\" href=\"#左旋\"></a> 左旋</h4>\n<p>这里的左旋很简单，就是把现在节点的右节点变成现节点，把原来右节点的左儿子变成原来的右节点。</p>\n<h4 id=\"右旋\"><a class=\"markdownIt-Anchor\" href=\"#右旋\"></a> 右旋</h4>\n<p>差不多把，左儿子变爸爸，左儿子的右孙子变成爸爸的左儿子</p>\n<h4 id=\"添加\"><a class=\"markdownIt-Anchor\" href=\"#添加\"></a> 添加</h4>\n<blockquote>\n<p>这个还是挺麻烦的。要考虑很多情况，主要思想就是</p>\n</blockquote>\n<ul>\n<li>按二叉树的方式，插进去。</li>\n<li>节点变红</li>\n<li>开始调整。关键思想就是<strong>将红色的节点移到根节点；然后，将根节点设为黑色</strong></li>\n</ul>\n<h4 id=\"删除\"><a class=\"markdownIt-Anchor\" href=\"#删除\"></a> 删除</h4>\n<blockquote>\n<p>这个怎么说呢，感觉上就是分情况讨论为主。</p>\n</blockquote>\n<h3 id=\"b树\"><a class=\"markdownIt-Anchor\" href=\"#b树\"></a> b树</h3>\n<p>这个就是平衡多路查找树</p>\n<blockquote>\n<p>B 树是为了磁盘或其它存储设备而设计的一种多叉平衡二叉树，他好在啥，好像是在硬盘i/o方面有一定的好处。</p>\n</blockquote>\n<h4 id=\"性质\"><a class=\"markdownIt-Anchor\" href=\"#性质\"></a> 性质</h4>\n<ul>\n<li>根节点至少有两个子节点</li>\n<li>每个节点有M-1个key，并且以升序排列</li>\n<li>位于M-1和M key的子节点的值位于M-1 和M key对应的Value之间</li>\n<li>其它节点至少有M/2个子节点</li>\n</ul>\n<h4 id=\"插入删除\"><a class=\"markdownIt-Anchor\" href=\"#插入删除\"></a> 插入删除</h4>\n<blockquote>\n<p>这个就比那些奇奇怪怪的东西好多了，他的关键思想就是，找到位置，插进去。塞不下了，就飞到父亲节点那去，父亲节点满了就分裂嘛。删除的思想就是找到中序遍历的比根节点第一个大的点，替上去，下面再进行修改。</p>\n</blockquote>\n<h3 id=\"b树-2\"><a class=\"markdownIt-Anchor\" href=\"#b树-2\"></a> b+树</h3>\n<p>相对那个b树来说多了几个性质</p>\n<ul>\n<li>有k个子节点的节点有k个关键码</li>\n<li>非叶子节点只有索引的功能</li>\n<li>树的所有叶节点构成一个有序链表，可以按照关键码排序的次序遍历。</li>\n</ul>\n<h4 id=\"插入删除方面\"><a class=\"markdownIt-Anchor\" href=\"#插入删除方面\"></a> 插入删除方面</h4>\n<blockquote>\n<p>相对b树来说主要的问题就是，b树有个节点上浮的过程，但是b+不是，只是把那个复制一个上去。</p>\n</blockquote>\n<h4 id=\"应用\"><a class=\"markdownIt-Anchor\" href=\"#应用\"></a> 应用</h4>\n<p>文件存储系统以及数据库系统<br>\n局部性原理，程序运行期间所需要的数据很集中。</p>\n"}],"PostAsset":[],"PostCategory":[],"PostTag":[{"post_id":"cjtravwqr000134ugor70hj19","tag_id":"cjtravwr1000334ugh9fw2cqu","_id":"cjtravwrb000c34ug3fwnqeam"},{"post_id":"cjtravwqr000134ugor70hj19","tag_id":"cjtravwr5000734ugxcnk5xly","_id":"cjtravwrc000e34ug0n17i2je"},{"post_id":"cjtravwqy000234ugq6bjaiff","tag_id":"cjtravwr1000334ugh9fw2cqu","_id":"cjtravwrf000i34ugbirz2lk0"},{"post_id":"cjtravwqy000234ugq6bjaiff","tag_id":"cjtravwr5000734ugxcnk5xly","_id":"cjtravwrf000j34ugs54bnjv4"},{"post_id":"cjtravwr2000434uglzqnyy2e","tag_id":"cjtravwre000h34ugh0etorfl","_id":"cjtravwrf000l34ugfb03e8r6"},{"post_id":"cjtravwr3000534ugyzd28pek","tag_id":"cjtravwr1000334ugh9fw2cqu","_id":"cjtravwrg000n34ugs8wndp6m"},{"post_id":"cjtravwr3000534ugyzd28pek","tag_id":"cjtravwrf000k34ugbh138iy8","_id":"cjtravwrg000o34ugi0gu3bb2"},{"post_id":"cjtravwr6000834ug4lzwgtht","tag_id":"cjtravwrf000m34ug0dn1j1zo","_id":"cjtravwrg000q34ugo8vofkgi"},{"post_id":"cjtravwr7000934ugyhzwagfg","tag_id":"cjtravwr5000734ugxcnk5xly","_id":"cjtravwrh000s34ugf659vnd1"},{"post_id":"cjtravwr7000934ugyhzwagfg","tag_id":"cjtravwr1000334ugh9fw2cqu","_id":"cjtravwrh000t34ugg5hm3wp2"},{"post_id":"cjtravwr7000934ugyhzwagfg","tag_id":"cjtravwrg000p34ugznzfhlrt","_id":"cjtravwrh000v34ugekpm25pw"},{"post_id":"cjtravwr9000b34ugh7cjrj43","tag_id":"cjtravwr1000334ugh9fw2cqu","_id":"cjtravwri000x34ugjalufdu8"},{"post_id":"cjtravwr9000b34ugh7cjrj43","tag_id":"cjtravwrg000p34ugznzfhlrt","_id":"cjtravwri000y34ugeywsifkh"},{"post_id":"cjtravwr9000b34ugh7cjrj43","tag_id":"cjtravwrh000u34ug9nuiyl7m","_id":"cjtravwrj001034ugl6tdz9nx"},{"post_id":"cjtravwr9000b34ugh7cjrj43","tag_id":"cjtravwr5000734ugxcnk5xly","_id":"cjtravwrj001134ugoz6qdy7h"},{"post_id":"cjtravwrb000d34ug9fdz0eao","tag_id":"cjtravwri000w34ugl9t1bqr6","_id":"cjtravwrj001334ug4ciwbq56"},{"post_id":"cjtravwrd000g34ugzvwoj8fw","tag_id":"cjtravwr1000334ugh9fw2cqu","_id":"cjtravwrj001434ughpc2ec8x"},{"post_id":"cjtravwrd000g34ugzvwoj8fw","tag_id":"cjtravwri000z34ugu5i527gl","_id":"cjtravwrk001534ugodzezow2"},{"post_id":"cjtravwrd000g34ugzvwoj8fw","tag_id":"cjtravwrj001234ug0pd584x6","_id":"cjtravwrk001634ugliah68xb"},{"post_id":"cjtravwv6001834ugtpcmt7kt","tag_id":"cjtravwr1000334ugh9fw2cqu","_id":"cjtravwvd001h34ugtp4ye1hy"},{"post_id":"cjtravwv6001834ugtpcmt7kt","tag_id":"cjtravwv9001b34ugkc0ju23q","_id":"cjtravwvd001i34ugtcgadk8s"},{"post_id":"cjtravwv6001834ugtpcmt7kt","tag_id":"cjtravwvc001f34ugwsq75zbj","_id":"cjtravwve001k34ugzsyi003o"},{"post_id":"cjtravwv7001a34ug3le203sk","tag_id":"cjtravwvc001g34ug2dwdkhuk","_id":"cjtravwvf001m34ug12ty5rjr"},{"post_id":"cjtravwv7001a34ug3le203sk","tag_id":"cjtravwve001j34ugc1d282hs","_id":"cjtravwvf001n34ug1ubdikxl"},{"post_id":"cjtravwv9001d34ug2rtwcsh9","tag_id":"cjtravwvf001l34ugv2icafxk","_id":"cjtravwvg001p34ugpid6dfyn"},{"post_id":"cjtravwv9001d34ug2rtwcsh9","tag_id":"cjtravwvf001o34ugsr1svr05","_id":"cjtravwvg001q34ugsjdcuhau"}],"Tag":[{"name":"ACM","_id":"cjtravwr1000334ugh9fw2cqu"},{"name":"dp","_id":"cjtravwr5000734ugxcnk5xly"},{"name":"服务器，博客","_id":"cjtravwre000h34ugh0etorfl"},{"name":"博弈","_id":"cjtravwrf000k34ugbh138iy8"},{"name":"玩","_id":"cjtravwrf000m34ug0dn1j1zo"},{"name":"期望","_id":"cjtravwrg000p34ugznzfhlrt"},{"name":"概率","_id":"cjtravwrh000u34ug9nuiyl7m"},{"name":"工作","_id":"cjtravwri000w34ugl9t1bqr6"},{"name":"数论","_id":"cjtravwri000z34ugu5i527gl"},{"name":"莫比乌斯","_id":"cjtravwrj001234ug0pd584x6"},{"name":"oj","_id":"cjtravwv9001b34ugkc0ju23q"},{"name":"服务器","_id":"cjtravwvc001f34ugwsq75zbj"},{"name":"java","_id":"cjtravwvc001g34ug2dwdkhuk"},{"name":"笔记","_id":"cjtravwve001j34ugc1d282hs"},{"name":"面对对象","_id":"cjtravwvf001l34ugv2icafxk"},{"name":"设计模式","_id":"cjtravwvf001o34ugsr1svr05"}]}}